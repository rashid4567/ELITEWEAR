<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>My Orders | Elite Wear</title>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.0/font/bootstrap-icons.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="/userStyle/getOrder.css" />
    <link rel="stylesheet" href="/userStyle/footer.css">
    <link rel="stylesheet" href="/userStyle/header.css">
    <style>
      .order-progress .progress {
        height: 10px;
        background-color: #e9ecef;
      }
      .order-progress .progress-bar {
        transition: width 0.5s ease-in-out;
      }
      .status-pending { color: #6c757d; }
      .status-processing { color: #ffc107; }
      .status-confirmed { color: #17a2b8; }
      .status-shipped { color: #007bff; }
      .status-delivered { color: #28a745; }
      .status-cancelled { color: #dc3545; }
      .status-return-requested { color: #fd7e14; }
      .status-return-approved { color: #28a745; }
      .status-returned { color: #28a745; }
      .status-return-rejected { color: #dc3545; }
      .status-payment-failed { color: #dc3545; }
      .action-btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
      }
      .refund-info {
        color: #28a745;
        font-size: 0.9rem;
      }
      .payment-failed-badge {
        background-color: #dc3545;
        color: white;
        padding: 3px 8px;
        border-radius: 4px;
        font-size: 0.8rem;
        font-weight: 500;
        display: inline-block;
        margin-bottom: 8px;
      }
      .payment-pending-badge {
        background-color: #ffc107;
        color: #212529;
        padding: 3px 8px;
        border-radius: 4px;
        font-size: 0.8rem;
        font-weight: 500;
        display: inline-block;
        margin-bottom: 8px;
      }
      .btn-retry-payment {
        background-color: #0d6efd;
        color: white;
        border: none;
        transition: all 0.3s ease;
      }
      .btn-retry-payment:hover {
        background-color: #0b5ed7;
        transform: translateY(-2px);
      }
      .payment-alert {
        border-left: 4px solid #dc3545;
        background-color: #f8d7da;
        padding: 10px 15px;
        margin-bottom: 15px;
        border-radius: 4px;
      }
      .payment-pending-alert {
        border-left: 4px solid #ffc107;
        background-color: #fff3cd;
        padding: 10px 15px;
        margin-bottom: 15px;
        border-radius: 4px;
      }
      .spinner-border-sm {
        width: 1rem;
        height: 1rem;
        border-width: 0.2em;
      }
      .main-cards12{
        
      transform: translate(328px, -647px); 
      }
    </style>
  </head>
  <body>
    <%- include("../partials/user/header") %>

    <div class="container my-5 animate__animated animate__fadeIn">
      <div class="row">
        <%- include("../partials/user/profileSidebar") %>

        <div class="col-md-9 main-cards12">
          <div class="card main-content-card animate__animated animate__fadeInUp">
            <div class="card-body p-4">
              <h4 class="card-title mb-4 fw-bold animate__animated animate__fadeInLeft">
                My Orders
              </h4>

              <div class="toast-container position-fixed top-0 end-0 p-3">
                <div
                  id="orderToast"
                  class="toast"
                  role="alert"
                  aria-live="assertive"
                  aria-atomic="true"
                  data-bs-delay="3000"
                >
                  <div class="toast-header">
                    <strong class="me-auto">Order Action</strong>
                    <small>Just now</small>
                    <button
                      type="button"
                      class="btn-close"
                      data-bs-dismiss="toast"
                      aria-label="Close"
                    ></button>
                  </div>
                  <div class="toast-body"></div>
                </div>
              </div>

              <% if (!hasOrders) { %>
              <div class="text-center py-5 animate__animated animate__fadeIn">
                <img
                  src="/Uploads/empty-orders.png"
                  alt="No Orders"
                  class="img-fluid mb-4"
                  style="max-width: 200px"
                />
                <p class="text-muted">
                  You have no orders yet.
                  <a href="/" class="fw-bold">Start shopping!</a>
                </p>
              </div>
              <% } else { %>
                <% orders.forEach((order, index) => { %>
                  <% if (order.order_items && order.order_items.length > 0) { %>
                    <% order.order_items.forEach((item, itemIndex) => { %>
                      <div
                        class="order-card card mb-4 shine-effect animate__animated animate__fadeInUp"
                        style="animation-delay: <%= (index + itemIndex) * 0.1 %>s"
                      >
                        <div class="card-body p-4">
                          <!-- Payment Status Alerts - New Addition -->
                          <% if (order.paymentMethod === 'Online' && order.paymentStatus === 'Failed') { %>
                            <div class="payment-alert mb-3">
                              <i class="bi bi-exclamation-triangle-fill me-2"></i>
                              <strong>Payment Failed:</strong> Your payment for this order was not successful. Please retry payment to complete your order.
                            </div>
                          <% } else if (order.paymentMethod === 'Online' && order.paymentStatus === 'Pending') { %>
                            <div class="payment-pending-alert mb-3">
                              <i class="bi bi-hourglass-split me-2"></i>
                              <strong>Payment Pending:</strong> Your payment is being processed. If it doesn't complete soon, please retry payment.
                            </div>
                          <% } %>
                          
                          <div class="row g-4 align-items-center">
                            <div class="col-lg-2 col-md-3 col-sm-3">
                            <img 
                            src="<%= item.productId && item.productId.images && item.productId.images.length > 0 ? item.productId.images[0].url : (item.itemImage || '/api/placeholder/300/300') %>" 
                            alt="<%= item.productId && item.productId.name ? item.productId.name : (item.product_name || 'Unnamed Product') %>" 
                            class="product-img img-fluid rounded"
                        >
                            </div>
                            <div class="col-lg-7 col-md-6 col-sm-9">
                              <h5 class="card-title fw-bold">
                                <%= item.productId && item.productId.name ? item.productId.name : (item.product_name || 'Unnamed Product') %>
                              </h5>
                              <p class="card-text mb-2 fs-5 fw-semibold">
                                â‚¹<%= item.price ? item.price.toFixed(2) : '0.00' %>
                              </p>
                              <p class="card-text mb-2">
                                Quantity: <%= item.quantity || 1 %> | Size: <%= item.size || 'N/A' %>
                              </p>
                              <p class="card-text mb-0 text-muted">
                                Order Id: <%= order.orderNumber || 'N/A' %>
                              </p>
                              
                              <% if (order.paymentMethod === 'Online' && order.paymentStatus === 'Failed') { %>
                                <span class="payment-failed-badge">
                                  <i class="bi bi-exclamation-triangle-fill me-1"></i>Payment Failed
                                </span>
                              <% } else if (order.paymentMethod === 'Online' && order.paymentStatus === 'Pending') { %>
                                <span class="payment-pending-badge">
                                  <i class="bi bi-hourglass-split me-1"></i>Payment Pending
                                </span>
                              <% } else { %>
                                <div class="order-progress mt-2">
                                  <div class="progress">
                                    <div
                                      class="progress-bar bg-<%= order.status && (order.status.toLowerCase() === 'delivered' || order.status.toLowerCase() === 'returned') ? 'success' : (order.status.toLowerCase() === 'cancelled' || order.status.toLowerCase() === 'return-rejected') ? 'danger' : 'primary' %>"
                                      role="progressbar"
                                      style="width: <%= order.progressWidth || 0 %>%"
                                      aria-valuenow="<%= order.progressWidth || 0 %>"
                                      aria-valuemin="0"
                                      aria-valuemax="100"
                                    ></div>
                                  </div>
                                </div>
                              <% } %>
                              
                              <% if (order.refunded && order.status === 'Returned') { %>
                                <p class="refund-info mt-2">
                                  <i class="bi bi-wallet2 me-1"></i>
                                  Refund of â‚¹<%= order.total ? order.total.toFixed(2) : '0.00' %> credited to wallet
                                </p>
                              <% } %>
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-12 text-lg-end text-md-end text-start mt-sm-3 mt-lg-0">
                              <% if (order.paymentMethod === 'Online' && (order.paymentStatus === 'Failed' || order.paymentStatus === 'Pending')) { %>
                                <p class="<%= order.paymentStatus === 'Failed' ? 'status-payment-failed' : 'status-pending' %> mb-1 fs-6">
                                  <i class="bi bi-<%= order.paymentStatus === 'Failed' ? 'exclamation-circle-fill' : 'hourglass-split' %> me-1"></i>
                                  <%= order.paymentStatus.toUpperCase() %>
                                </p>
                                <p class="mb-3">
                                  <i class="bi bi-calendar me-1"></i>
                                  <%= new Date(order.orderDate).toLocaleString('en-IN', { month: 'long', day: 'numeric', year: 'numeric' }) %>
                                </p>
                                <!-- Retry Payment Button - New Addition -->
                                <button
                                  class="btn btn-sm btn-retry-payment mb-2"
                                  onclick="retryPayment('<%= order._id %>')"
                                  id="retryBtn-<%= order._id %>"
                                >
                                  <i class="bi bi-arrow-repeat me-1"></i>Retry Payment
                                </button>
                              <% } else { %>
                                <p class="status-<%= order.status ? order.status.toLowerCase().replace(/\s+/g, '-') : 'pending' %> mb-1 fs-6">
                                  Status: <%= order.status ? order.status.toUpperCase() : 'PENDING' %>
                                </p>
                                <p class="mb-3">
                                  <% if (order.status === 'Delivered') { %>
                                    <i class="bi bi-check-circle-fill me-1 text-success"></i>
                                    Delivered on <%= order.deliveryDate ? new Date(order.deliveryDate).toLocaleString('en-IN', { month: 'long', day: 'numeric', year: 'numeric' }) : new Date(order.orderDate.getTime() + 7 * 24 * 60 * 60 * 1000).toLocaleString('en-IN', { month: 'long', day: 'numeric', year: 'numeric' }) %>
                                  <% } else if (order.status === 'Processing' || order.status === 'Confirmed' || order.status === 'Shipped') { %>
                                    <i class="bi bi-truck me-1 text-primary"></i>
                                    Expected by <%= new Date(order.orderDate.getTime() + 7 * 24 * 60 * 60 * 1000).toLocaleString('en-IN', { month: 'long', day: 'numeric', year: 'numeric' }) %>
                                  <% } else if (order.status === 'Cancelled') { %>
                                    <i class="bi bi-x-circle-fill me-1 text-danger"></i>
                                    Cancelled
                                  <% } else if (order.status === 'Return Rejected') { %>
                                    <i class="bi bi-x-circle-fill me-1 text-danger"></i>
                                    Return Rejected
                                  <% } else if (order.status === 'Returned') { %>
                                    <i class="bi bi-check-circle-fill me-1 text-success"></i>
                                    Returned
                                  <% } else if (order.status === 'Return Requested' || order.status === 'Return Approved') { %>
                                    <i class="bi bi-arrow-return-left me-1 text-warning"></i>
                                    <%= order.status %>
                                  <% } %>
                                </p>
                                <% if (order.status === 'Delivered' && !order.refunded) { %>
                                  <button
                                    class="btn btn-sm btn-outline-dark action-btn mb-2"
                                    data-bs-toggle="modal"
                                    data-bs-target="#returnModal"
                                    data-order-id="<%= order._id %>"
                                  >
                                    <i class="bi bi-arrow-return-left me-1"></i>Return
                                  </button>
                                  <% if (order.status !== 'Cancelled') { %>
                                    <button
                                      class="btn btn-sm btn-outline-dark action-btn mb-2"
                                      onclick="downloadInvoice('<%= order._id %>')"
                                    >
                                      <i class="bi bi-file-earmark-text me-1"></i>Invoice
                                    </button>
                                  <% } %>
                                <% } else if (order.status === 'Pending' || order.status === 'Processing') { %>
                                  <button
                                    class="btn btn-sm btn-outline-dark action-btn mb-2"
                                    data-bs-toggle="modal"
                                    data-bs-target="#cancelModal"
                                    data-order-id="<%= order._id %>"
                                  >
                                    <i class="bi bi-x-circle me-1"></i>Cancel Order
                                  </button>
                                <% } else if (order.status === 'Cancelled' || order.status === 'Return Rejected') { %>
                                  <button
                                    class="btn btn-sm btn-outline-dark action-btn mb-2"
                                    data-bs-toggle="modal"
                                    data-bs-target="#reorderModal"
                                    data-order-id="<%= order._id %>"
                                  >
                                    <i class="bi bi-arrow-repeat me-1"></i>Re Order
                                  </button>
                                <% } %>
                              <% } %>
                              <button
                                class="btn btn-sm btn-dark action-btn"
                                onclick="viewDetails('<%= order._id %>')"
                              >
                                <i class="bi bi-eye me-1"></i>View Details
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    <% }); %>
                  <% } else { %>
                    <div class="order-card card mb-4 shine-effect animate__animated animate__fadeInUp">
                      <div class="card-body p-4">
                        <!-- Payment Status Alerts for orders without items - New Addition -->
                        <% if (order.paymentMethod === 'Online' && order.paymentStatus === 'Failed') { %>
                          <div class="payment-alert mb-3">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            <strong>Payment Failed:</strong> Your payment for this order was not successful. Please retry payment to complete your order.
                          </div>
                        <% } else if (order.paymentMethod === 'Online' && order.paymentStatus === 'Pending') { %>
                          <div class="payment-pending-alert mb-3">
                            <i class="bi bi-hourglass-split me-2"></i>
                            <strong>Payment Pending:</strong> Your payment is being processed. If it doesn't complete soon, please retry payment.
                          </div>
                        <% } %>
                        
                        <div class="row g-4 align-items-center">
                          <div class="col-lg-2 col-md-3 col-sm-3">
                          <img 
                          src="/api/placeholder/300/300" 
                          alt="Order Image" 
                          class="product-img img-fluid rounded"
                      >
                          </div>
                          <div class="col-lg-7 col-md-6 col-sm-9">
                            <h5 class="card-title fw-bold">
                              Order #<%= order.orderNumber || 'N/A' %>
                            </h5>
                            <p class="card-text mb-2 fs-5 fw-semibold">
                              â‚¹<%= order.total ? order.total.toFixed(2) : '0.00' %>
                            </p>
                            <p class="card-text mb-2">
                              Date: <%= new Date(order.orderDate).toLocaleString('en-IN', { month: 'long', day: 'numeric', year: 'numeric' }) %>
                            </p>
                            
                            <% if (order.paymentMethod === 'Online' && order.paymentStatus === 'Failed') { %>
                              <span class="payment-failed-badge">
                                <i class="bi bi-exclamation-triangle-fill me-1"></i>Payment Failed
                              </span>
                            <% } else if (order.paymentMethod === 'Online' && order.paymentStatus === 'Pending') { %>
                              <span class="payment-pending-badge">
                                <i class="bi bi-hourglass-split me-1"></i>Payment Pending
                              </span>
                            <% } %>
                          </div>
                          <div class="col-lg-3 col-md-3 col-sm-12 text-lg-end text-md-end text-start mt-sm-3 mt-lg-0">
                            <% if (order.paymentMethod === 'Online' && (order.paymentStatus === 'Failed' || order.paymentStatus === 'Pending')) { %>
                              <p class="<%= order.paymentStatus === 'Failed' ? 'status-payment-failed' : 'status-pending' %> mb-1 fs-6">
                                <i class="bi bi-<%= order.paymentStatus === 'Failed' ? 'exclamation-circle-fill' : 'hourglass-split' %> me-1"></i>
                                <%= order.paymentStatus.toUpperCase() %>
                              </p>
                              <!-- Retry Payment Button for orders without items - New Addition -->
                              <button
                                class="btn btn-sm btn-retry-payment mb-2"
                                onclick="retryPayment('<%= order._id %>')"
                                id="retryBtn-<%= order._id %>"
                              >
                                <i class="bi bi-arrow-repeat me-1"></i>Retry Payment
                              </button>
                            <% } %>
                            <button
                              class="btn btn-sm btn-dark action-btn"
                              onclick="viewDetails('<%= order._id %>')"
                            >
                              <i class="bi bi-eye me-1"></i>View Details
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  <% } %>
                <% }); %>
              <% } %>

         
              <% if (hasOrders && totalPages > 1) { 
                let startPage = Math.max(1, currentPage - 1);
                let endPage = Math.min(startPage + 3, totalPages);
            
                // Adjust startPage if we're near the end
                if (endPage - startPage < 3) {
                  startPage = Math.max(1, endPage - 3);
                }
            %>
              <nav aria-label="Order pagination" class="mt-4 animate__animated animate__fadeInUp">
                <ul class="pagination justify-content-center">
                  <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                    <a class="page-link" href="?page=<%= currentPage - 1 %>" aria-label="Previous">
                      <span aria-hidden="true">Â«</span>
                    </a>
                  </li>
            
                  <% if (startPage > 1) { %>
                    <li class="page-item"><a class="page-link" href="?page=1">1</a></li>
                    <% if (startPage > 2) { %>
                      <li class="page-item disabled"><span class="page-link">...</span></li>
                    <% } %>
                  <% } %>
            
                  <% for (let i = startPage; i <= endPage; i++) { %>
                    <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                      <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                    </li>
                  <% } %>
            
                  <% if (endPage < totalPages) { %>
                    <% if (endPage < totalPages - 1) { %>
                      <li class="page-item disabled"><span class="page-link">...</span></li>
                    <% } %>
                    <li class="page-item"><a class="page-link" href="?page=<%= totalPages %>"><%= totalPages %></a></li>
                  <% } %>
            
                  <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                    <a class="page-link" href="?page=<%= currentPage + 1 %>" aria-label="Next">
                      <span aria-hidden="true">Â»</span>
                    </a>
                  </li>
                </ul>
              </nav>
            <% } %>
            
            </div>
          </div>
        </div>
      </div>
    </div>


    <div class="modal fade" id="cancelModal" tabindex="-1" aria-labelledby="cancelModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="cancelModalLabel">Cancel Order</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <p>Are you sure you want to cancel this order?</p>
            <div class="mb-3">
              <label for="cancelReason" class="form-label">Reason for cancellation (optional)</label>
              <textarea class="form-control" id="cancelReason" rows="3" maxlength="500"></textarea>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal">No</button>
            <button type="button" class="btn btn-dark" id="confirmCancelBtn">Yes, cancel</button>
          </div>
        </div>
      </div>
    </div>


    <div class="modal fade" id="returnModal" tabindex="-1" aria-labelledby="returnModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="returnModalLabel">Return Order</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <p>Are you sure you want to initiate a return for this order?</p>
            <div class="mb-3">
              <label for="returnReason" class="form-label">Reason for return (required)</label>
              <textarea class="form-control" id="returnReason" rows="3" maxlength="500" required></textarea>
              <div class="invalid-feedback">Please provide a reason for the return.</div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal">No</button>
            <button type="button" class="btn btn-dark" id="confirmReturnBtn">Yes, return</button>
          </div>
        </div>
      </div>
    </div>

   
    <div class="modal fade" id="reorderModal" tabindex="-1" aria-labelledby="reorderModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="reorderModalLabel">Confirm Reorder</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <p>Do you want to place this order again?</p>
            <p class="text-muted">
              Note: Prices and availability may have changed since your original order.
            </p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal">No</button>
            <button type="button" class="btn btn-dark" id="confirmReorderBtn">Yes, reorder</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Payment Method Modal - New Addition -->
    <div class="modal fade" id="paymentMethodModal" tabindex="-1" aria-labelledby="paymentMethodModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="paymentMethodModalLabel">Select Payment Method</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <p>Please select a payment method to complete your order:</p>
            <div class="form-check mb-3">
              <input class="form-check-input" type="radio" name="paymentMethod" id="walletPayment" value="Wallet" checked>
              <label class="form-check-label d-flex justify-content-between align-items-center" for="walletPayment">
                <span><i class="bi bi-wallet2 me-2"></i>Pay with Wallet</span>
                <span class="badge bg-success">Balance: â‚¹<%= user.walletBalance ? user.walletBalance.toFixed(2) : '0.00' %></span>
              </label>
              <% if (user.walletBalance < 0) { %>
                <div class="text-danger small mt-1">Insufficient balance. Please add money to your wallet.</div>
              <% } %>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="radio" name="paymentMethod" id="razorpayPayment" value="Razorpay">
              <label class="form-check-label" for="razorpayPayment">
                <i class="bi bi-credit-card me-2"></i>Pay Online (Credit/Debit Card, UPI, NetBanking)
              </label>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-primary" id="confirmPaymentMethod">Proceed to Payment</button>
          </div>
        </div>
      </div>
    </div>

    <%- include("../partials/user/footer") %>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
    
      function debounce(func, wait) {
        let timeout;
        return function (...args) {
          clearTimeout(timeout);
          timeout = setTimeout(() => func.apply(this, args), wait);
        };
      }

      document.addEventListener("DOMContentLoaded", function () {
        const cancelModal = document.getElementById("cancelModal");
        cancelModal.addEventListener("show.bs.modal", function (event) {
          const button = event.relatedTarget;
          const orderId = button.getAttribute("data-order-id");
          const confirmBtn = cancelModal.querySelector("#confirmCancelBtn");
          const reasonInput = cancelModal.querySelector("#cancelReason");
          confirmBtn.onclick = debounce(() => cancelOrder(orderId, reasonInput.value.trim()), 1000);
        });

        const returnModal = document.getElementById("returnModal");
        returnModal.addEventListener("show.bs.modal", function (event) {
          const button = event.relatedTarget;
          const orderId = button.getAttribute("data-order-id");
          const confirmBtn = returnModal.querySelector("#confirmReturnBtn");
          const reasonInput = returnModal.querySelector("#returnReason");
          confirmBtn.onclick = debounce(() => {
            if (!reasonInput.value.trim()) {
              reasonInput.classList.add("is-invalid");
              return;
            }
            initiateReturn(orderId, reasonInput.value.trim());
          }, 1000);
          reasonInput.addEventListener("input", () => {
            reasonInput.classList.remove("is-invalid");
          });
        });

        const reorderModal = document.getElementById("reorderModal");
        reorderModal.addEventListener("show.bs.modal", function (event) {
          const button = event.relatedTarget;
          const orderId = button.getAttribute("data-order-id");
          const confirmBtn = reorderModal.querySelector("#confirmReorderBtn");
          confirmBtn.onclick = debounce(() => {
            // For regular reorders (not failed payments)
            fetch(`/reorder/${orderId}`, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
            })
              .then((res) => {
                if (!res.ok) {
                  throw new Error(`HTTP error! Status: ${res.status}`);
                }
                return res.json();
              })
              .then((data) => {
                if (data.success) {
                  showToast("Items added to cart successfully");
                  setTimeout(() => (window.location.href = data.redirect), 1000);
                } else {
                  showToast(data.message || "Failed to reorder", false);
                }
              })
              .catch((err) => {
                console.error("Error in reOrder:", err);
                showToast(`Failed to reorder: ${err.message}`, false);
              });
          }, 1000);
        });
        
        // Payment Method Modal - New Addition
        const paymentMethodModal = document.getElementById("paymentMethodModal");
        if (paymentMethodModal) {
          const confirmPaymentMethodBtn = paymentMethodModal.querySelector("#confirmPaymentMethod");
          confirmPaymentMethodBtn.addEventListener("click", function() {
            const selectedMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
            const orderId = paymentMethodModal.getAttribute("data-order-id");
            completePayment(orderId, selectedMethod);
            bootstrap.Modal.getInstance(paymentMethodModal).hide();
          });
        }
      });

      function showToast(message, isSuccess = true) {
        const toastEl = document.getElementById("orderToast");
        const toastBody = toastEl.querySelector(".toast-body");
        toastBody.innerHTML = `<i class="bi ${
          isSuccess ? "bi-check-circle-fill text-success" : "bi-exclamation-triangle-fill text-danger"
        } me-2"></i>${message}`;
        const toast = new bootstrap.Toast(toastEl);
        toast.show();
      }

      function initiateReturn(orderId, returnReason) {
        fetch(`/return-order/${orderId}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ returnReason }),
        })
          .then((res) => {
            if (!res.ok) {
              throw new Error(`HTTP error! Status: ${res.status}`);
            }
            return res.json();
          })
          .then((data) => {
            if (data.success) {
              showToast("Return initiated successfully. Await admin approval.");
              setTimeout(() => window.location.reload(), 2000);
            } else {
              showToast(data.message, false);
            }
          })
          .catch((err) => {
            console.error("Error in initiateReturn:", err);
            showToast(`Failed to initiate return: ${err.message}`, false);
          });
      }

      function cancelOrder(orderId, cancelReason) {
        fetch(`/cancel-order/${orderId}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ cancelReason }),
        })
          .then((res) => {
            if (!res.ok) {
              throw new Error(`HTTP error! Status: ${res.status}`);
            }
            return res.json();
          })
          .then((data) => {
            if (data.success) {
              showToast("Order cancelled successfully");
              setTimeout(() => window.location.reload(), 2000);
            } else {
              showToast(data.message, false);
            }
          })
          .catch((err) => {
            console.error("Error in cancelOrder:", err);
            showToast(`Failed to cancel order: ${err.message}`, false);
          });
      }

      // Retry Payment Function - New Addition
      function retryPayment(orderId) {
        // Show payment method selection modal
        const paymentMethodModal = document.getElementById("paymentMethodModal");
        paymentMethodModal.setAttribute("data-order-id", orderId);
        const modal = new bootstrap.Modal(paymentMethodModal);
        modal.show();
      }
      
      // Complete Payment Function - New Addition
      function completePayment(orderId, paymentMethod) {
        // Show loading state on button
        const retryBtn = document.getElementById(`retryBtn-${orderId}`);
        if (retryBtn) {
          retryBtn.disabled = true;
          retryBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Processing...';
        }
        
        if (paymentMethod === "Wallet") {
          // Handle wallet payment
          fetch(`/complete-payment/${orderId}`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ paymentMethod: "Wallet" }),
          })
            .then(response => {
              if (!response.ok) {
                throw new Error("Server responded with an error");
              }
              return response.json();
            })
            .then(data => {
              if (data.success) {
                showToast("Payment completed successfully");
                setTimeout(() => window.location.reload(), 1500);
              } else {
                showToast(data.message || "Failed to process payment", false);
                if (retryBtn) {
                  retryBtn.disabled = false;
                  retryBtn.innerHTML = '<i class="bi bi-arrow-repeat me-1"></i>Retry Payment';
                }
              }
            })
            .catch(error => {
              console.error("Error processing payment:", error);
              showToast("An error occurred while processing payment", false);
              if (retryBtn) {
                retryBtn.disabled = false;
                retryBtn.innerHTML = '<i class="bi bi-arrow-repeat me-1"></i>Retry Payment';
              }
            });
        } else if (paymentMethod === "Razorpay") {
          // Handle Razorpay payment
          fetch(`/create-razorpay-order`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ orderId }),
          })
            .then(response => {
              if (!response.ok) {
                throw new Error("Server responded with an error");
              }
              return response.json();
            })
            .then(data => {
              if (data.success) {
                // Initialize Razorpay payment
                const options = {
                  key: data.key,
                  amount: data.order.amount,
                  currency: "INR",
                  name: "ELITE WEAR",
                  description: "Order Payment",
                  order_id: data.order.id,
                  handler: function (response) {
                    // Verify payment
                    fetch("/verify-payment", {
                      method: "POST",
                      headers: { "Content-Type": "application/json" },
                      body: JSON.stringify({
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_signature: response.razorpay_signature,
                      }),
                    })
                      .then(res => res.json())
                      .then(data => {
                        if (data.success) {
                          showToast("Payment successful");
                          setTimeout(() => window.location.href = data.redirect, 1500);
                        } else {
                          showToast(data.message || "Payment verification failed", false);
                          if (retryBtn) {
                            retryBtn.disabled = false;
                            retryBtn.innerHTML = '<i class="bi bi-arrow-repeat me-1"></i>Retry Payment';
                          }
                        }
                      })
                      .catch(error => {
                        console.error("Error verifying payment:", error);
                        showToast("Failed to verify payment", false);
                        if (retryBtn) {
                          retryBtn.disabled = false;
                          retryBtn.innerHTML = '<i class="bi bi-arrow-repeat me-1"></i>Retry Payment';
                        }
                      });
                  },
                  prefill: {
                    name: data.user.name,
                    email: data.user.email,
                    contact: data.user.contact,
                  },
                  theme: {
                    color: "#2c3e50",
                  },
                  modal: {
                    ondismiss: function() {
                      console.log("Payment modal dismissed");
                      if (retryBtn) {
                        retryBtn.disabled = false;
                        retryBtn.innerHTML = '<i class="bi bi-arrow-repeat me-1"></i>Retry Payment';
                      }
                    }
                  }
                };
                const rzp = new Razorpay(options);
                rzp.open();
              } else {
                showToast(data.message || "Failed to initiate payment", false);
                if (retryBtn) {
                  retryBtn.disabled = false;
                  retryBtn.innerHTML = '<i class="bi bi-arrow-repeat me-1"></i>Retry Payment';
                }
              }
            })
            .catch(error => {
              console.error("Error initiating payment:", error);
              showToast("An error occurred while initiating payment", false);
              if (retryBtn) {
                retryBtn.disabled = false;
                retryBtn.innerHTML = '<i class="bi bi-arrow-repeat me-1"></i>Retry Payment';
              }
            });
        }
      }

      function viewDetails(orderId) {
        window.location.href = `/order-details/${orderId}`;
      }

      function downloadInvoice(orderId) {
        window.location.href = `/invoice/${orderId}`;
      }
    </script>
  </body>
</html>