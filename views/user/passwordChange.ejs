<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Elite Wear - Change Password</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600;700&family=Syne:wght@400;500;600;700;800&display=swap" rel="stylesheet">
  <style>
    :root {
      /* Core colors */
      --primary: #0f172a;
      --primary-light: #1e293b;
      --primary-dark: #0a1122;
      --secondary: #f8fafc;
      --secondary-dark: #e2e8f0;
      
      /* Accent colors */
      --accent-blue: #3b82f6;
      --accent-purple: #8b5cf6;
      --accent-pink: #ec4899;
      --accent-teal: #06b6d4;
      --accent-green: #10b981;
      --accent-yellow: #f59e0b;
      --accent-red: #ef4444;
      
      /* Gradients */
      --gradient-blue: linear-gradient(135deg, #3b82f6, #2563eb);
      --gradient-purple: linear-gradient(135deg, #8b5cf6, #7c3aed);
      --gradient-mixed: linear-gradient(135deg, #3b82f6, #8b5cf6);
      --gradient-teal: linear-gradient(135deg, #06b6d4, #0891b2);
      --gradient-green: linear-gradient(135deg, #10b981, #059669);
      --gradient-yellow: linear-gradient(135deg, #f59e0b, #d97706);
      --gradient-red: linear-gradient(135deg, #ef4444, #dc2626);
      --gradient-pink: linear-gradient(135deg, #ec4899, #db2777);
      
      /* Text colors */
      --text-primary: #f8fafc;
      --text-secondary: #cbd5e1;
      --text-tertiary: #94a3b8;
      --text-dark: #0f172a;
      --text-light: #f1f5f9;
      
      /* UI elements */
      --border-color: rgba(255, 255, 255, 0.1);
      --card-bg: rgba(30, 41, 59, 0.8);
      --card-bg-hover: rgba(30, 41, 59, 0.95);
      --card-border: rgba(255, 255, 255, 0.05);
      --input-bg: rgba(15, 23, 42, 0.6);
      --tooltip-bg: rgba(15, 23, 42, 0.9);
      --backdrop-blur: 10px;
      
      /* Shadows */
      --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.2);
      --shadow-md: 0 4px 20px rgba(0, 0, 0, 0.25);
      --shadow-lg: 0 10px 30px rgba(0, 0, 0, 0.3);
      --shadow-xl: 0 20px 50px rgba(0, 0, 0, 0.4);
      --shadow-inner: inset 0 2px 4px rgba(0, 0, 0, 0.1);
      --shadow-glow-blue: 0 0 20px rgba(59, 130, 246, 0.5);
      --shadow-glow-purple: 0 0 20px rgba(139, 92, 246, 0.5);
      --shadow-glow-mixed: 0 0 25px rgba(99, 102, 241, 0.6);
      
      /* Transitions */
      --transition-fast: 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      --transition-normal: 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      --transition-slow: 0.5s cubic-bezier(0.4, 0, 0.2, 1);
      --transition-bounce: 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55);
      
      /* Border radius */
      --radius-sm: 0.375rem;
      --radius-md: 0.5rem;
      --radius-lg: 0.75rem;
      --radius-xl: 1rem;
      --radius-2xl: 1.5rem;
      --radius-full: 9999px;
      
      /* Typography */
      --font-primary: 'Space Grotesk', sans-serif;
      --font-display: 'Syne', sans-serif;
      
      /* Z-index layers */
      --z-negative: -1;
      --z-normal: 1;
      --z-dropdown: 10;
      --z-sticky: 100;
      --z-fixed: 1000;
      --z-modal: 2000;
      --z-popover: 5000;
      --z-tooltip: 9000;
      --z-toast: 9500;
      --z-overlay: 9900;
    }

    /* Light mode overrides */
    [data-theme="light"] {
      --primary: #f8fafc;
      --primary-light: #f1f5f9;
      --primary-dark: #e2e8f0;
      --secondary: #0f172a;
      --secondary-dark: #1e293b;
      
      --text-primary: #0f172a;
      --text-secondary: #334155;
      --text-tertiary: #64748b;
      
      --card-bg: rgba(241, 245, 249, 0.8);
      --card-bg-hover: rgba(241, 245, 249, 0.95);
      --card-border: rgba(0, 0, 0, 0.05);
      --border-color: rgba(0, 0, 0, 0.1);
      --input-bg: rgba(248, 250, 252, 0.6);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    html {
      scroll-behavior: smooth;
      scroll-padding-top: 80px;
    }

    body {
      font-family: var(--font-primary);
      color: var(--text-primary);
      background-color: var(--primary);
      overflow-x: hidden;
      transition: background-color var(--transition-normal), color var(--transition-normal);
      min-height: 100vh;
      line-height: 1.6;
    }

    /* Custom scrollbar */
    ::-webkit-scrollbar {
      width: 6px;
      height: 6px;
    }

    ::-webkit-scrollbar-track {
      background: var(--primary-dark);
    }

    ::-webkit-scrollbar-thumb {
      background: var(--accent-blue);
      border-radius: var(--radius-full);
    }

    ::-webkit-scrollbar-thumb:hover {
      background: var(--accent-purple);
    }

    /* Background elements */
    .bg-gradient {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: var(--z-negative);
      background: radial-gradient(circle at top right, rgba(59, 130, 246, 0.1), transparent 60%),
                  radial-gradient(circle at bottom left, rgba(139, 92, 246, 0.1), transparent 60%);
      pointer-events: none;
    }

    .bg-grid {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: var(--z-negative);
      background-image: 
        linear-gradient(to right, rgba(255, 255, 255, 0.03) 1px, transparent 1px),
        linear-gradient(to bottom, rgba(255, 255, 255, 0.03) 1px, transparent 1px);
      background-size: 30px 30px;
      pointer-events: none;
    }

    /* Floating Elements */
    .floating-element {
      position: absolute;
      border-radius: 50%;
      background: linear-gradient(135deg, rgba(59, 130, 246, 0.3), rgba(139, 92, 246, 0.3));
      filter: blur(30px);
      z-index: -1;
      animation: float 10s ease-in-out infinite alternate;
    }

    .floating-element-1 {
      width: 300px;
      height: 300px;
      top: -150px;
      right: -150px;
      animation-delay: 0s;
    }

    .floating-element-2 {
      width: 200px;
      height: 200px;
      bottom: -100px;
      left: -100px;
      animation-delay: 2s;
      background: linear-gradient(135deg, rgba(139, 92, 246, 0.3), rgba(236, 72, 153, 0.3));
    }

    @keyframes float {
      0% {
        transform: translate(0, 0) scale(1);
      }
      50% {
        transform: translate(30px, 20px) scale(1.05);
      }
      100% {
        transform: translate(-20px, 10px) scale(0.95);
      }
    }

    /* Page Wrapper */
    .page-wrapper {
      padding: 2rem 0;
      min-height: calc(100vh - 150px);
      position: relative;
      z-index: var(--z-normal);
    }

    /* Breadcrumb */
    .breadcrumb-nav {
      margin-bottom: 1.5rem;
    }

    .breadcrumb {
      margin-bottom: 0;
      padding: 0;
      background: transparent;
      transform: translate(13vw, 2vh);

    }

    .breadcrumb-item a {
      color: var(--text-secondary);
      text-decoration: none;
      transition: color var(--transition-fast);
      font-size: 0.875rem;
    }

    .breadcrumb-item a:hover {
      color: var(--accent-blue);
    }

    .breadcrumb-item.active {
      color: var(--text-tertiary);
    }

    .breadcrumb-item + .breadcrumb-item::before {
      color: var(--text-tertiary);
    }

    /* Password Card */
    .password-card {
      background-color: var(--card-bg);
      border-radius: var(--radius-xl);
      box-shadow: var(--shadow-lg);
      padding: 2.5rem;
      backdrop-filter: blur(var(--backdrop-blur));
      -webkit-backdrop-filter: blur(var(--backdrop-blur));
      border: 1px solid var(--card-border);
      position: relative;
      overflow: hidden;
      transition: all var(--transition-normal);
      animation: fadeIn 0.8s ease-out forwards;
    }

    .password-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(135deg, rgba(59, 130, 246, 0.05), rgba(139, 92, 246, 0.05));
      z-index: -1;
    }

    .password-card h4 {
      font-family: var(--font-display);
      font-size: 1.75rem;
      font-weight: 700;
      margin-bottom: 1rem;
      background: var(--gradient-mixed);
      -webkit-background-clip: text;
      background-clip: text;
      -webkit-text-fill-color: transparent;
      text-fill-color: transparent;
      display: inline-block;
      letter-spacing: -0.02em;
    }

    .password-card .text-muted {
      color: var(--text-secondary) !important;
      font-size: 1rem;
      margin-bottom: 2rem;
    }

    /* Form Elements */
    .form-label {
      color: var(--text-secondary);
      font-weight: 500;
      margin-bottom: 0.5rem;
      font-size: 0.95rem;
    }

    .password-wrapper {
      position: relative;
    }

    .form-control {
      background-color: var(--input-bg) !important;
      border: 1px solid var(--border-color);
      border-radius: var(--radius-lg);
      padding: 0.75rem 1rem;
      color: var(--text-primary) !important;
      font-size: 1rem;
      transition: all var(--transition-normal);
      backdrop-filter: blur(var(--backdrop-blur));
      -webkit-backdrop-filter: blur(var(--backdrop-blur));
      height: auto;
    }

    .form-control:focus {
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
      border-color: var(--accent-blue);
      outline: none;
    }

    .form-control::placeholder {
      color: var(--text-tertiary);
    }

    .toggle-password {
      position: absolute;
      right: 1rem;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: color var(--transition-fast);
      z-index: 2;
    }

    .toggle-password:hover {
      color: var(--accent-blue);
    }

    .error-message {
      color: var(--accent-red);
      font-size: 0.85rem;
      margin-top: 0.5rem;
      min-height: 1.25rem;
      transition: all var(--transition-normal);
    }

    /* Password Strength Meter */
    .password-strength {
      margin-top: 0.5rem;
      height: 4px;
      background-color: var(--border-color);
      border-radius: var(--radius-full);
      overflow: hidden;
      position: relative;
    }

    .password-strength-meter {
      height: 100%;
      width: 0;
      transition: width var(--transition-normal), background-color var(--transition-normal);
    }

    .strength-text {
      font-size: 0.75rem;
      margin-top: 0.25rem;
      text-align: right;
      transition: color var(--transition-normal);
    }

    /* Strength levels */
    .strength-weak .password-strength-meter {
      width: 25%;
      background-color: var(--accent-red);
    }

    .strength-fair .password-strength-meter {
      width: 50%;
      background-color: var(--accent-yellow);
    }

    .strength-good .password-strength-meter {
      width: 75%;
      background-color: var(--accent-blue);
    }

    .strength-strong .password-strength-meter {
      width: 100%;
      background-color: var(--accent-green);
    }

    .strength-weak .strength-text {
      color: var(--accent-red);
    }

    .strength-fair .strength-text {
      color: var(--accent-yellow);
    }

    .strength-good .strength-text {
      color: var(--accent-blue);
    }

    .strength-strong .strength-text {
      color: var(--accent-green);
    }

    /* Button */
    .update-btn {
      background: var(--gradient-mixed) !important;
      color: white !important;
      border: none !important;
      border-radius: var(--radius-lg) !important;
      padding: 0.75rem 2rem !important;
      font-size: 1rem !important;
      font-weight: 500 !important;
      cursor: pointer;
      transition: all var(--transition-normal) !important;
      position: relative;
      overflow: hidden;
      box-shadow: var(--shadow-md) !important;
    }

    .update-btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(to right, transparent, rgba(255, 255, 255, 0.1), transparent);
      transform: translateX(-100%);
      transition: transform 0.8s;
    }

    .update-btn:hover {
      transform: translateY(-3px) !important;
      box-shadow: var(--shadow-glow-mixed) !important;
    }

    .update-btn:hover::before {
      transform: translateX(100%);
    }

    .update-btn:active {
      transform: translateY(-1px) !important;
    }

    /* Alert Messages */
    .alert {
      border-radius: var(--radius-lg);
      padding: 1rem;
      margin-bottom: 1.5rem;
      border: none;
      backdrop-filter: blur(var(--backdrop-blur));
      -webkit-backdrop-filter: blur(var(--backdrop-blur));
      animation: fadeIn 0.5s ease-out forwards;
    }

    .alert-success {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--accent-green);
      border: 1px solid rgba(16, 185, 129, 0.2);
    }

    .alert-danger {
      background-color: rgba(239, 68, 68, 0.1);
      color: var(--accent-red);
      border: 1px solid rgba(239, 68, 68, 0.2);
    }

    /* Theme Toggle */
    .theme-toggle {
      position: fixed;
      bottom: 2rem;
      left: 2rem;
      z-index: var(--z-fixed);
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background: var(--gradient-mixed);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 1.25rem;
      cursor: pointer;
      box-shadow: var(--shadow-md);
      transition: all var(--transition-normal);
      border: none;
    }

    .theme-toggle:hover {
      transform: translateY(-3px) rotate(15deg);
      box-shadow: var(--shadow-glow-mixed);
    }

    .theme-toggle:active {
      transform: translateY(-1px);
    }

    /* Toast Notification */
    .toast-container {
      position: fixed;
      bottom: 2rem;
      right: 2rem;
      z-index: var(--z-toast);
    }

    .toast {
      background-color: var(--card-bg);
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-lg);
      overflow: hidden;
      backdrop-filter: blur(var(--backdrop-blur));
      -webkit-backdrop-filter: blur(var(--backdrop-blur));
      border: 1px solid var(--card-border);
      width: 350px;
      max-width: calc(100vw - 2rem);
      transform: translateX(100%);
      opacity: 0;
      transition: all 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55);
    }

    .toast.show {
      transform: translateX(0);
      opacity: 1;
    }

    .toast-content {
      display: flex;
      align-items: center;
      gap: 1rem;
      padding: 1.25rem;
    }

    .toast-icon {
      font-size: 1.5rem;
    }

    .toast-icon.success {
      color: var(--accent-green);
    }

    .toast-icon.error {
      color: var(--accent-red);
    }

    .toast-icon.info {
      color: var(--accent-blue);
    }

    .toast-message {
      flex: 1;
      color: var(--text-primary);
      font-size: 0.95rem;
    }

    .toast-progress {
      height: 3px;
      background: var(--gradient-mixed);
      width: 100%;
      transform-origin: left;
    }

    /* Animations */
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes scaleIn {
      from {
        opacity: 0;
        transform: scale(0.9);
      }
      to {
        opacity: 1;
        transform: scale(1);
      }
    }

    /* Ripple Effect */
    .ripple {
      position: absolute;
      border-radius: 50%;
      transform: scale(0);
      animation: ripple 0.6s linear;
      background-color: rgba(255, 255, 255, 0.3);
    }

    @keyframes ripple {
      to {
        transform: scale(2.5);
        opacity: 0;
      }
    }

    /* Password Requirements */
    .password-requirements {
      margin-top: 0.75rem;
      padding: 0.75rem 1rem;
      background-color: var(--input-bg);
      border-radius: var(--radius-md);
      border: 1px solid var(--border-color);
      font-size: 0.85rem;
    }

    .requirement-list {
      list-style: none;
      padding: 0;
      margin: 0.5rem 0 0;
    }

    .requirement-item {
      display: flex;
      align-items: center;
      margin-bottom: 0.35rem;
      color: var(--text-tertiary);
      transition: color var(--transition-normal);
    }

    .requirement-item i {
      margin-right: 0.5rem;
      font-size: 0.75rem;
      width: 16px;
      text-align: center;
    }

    .requirement-item.valid {
      color: var(--accent-green);
    }

    .requirement-item.invalid {
      color: var(--accent-red);
    }

    /* Responsive Adjustments */
    @media (max-width: 991.98px) {
      .password-card {
        padding: 2rem;
      }
    }

    @media (max-width: 767.98px) {
      .page-wrapper {
        padding: 1.5rem 0;
      }

      .password-card {
        padding: 1.5rem;
      }

      .password-card h4 {
        font-size: 1.5rem;
      }
    }

    @media (max-width: 575.98px) {
      .password-card {
        padding: 1.25rem;
      }

      .toast-container {
        right: 1rem;
        bottom: 1rem;
        left: 1rem;
        width: auto;
      }

      .toast {
        width: 100%;
      }

      .theme-toggle {
        bottom: 1.5rem;
        left: 1.5rem;
        width: 45px;
        height: 45px;
        font-size: 1.125rem;
      }
    }
  </style>
</head>
<body>
  <%- include("../partials/user/header") %>
  
  <!-- Background Elements -->
  <div class="bg-gradient"></div>
  <div class="bg-grid"></div>
  <div class="floating-element floating-element-1"></div>
  <div class="floating-element floating-element-2"></div>
  
  <div class="page-wrapper">
    <div class="container">
      <div class="breadcrumb-nav">
        <nav aria-label="breadcrumb">
          <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/"><i class="fas fa-home"></i></a></li>
            <li class="breadcrumb-item"><a href="/LoadProfile">My Account</a></li>
            <li class="breadcrumb-item active" aria-current="page">Change Password</li>
          </ol>
        </nav>
      </div>

      <div class="row g-4">
        <!-- Sidebar Column -->
        <div class="col-lg-3 col-md-4">
          <%- include("../partials/user/profileSidebar") %>
        </div>
        
        <!-- Main Content Column -->
        <div class="col-lg-9 col-md-8">
          <div class="password-card">
            <h4 class="text-center"><i class="fas fa-lock me-2"></i>Change Password</h4>
            <p class="text-center text-muted">
              <i class="fas fa-envelope me-1"></i> <%= user?.email || "Your Email" %>
            </p>

            <% if (error) { %>
            <div class="alert alert-danger text-center">
              <i class="fas fa-exclamation-circle me-2"></i><%= error %>
            </div>
            <% } %> 
            
            <% if (success) { %>
            <div class="alert alert-success text-center">
              <i class="fas fa-check-circle me-2"></i><%= success %>
            </div>
            <% } %>

            <form id="passwordForm" method="POST" action="/updatePassword" novalidate>
              <div class="mb-3">
                <label class="form-label" for="currentPassword">Current Password</label>
                <div class="password-wrapper">
                  <input
                    type="password"
                    name="currentPassword"
                    id="currentPassword"
                    class="form-control"
                    placeholder="Enter your current password"
                    required
                  />
                  <i
                    class="fas fa-eye toggle-password"
                    onclick="togglePassword('currentPassword', this)"
                    aria-hidden="true"
                  ></i>
                </div>
                <div id="currentPasswordError" class="error-message"></div>
              </div>

              <div class="mb-3">
                <label class="form-label" for="newPassword">New Password</label>
                <div class="password-wrapper">
                  <input
                    type="password"
                    name="newPassword"
                    id="newPassword"
                    class="form-control"
                    placeholder="Enter your new password"
                    required
                  />
                  <i
                    class="fas fa-eye toggle-password"
                    onclick="togglePassword('newPassword', this)"
                    aria-hidden="true"
                  ></i>
                </div>
                <div id="newPasswordError" class="error-message"></div>
                
                <!-- Password Strength Meter -->
                <div class="password-strength">
                  <div class="password-strength-meter"></div>
                </div>
                <div class="strength-text"></div>
                
                <!-- Password Requirements -->
                <div class="password-requirements">
                  <div>Password Requirements:</div>
                  <ul class="requirement-list">
                    <li class="requirement-item" id="req-length">
                      <i class="fas fa-circle"></i> At least 8 characters
                    </li>
                    <li class="requirement-item" id="req-uppercase">
                      <i class="fas fa-circle"></i> At least one uppercase letter
                    </li>
                    <li class="requirement-item" id="req-lowercase">
                      <i class="fas fa-circle"></i> At least one lowercase letter
                    </li>
                    <li class="requirement-item" id="req-number">
                      <i class="fas fa-circle"></i> At least one number
                    </li>
                    <li class="requirement-item" id="req-special">
                      <i class="fas fa-circle"></i> At least one special character
                    </li>
                    <li class="requirement-item" id="req-nospace">
                      <i class="fas fa-circle"></i> No spaces
                    </li>
                  </ul>
                </div>
              </div>

              <div class="mb-4">
                <label class="form-label" for="confirmPassword">Confirm New Password</label>
                <div class="password-wrapper">
                  <input
                    type="password"
                    name="confirmPassword"
                    id="confirmPassword"
                    class="form-control"
                    placeholder="Confirm your new password"
                    required
                  />
                  <i
                    class="fas fa-eye toggle-password"
                    onclick="togglePassword('confirmPassword', this)"
                    aria-hidden="true"
                  ></i>
                </div>
                <div id="confirmPasswordError" class="error-message"></div>
              </div>

              <div class="text-center">
                <button type="submit" class="update-btn">
                  <i class="fas fa-key me-2"></i> Update Password
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Theme Toggle Button -->
  <button class="theme-toggle" id="themeToggle">
    <i class="fas fa-moon" id="themeIcon"></i>
  </button>

  <!-- Toast Notification -->
  <div class="toast-container">
    <div id="toast" class="toast">
      <div class="toast-content">
        <i class="fas fa-check-circle toast-icon success"></i>
        <div class="toast-message"></div>
      </div>
      <div class="toast-progress"></div>
    </div>
  </div>

  

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Theme Toggle
      const themeToggle = document.getElementById('themeToggle');
      const themeIcon = document.getElementById('themeIcon');
      
      // Check for saved theme preference or use system preference
      const savedTheme = localStorage.getItem('theme') || 
        (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
      
      // Apply the theme
      document.body.setAttribute('data-theme', savedTheme);
      updateThemeIcon(savedTheme);
      
      // Theme toggle click handler
      themeToggle.addEventListener('click', function(e) {
        createRipple(e, this);
        
        const currentTheme = document.body.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        // Apply transition class for smooth theme change
        document.body.classList.add('theme-transition');
        
        // Update theme
        document.body.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        updateThemeIcon(newTheme);
        
        // Show theme change toast
        showToast(
          `${newTheme === 'dark' ? 'Dark' : 'Light'} Mode Activated`, 
          'info'
        );
        
        // Remove transition class
        setTimeout(() => {
          document.body.classList.remove('theme-transition');
        }, 500);
      });
      
      function updateThemeIcon(theme) {
        if (theme === 'dark') {
          themeIcon.className = 'fas fa-moon';
        } else {
          themeIcon.className = 'fas fa-sun';
        }
      }
      
      // Ripple effect for buttons
      function createRipple(event, button) {
        const circle = document.createElement('span');
        const diameter = Math.max(button.clientWidth, button.clientHeight);
        const radius = diameter / 2;
        
        circle.style.width = circle.style.height = `${diameter}px`;
        circle.style.left = `${event.clientX - button.getBoundingClientRect().left - radius}px`;
        circle.style.top = `${event.clientY - button.getBoundingClientRect().top - radius}px`;
        circle.classList.add('ripple');
        
        const ripple = button.querySelector('.ripple');
        if (ripple) {
          ripple.remove();
        }
        
        button.appendChild(circle);
      }
      
      // Add ripple effect to all buttons
      const buttons = document.querySelectorAll('button:not([disabled])');
      buttons.forEach(button => {
        button.addEventListener('click', function(e) {
          if (!this.classList.contains('disabled') && !this.hasAttribute('disabled')) {
            createRipple(e, this);
          }
        });
      });
      
      // Initialize toast
      const toast = document.getElementById('toast');
      const toastMessage = document.querySelector('.toast-message');
      const toastProgress = document.querySelector('.toast-progress');
      
      // Show toast notification
      function showToast(message, type = 'success') {
        // Set message
        toastMessage.textContent = message;
        
        // Set icon based on type
        const toastIcon = document.querySelector('.toast-icon');
        if (type === 'success') {
          toastIcon.className = 'fas fa-check-circle toast-icon success';
        } else if (type === 'error') {
          toastIcon.className = 'fas fa-exclamation-circle toast-icon error';
        } else if (type === 'info') {
          toastIcon.className = 'fas fa-info-circle toast-icon info';
        }
        
        // Show toast
        toast.classList.add('show');
        
        // Reset and start progress bar
        toastProgress.style.transition = 'none';
        toastProgress.style.width = '100%';
        
        // Force reflow to restart animation
        void toastProgress.offsetWidth;
        
        // Start animation
        toastProgress.style.transition = 'width 3s linear';
        toastProgress.style.width = '0%';
        
        // Hide toast after animation
        setTimeout(() => {
          toast.classList.remove('show');
        }, 3000);
      }
      
      // Make showToast available globally
      window.showToast = showToast;
      
      // Toggle password visibility
      window.togglePassword = function(inputId, icon) {
        const input = document.getElementById(inputId);
        if (input.type === "password") {
          input.type = "text";
          icon.classList.remove("fa-eye");
          icon.classList.add("fa-eye-slash");
        } else {
          input.type = "password";
          icon.classList.remove("fa-eye-slash");
          icon.classList.add("fa-eye");
        }
      };
      
      // Password strength checker
      const newPassword = document.getElementById('newPassword');
      const strengthMeter = document.querySelector('.password-strength-meter');
      const strengthText = document.querySelector('.strength-text');
      const passwordStrength = document.querySelector('.password-strength');
      
      // Password requirement elements
      const reqLength = document.getElementById('req-length');
      const reqUppercase = document.getElementById('req-uppercase');
      const reqLowercase = document.getElementById('req-lowercase');
      const reqNumber = document.getElementById('req-number');
      const reqSpecial = document.getElementById('req-special');
      const reqNoSpace = document.getElementById('req-nospace');
      
      newPassword.addEventListener('input', function() {
        const value = this.value;
        
        // Check individual requirements
        const hasLength = value.length >= 8;
        const hasUppercase = /[A-Z]/.test(value);
        const hasLowercase = /[a-z]/.test(value);
        const hasNumber = /[0-9]/.test(value);
        const hasSpecial = /[^A-Za-z0-9\s]/.test(value);
        const hasNoSpace = !/\s/.test(value);
        
        // Update requirement indicators
        updateRequirement(reqLength, hasLength);
        updateRequirement(reqUppercase, hasUppercase);
        updateRequirement(reqLowercase, hasLowercase);
        updateRequirement(reqNumber, hasNumber);
        updateRequirement(reqSpecial, hasSpecial);
        updateRequirement(reqNoSpace, hasNoSpace);
        
        // Calculate strength
        let strength = 0;
        if (hasLength) strength += 1;
        if (hasUppercase) strength += 1;
        if (hasLowercase) strength += 1;
        if (hasNumber) strength += 1;
        if (hasSpecial) strength += 1;
        if (hasNoSpace) strength += 1;
        
        // Update strength meter
        passwordStrength.className = 'password-strength';
        
        if (value === '') {
          strengthMeter.style.width = '0';
          strengthText.textContent = '';
        } else if (strength <= 2) {
          passwordStrength.classList.add('strength-weak');
          strengthMeter.style.width = '25%';
          strengthText.textContent = 'Weak';
        } else if (strength <= 4) {
          passwordStrength.classList.add('strength-fair');
          strengthMeter.style.width = '50%';
          strengthText.textContent = 'Fair';
        } else if (strength <= 5) {
          passwordStrength.classList.add('strength-good');
          strengthMeter.style.width = '75%';
          strengthText.textContent = 'Good';
        } else {
          passwordStrength.classList.add('strength-strong');
          strengthMeter.style.width = '100%';
          strengthText.textContent = 'Strong';
        }
      });
      
      function updateRequirement(element, isValid) {
        element.classList.remove('valid', 'invalid');
        
        if (newPassword.value === '') {
          element.querySelector('i').className = 'fas fa-circle';
        } else {
          element.classList.add(isValid ? 'valid' : 'invalid');
          element.querySelector('i').className = isValid ? 'fas fa-check-circle' : 'fas fa-times-circle';
        }
      }
      
      // Form validation
      const passwordForm = document.getElementById('passwordForm');
      const currentPassword = document.getElementById('currentPassword');
      const confirmPassword = document.getElementById('confirmPassword');
      const currentPasswordError = document.getElementById('currentPasswordError');
      const newPasswordError = document.getElementById('newPasswordError');
      const confirmPasswordError = document.getElementById('confirmPasswordError');
      
      passwordForm.addEventListener('submit', function(e) {
        let isValid = true;
        
        // Clear previous errors
        currentPasswordError.textContent = '';
        newPasswordError.textContent = '';
        confirmPasswordError.textContent = '';
        
        // Validate current password
        if (currentPassword.value.trim() === '') {
          currentPasswordError.textContent = 'Current password is required';
          isValid = false;
          shakeElement(currentPassword);
        }
        
        // Validate new password
        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z\d\s])([^\s]){8,}$/;
        if (!passwordRegex.test(newPassword.value)) {
          newPasswordError.textContent = 'Password must meet all requirements';
          isValid = false;
          shakeElement(newPassword);
        }
        
        // Validate confirm password
        if (newPassword.value !== confirmPassword.value) {
          confirmPasswordError.textContent = 'Passwords do not match';
          isValid = false;
          shakeElement(confirmPassword);
        }
        
        if (!isValid) {
          e.preventDefault();
          showToast('Please fix the errors in the form', 'error');
        } else {
          // Form is valid, add loading state to button
          const submitBtn = document.querySelector('.update-btn');
          submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i> Updating...';
          submitBtn.disabled = true;
        }
      });
      
      function shakeElement(element) {
        element.classList.add('shake');
        setTimeout(() => {
          element.classList.remove('shake');
        }, 600);
      }
      
      // Add shake animation
      const style = document.createElement('style');
      style.textContent = `
        @keyframes shake {
          0%, 100% { transform: translateX(0); }
          10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
          20%, 40%, 60%, 80% { transform: translateX(5px); }
        }
        .shake {
          animation: shake 0.6s cubic-bezier(.36,.07,.19,.97) both;
        }
      `;
      document.head.appendChild(style);
      
      // Show welcome toast on page load
      setTimeout(() => {
        showToast('Update your password securely', 'info');
      }, 500);
    });
  </script>
</body>
</html>
