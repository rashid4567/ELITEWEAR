<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Elite Wear - Change Password</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600;700&family=Syne:wght@400;500;600;700;800&display=swap" rel="stylesheet">
 <link rel="stylesheet" href="/userStyle/passwordUpdate.css">
</head>
<body>
  <%- include("../partials/user/header") %>
  
  <!-- Background Elements -->
  <div class="bg-gradient"></div>
  <div class="bg-grid"></div>
  <div class="floating-element floating-element-1"></div>
  <div class="floating-element floating-element-2"></div>
  
  <div class="page-wrapper">
    <div class="container">
      <div class="breadcrumb-nav">
        <nav aria-label="breadcrumb">
          <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/"><i class="fas fa-home"></i></a></li>
            <li class="breadcrumb-item"><a href="/LoadProfile">My Account</a></li>
            <li class="breadcrumb-item active" aria-current="page">Change Password</li>
          </ol>
        </nav>
      </div>

      <div class="row g-4">
        <!-- Sidebar Column -->
        <div class="col-lg-3 col-md-4">
          <%- include("../partials/user/profileSidebar") %>
        </div>
        
        <!-- Main Content Column -->
        <div class="col-lg-9 col-md-8">
          <div class="password-card">
            <h4 class="text-center"><i class="fas fa-lock me-2"></i>Change Password</h4>
            <p class="text-center text-muted">
              <i class="fas fa-envelope me-1"></i> <%= user?.email || "Your Email" %>
            </p>

            <% if (error) { %>
            <div class="alert alert-danger text-center">
              <i class="fas fa-exclamation-circle me-2"></i><%= error %>
            </div>
            <% } %> 
            
            <% if (success) { %>
            <div class="alert alert-success text-center">
              <i class="fas fa-check-circle me-2"></i><%= success %>
            </div>
            <% } %>

            <form id="passwordForm" method="POST" action="/updatePassword" novalidate>
              <div class="mb-3">
                <label class="form-label" for="currentPassword">Current Password</label>
                <div class="password-wrapper">
                  <input
                    type="password"
                    name="currentPassword"
                    id="currentPassword"
                    class="form-control"
                    placeholder="Enter your current password"
                    required
                  />
                  <i
                    class="fas fa-eye toggle-password"
                    onclick="togglePassword('currentPassword', this)"
                    aria-hidden="true"
                  ></i>
                </div>
                <div id="currentPasswordError" class="error-message"></div>
              </div>

              <div class="mb-3">
                <label class="form-label" for="newPassword">New Password</label>
                <div class="password-wrapper">
                  <input
                    type="password"
                    name="newPassword"
                    id="newPassword"
                    class="form-control"
                    placeholder="Enter your new password"
                    required
                  />
                  <i
                    class="fas fa-eye toggle-password"
                    onclick="togglePassword('newPassword', this)"
                    aria-hidden="true"
                  ></i>
                </div>
                <div id="newPasswordError" class="error-message"></div>
                
                <!-- Password Strength Meter -->
                <div class="password-strength">
                  <div class="password-strength-meter"></div>
                </div>
                <div class="strength-text"></div>
                
                <!-- Password Requirements -->
                <div class="password-requirements">
                  <div>Password Requirements:</div>
                  <ul class="requirement-list">
                    <li class="requirement-item" id="req-length">
                      <i class="fas fa-circle"></i> At least 8 characters
                    </li>
                    <li class="requirement-item" id="req-uppercase">
                      <i class="fas fa-circle"></i> At least one uppercase letter
                    </li>
                    <li class="requirement-item" id="req-lowercase">
                      <i class="fas fa-circle"></i> At least one lowercase letter
                    </li>
                    <li class="requirement-item" id="req-number">
                      <i class="fas fa-circle"></i> At least one number
                    </li>
                    <li class="requirement-item" id="req-special">
                      <i class="fas fa-circle"></i> At least one special character
                    </li>
                    <li class="requirement-item" id="req-nospace">
                      <i class="fas fa-circle"></i> No spaces
                    </li>
                  </ul>
                </div>
              </div>

              <div class="mb-4">
                <label class="form-label" for="confirmPassword">Confirm New Password</label>
                <div class="password-wrapper">
                  <input
                    type="password"
                    name="confirmPassword"
                    id="confirmPassword"
                    class="form-control"
                    placeholder="Confirm your new password"
                    required
                  />
                  <i
                    class="fas fa-eye toggle-password"
                    onclick="togglePassword('confirmPassword', this)"
                    aria-hidden="true"
                  ></i>
                </div>
                <div id="confirmPasswordError" class="error-message"></div>
              </div>

              <div class="text-center">
                <button type="submit" class="update-btn">
                  <i class="fas fa-key me-2"></i> Update Password
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Theme Toggle Button -->
  <button class="theme-toggle" id="themeToggle">
    <i class="fas fa-moon" id="themeIcon"></i>
  </button>

  <!-- Toast Notification -->
  <div class="toast-container">
    <div id="toast" class="toast">
      <div class="toast-content">
        <i class="fas fa-check-circle toast-icon success"></i>
        <div class="toast-message"></div>
      </div>
      <div class="toast-progress"></div>
    </div>
  </div>

  

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Theme Toggle
      const themeToggle = document.getElementById('themeToggle');
      const themeIcon = document.getElementById('themeIcon');
      
      // Check for saved theme preference or use system preference
      const savedTheme = localStorage.getItem('theme') || 
        (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
      
      // Apply the theme
      document.body.setAttribute('data-theme', savedTheme);
      updateThemeIcon(savedTheme);
      
      // Theme toggle click handler
      themeToggle.addEventListener('click', function(e) {
        createRipple(e, this);
        
        const currentTheme = document.body.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        // Apply transition class for smooth theme change
        document.body.classList.add('theme-transition');
        
        // Update theme
        document.body.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        updateThemeIcon(newTheme);
        
        // Show theme change toast
        showToast(
          `${newTheme === 'dark' ? 'Dark' : 'Light'} Mode Activated`, 
          'info'
        );
        
        // Remove transition class
        setTimeout(() => {
          document.body.classList.remove('theme-transition');
        }, 500);
      });
      
      function updateThemeIcon(theme) {
        if (theme === 'dark') {
          themeIcon.className = 'fas fa-moon';
        } else {
          themeIcon.className = 'fas fa-sun';
        }
      }
      
      // Ripple effect for buttons
      function createRipple(event, button) {
        const circle = document.createElement('span');
        const diameter = Math.max(button.clientWidth, button.clientHeight);
        const radius = diameter / 2;
        
        circle.style.width = circle.style.height = `${diameter}px`;
        circle.style.left = `${event.clientX - button.getBoundingClientRect().left - radius}px`;
        circle.style.top = `${event.clientY - button.getBoundingClientRect().top - radius}px`;
        circle.classList.add('ripple');
        
        const ripple = button.querySelector('.ripple');
        if (ripple) {
          ripple.remove();
        }
        
        button.appendChild(circle);
      }
      
      // Add ripple effect to all buttons
      const buttons = document.querySelectorAll('button:not([disabled])');
      buttons.forEach(button => {
        button.addEventListener('click', function(e) {
          if (!this.classList.contains('disabled') && !this.hasAttribute('disabled')) {
            createRipple(e, this);
          }
        });
      });
      
      // Initialize toast
      const toast = document.getElementById('toast');
      const toastMessage = document.querySelector('.toast-message');
      const toastProgress = document.querySelector('.toast-progress');
      
      // Show toast notification
      function showToast(message, type = 'success') {
        // Set message
        toastMessage.textContent = message;
        
        // Set icon based on type
        const toastIcon = document.querySelector('.toast-icon');
        if (type === 'success') {
          toastIcon.className = 'fas fa-check-circle toast-icon success';
        } else if (type === 'error') {
          toastIcon.className = 'fas fa-exclamation-circle toast-icon error';
        } else if (type === 'info') {
          toastIcon.className = 'fas fa-info-circle toast-icon info';
        }
        
        // Show toast
        toast.classList.add('show');
        
        // Reset and start progress bar
        toastProgress.style.transition = 'none';
        toastProgress.style.width = '100%';
        
        // Force reflow to restart animation
        void toastProgress.offsetWidth;
        
        // Start animation
        toastProgress.style.transition = 'width 3s linear';
        toastProgress.style.width = '0%';
        
        // Hide toast after animation
        setTimeout(() => {
          toast.classList.remove('show');
        }, 3000);
      }
      
      // Make showToast available globally
      window.showToast = showToast;
      
      // Toggle password visibility
      window.togglePassword = function(inputId, icon) {
        const input = document.getElementById(inputId);
        if (input.type === "password") {
          input.type = "text";
          icon.classList.remove("fa-eye");
          icon.classList.add("fa-eye-slash");
        } else {
          input.type = "password";
          icon.classList.remove("fa-eye-slash");
          icon.classList.add("fa-eye");
        }
      };
      
      // Password strength checker
      const newPassword = document.getElementById('newPassword');
      const strengthMeter = document.querySelector('.password-strength-meter');
      const strengthText = document.querySelector('.strength-text');
      const passwordStrength = document.querySelector('.password-strength');
      
      // Password requirement elements
      const reqLength = document.getElementById('req-length');
      const reqUppercase = document.getElementById('req-uppercase');
      const reqLowercase = document.getElementById('req-lowercase');
      const reqNumber = document.getElementById('req-number');
      const reqSpecial = document.getElementById('req-special');
      const reqNoSpace = document.getElementById('req-nospace');
      
      newPassword.addEventListener('input', function() {
        const value = this.value;
        
        // Check individual requirements
        const hasLength = value.length >= 8;
        const hasUppercase = /[A-Z]/.test(value);
        const hasLowercase = /[a-z]/.test(value);
        const hasNumber = /[0-9]/.test(value);
        const hasSpecial = /[^A-Za-z0-9\s]/.test(value);
        const hasNoSpace = !/\s/.test(value);
        
        // Update requirement indicators
        updateRequirement(reqLength, hasLength);
        updateRequirement(reqUppercase, hasUppercase);
        updateRequirement(reqLowercase, hasLowercase);
        updateRequirement(reqNumber, hasNumber);
        updateRequirement(reqSpecial, hasSpecial);
        updateRequirement(reqNoSpace, hasNoSpace);
        
        // Calculate strength
        let strength = 0;
        if (hasLength) strength += 1;
        if (hasUppercase) strength += 1;
        if (hasLowercase) strength += 1;
        if (hasNumber) strength += 1;
        if (hasSpecial) strength += 1;
        if (hasNoSpace) strength += 1;
        
        // Update strength meter
        passwordStrength.className = 'password-strength';
        
        if (value === '') {
          strengthMeter.style.width = '0';
          strengthText.textContent = '';
        } else if (strength <= 2) {
          passwordStrength.classList.add('strength-weak');
          strengthMeter.style.width = '25%';
          strengthText.textContent = 'Weak';
        } else if (strength <= 4) {
          passwordStrength.classList.add('strength-fair');
          strengthMeter.style.width = '50%';
          strengthText.textContent = 'Fair';
        } else if (strength <= 5) {
          passwordStrength.classList.add('strength-good');
          strengthMeter.style.width = '75%';
          strengthText.textContent = 'Good';
        } else {
          passwordStrength.classList.add('strength-strong');
          strengthMeter.style.width = '100%';
          strengthText.textContent = 'Strong';
        }
      });
      
      function updateRequirement(element, isValid) {
        element.classList.remove('valid', 'invalid');
        
        if (newPassword.value === '') {
          element.querySelector('i').className = 'fas fa-circle';
        } else {
          element.classList.add(isValid ? 'valid' : 'invalid');
          element.querySelector('i').className = isValid ? 'fas fa-check-circle' : 'fas fa-times-circle';
        }
      }
      
      // Form validation
      const passwordForm = document.getElementById('passwordForm');
      const currentPassword = document.getElementById('currentPassword');
      const confirmPassword = document.getElementById('confirmPassword');
      const currentPasswordError = document.getElementById('currentPasswordError');
      const newPasswordError = document.getElementById('newPasswordError');
      const confirmPasswordError = document.getElementById('confirmPasswordError');
      
      passwordForm.addEventListener('submit', function(e) {
        let isValid = true;
        
        // Clear previous errors
        currentPasswordError.textContent = '';
        newPasswordError.textContent = '';
        confirmPasswordError.textContent = '';
        
        // Validate current password
        if (currentPassword.value.trim() === '') {
          currentPasswordError.textContent = 'Current password is required';
          isValid = false;
          shakeElement(currentPassword);
        }
        
        // Validate new password
        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z\d\s])([^\s]){8,}$/;
        if (!passwordRegex.test(newPassword.value)) {
          newPasswordError.textContent = 'Password must meet all requirements';
          isValid = false;
          shakeElement(newPassword);
        }
        
        // Validate confirm password
        if (newPassword.value !== confirmPassword.value) {
          confirmPasswordError.textContent = 'Passwords do not match';
          isValid = false;
          shakeElement(confirmPassword);
        }
        
        if (!isValid) {
          e.preventDefault();
          showToast('Please fix the errors in the form', 'error');
        } else {
          // Form is valid, add loading state to button
          const submitBtn = document.querySelector('.update-btn');
          submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i> Updating...';
          submitBtn.disabled = true;
        }
      });
      
      function shakeElement(element) {
        element.classList.add('shake');
        setTimeout(() => {
          element.classList.remove('shake');
        }, 600);
      }
      
      // Add shake animation
      const style = document.createElement('style');
      style.textContent = `
        @keyframes shake {
          0%, 100% { transform: translateX(0); }
          10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
          20%, 40%, 60%, 80% { transform: translateX(5px); }
        }
        .shake {
          animation: shake 0.6s cubic-bezier(.36,.07,.19,.97) both;
        }
      `;
      document.head.appendChild(style);
      
      // Show welcome toast on page load
      setTimeout(() => {
        showToast('Update your password securely', 'info');
      }, 500);
    });
  </script>
</body>
</html>
