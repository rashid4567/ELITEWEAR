<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= product.name || 'Product' %> - Elite Wear</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@8/swiper-bundle.min.css" />
    <link rel="stylesheet" href="/userStyle/header.css">
    <link rel="stylesheet" href="/userStyle/footer.css">
    <style>
        :root {
            --primary-color: #212529;
            --secondary-color: #f8f9fa;
            --accent-color: #dc3545;
            --text-color: #212529;
            --light-gray: #e9ecef;
            --medium-gray: #adb5bd;
            --dark-gray: #495057;
            --success-color: #198754;
            --warning-color: #ffc107;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            color: var(--text-color);
            background-color: #fff;
        }
        
        /* Breadcrumb Styles */
        .custom-breadcrumb {
            background-color: var(--secondary-color);
            padding: 12px 0;
            margin-bottom: 0;
        }
        
        .breadcrumb-item a {
            color: var(--dark-gray);
            text-decoration: none;
            transition: color 0.3s;
        }
        
        .breadcrumb-item a:hover {
            color: var(--accent-color);
        }
        
        .breadcrumb-item.active {
            color: var(--text-color);
            font-weight: 500;
        }
        
        /* Product Gallery Styles */
        .product-gallery {
            position: relative;
            margin-bottom: 30px;
        }
        
        .gallery-main {
            position: relative;
            overflow: hidden;
            border-radius: 8px;
            background-color: #fff;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05);
        }
        
        /* Enhanced Zoom Lens */
        .zoom-lens {
            position: absolute;
            border: 2px solid rgba(255, 255, 255, 0.5);
            width: 120px;
            height: 120px;
            border-radius: 50%;
            background-repeat: no-repeat;
            cursor: zoom-in;
            display: none;
            z-index: 10;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            backdrop-filter: brightness(1.1) blur(1px);
            pointer-events: none;
        }
        
        /* Enhanced Zoom Result */
        .zoom-result {
            position: absolute;
            top: 0;
            left: 105%;
            width: 350px;
            height: 350px;
            border: 1px solid #f0f0f0;
            background-repeat: no-repeat;
            background-color: #fff;
            display: none;
            border-radius: 8px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            z-index: 100;
            overflow: hidden;
        }
        
        .main-image {
            width: 100%;
            height: auto;
            object-fit: contain;
            cursor: zoom-in;
            transition: transform 0.3s ease;
        }
        
        /* Fullscreen Zoom Modal */
        .fullscreen-zoom {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.9);
            z-index: 2000;
            display: none;
            justify-content: center;
            align-items: center;
            cursor: zoom-out;
        }
        
        .fullscreen-zoom-content {
            position: relative;
            max-width: 90%;
            max-height: 90%;
            overflow: hidden;
        }
        
        .fullscreen-image {
            max-width: 100%;
            max-height: 90vh;
            object-fit: contain;
        }
        
        .fullscreen-zoom-lens {
            position: absolute;
            border: 2px solid rgba(255, 255, 255, 0.3);
            width: 150px;
            height: 150px;
            border-radius: 50%;
            background-repeat: no-repeat;
            cursor: zoom-out;
            display: none;
            z-index: 2010;
            box-shadow: 0 0 15px rgba(0,0,0,0.2);
            backdrop-filter: brightness(1.2) blur(2px);
            pointer-events: none;
        }
        
        .fullscreen-close {
            position: absolute;
            top: 20px;
            right: 20px;
            color: white;
            font-size: 30px;
            cursor: pointer;
            z-index: 2020;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: rgba(0, 0, 0, 0.5);
            border-radius: 50%;
            transition: background-color 0.3s;
        }
        
        .fullscreen-close:hover {
            background-color: rgba(0, 0, 0, 0.8);
        }
        
        .fullscreen-nav {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            color: white;
            font-size: 24px;
            cursor: pointer;
            z-index: 2020;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: rgba(0, 0, 0, 0.5);
            border-radius: 50%;
            transition: background-color 0.3s;
        }
        
        .fullscreen-nav:hover {
            background-color: rgba(0, 0, 0, 0.8);
        }
        
        .fullscreen-prev {
            left: 20px;
        }
        
        .fullscreen-next {
            right: 20px;
        }
        
        /* Zoom Button */
        .zoom-toggle {
            position: absolute;
            bottom: 15px;
            right: 15px;
            background-color: rgba(255, 255, 255, 0.8);
            color: var(--primary-color);
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 10;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }
        
        .zoom-toggle:hover {
            background-color: white;
            transform: scale(1.1);
        }
        
        .gallery-thumbs {
            margin-top: 15px;
        }
        
        .thumb-swiper {
            width: 100%;
            height: 100px;
        }
        
        .thumb-slide {
            width: 100px;
            height: 100px;
            border-radius: 6px;
            overflow: hidden;
            cursor: pointer;
            opacity: 0.7;
            transition: opacity 0.3s, transform 0.3s;
            border: 2px solid transparent;
        }
        
        .thumb-slide:hover {
            opacity: 1;
            transform: translateY(-2px);
        }
        
        .thumb-slide.active {
            opacity: 1;
            border-color: var(--accent-color);
        }
        
        .thumb-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        /* Product Info Styles */
        .product-title {
            font-size: 2rem;
            font-weight: 600;
            margin-bottom: 10px;
            color: var(--primary-color);
        }
        
        .product-code {
            color: var(--medium-gray);
            font-size: 0.9rem;
            margin-bottom: 15px;
        }
        
        .rating-stars {
            color: var(--warning-color);
            margin-bottom: 15px;
        }
        
        .review-count {
            color: var(--dark-gray);
            margin-left: 8px;
            font-size: 0.9rem;
        }
        
        .price-container {
            margin-bottom: 20px;
        }
        
        .current-price {
            font-size: 1.8rem;
            font-weight: 600;
            color: var(--primary-color);
        }
        
        .original-price {
            font-size: 1.2rem;
            text-decoration: line-through;
            color: var(--medium-gray);
            margin-left: 10px;
        }
        
        .discount-badge {
            background-color: var(--accent-color);
            color: white;
            padding: 4px 10px;
            border-radius: 4px;
            font-size: 0.8rem;
            margin-left: 10px;
            font-weight: 500;
        }
        
        .stock-info {
            margin-bottom: 20px;
        }
        
        .in-stock {
            color: var(--success-color);
            font-weight: 500;
        }
        
        .out-of-stock {
            color: var(--accent-color);
            font-weight: 500;
        }
        
        .low-stock {
            color: var(--accent-color);
            font-size: 0.9rem;
            margin-left: 10px;
        }
        
        /* Selection Options */
        .option-label {
            font-weight: 500;
            margin-bottom: 10px;
            display: block;
        }
        
        .size-selector {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .size-option input[type="radio"] {
            display: none;
        }
        
        .size-option label {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 50px;
            height: 50px;
            border: 1px solid var(--light-gray);
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s;
            font-weight: 500;
        }
        
        .size-option input[type="radio"]:checked + label {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }
        
        .size-option label:hover {
            border-color: var(--primary-color);
        }
        
        .color-selector {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .color-option input[type="radio"] {
            display: none;
        }
        
        .color-option label {
            display: block;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s;
            position: relative;
        }
        
        .color-option input[type="radio"]:checked + label::after {
            content: '';
            position: absolute;
            top: -4px;
            left: -4px;
            right: -4px;
            bottom: -4px;
            border: 2px solid var(--primary-color);
            border-radius: 50%;
        }
        
        /* Quantity Selector */
        .quantity-container {
            margin-bottom: 25px;
        }
        
        .quantity-selector {
            display: flex;
            align-items: center;
            max-width: 150px;
            border: 1px solid var(--light-gray);
            border-radius: 4px;
            overflow: hidden;
        }
        
        .quantity-btn {
            width: 40px;
            height: 40px;
            background-color: var(--secondary-color);
            border: none;
            font-size: 1.2rem;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .quantity-btn:hover {
            background-color: var(--light-gray);
        }
        
        .quantity-input {
            width: 60px;
            height: 40px;
            border: none;
            text-align: center;
            font-weight: 500;
            -moz-appearance: textfield;
        }
        
        .quantity-input::-webkit-outer-spin-button,
        .quantity-input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        
        /* Action Buttons */
        .action-buttons {
            display: flex;
            gap: 15px;
            margin-bottom: 25px;
        }
        
        .btn-add-to-cart, .btn-buy-now {
            flex: 1;
            padding: 12px 20px;
            border-radius: 4px;
            font-weight: 500;
            transition: all 0.3s;
        }
        
        .btn-add-to-cart {
            background-color: var(--primary-color);
            color: white;
            border: none;
        }
        
        .btn-add-to-cart:hover {
            background-color: #000;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .btn-buy-now {
            background-color: white;
            color: var(--primary-color);
            border: 1px solid var(--primary-color);
        }
        
        .btn-buy-now:hover {
            background-color: var(--primary-color);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .btn-wishlist {
            display: flex;
            align-items: center;
            gap: 8px;
            background: none;
            border: none;
            color: var(--dark-gray);
            padding: 0;
            cursor: pointer;
            transition: color 0.3s;
        }
        
        .btn-wishlist:hover {
            color: var(--accent-color);
        }
        
        .btn-wishlist i {
            font-size: 1.2rem;
        }
        
        /* Product Details Tabs */
        .product-tabs {
            margin-top: 40px;
            margin-bottom: 40px;
        }
        
        .nav-tabs {
            border-bottom: 1px solid var(--light-gray);
            margin-bottom: 20px;
        }
        
        .nav-tabs .nav-link {
            border: none;
            color: var(--dark-gray);
            font-weight: 500;
            padding: 12px 20px;
            transition: all 0.3s;
        }
        
        .nav-tabs .nav-link:hover {
            color: var(--primary-color);
        }
        
        .nav-tabs .nav-link.active {
            color: var(--primary-color);
            border-bottom: 2px solid var(--primary-color);
            background-color: transparent;
        }
        
        .tab-content {
            padding: 20px 0;
        }
        
        .tab-pane h3 {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 15px;
            color: var(--primary-color);
        }
        
        .tab-pane p {
            color: var(--dark-gray);
            line-height: 1.6;
            margin-bottom: 20px;
        }
        
        /* Reviews Section */
        .reviews-section {
            margin-top: 60px;
            margin-bottom: 60px;
        }
        
        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 30px;
            position: relative;
            padding-bottom: 15px;
        }
        
        .section-title::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 60px;
            height: 3px;
            background-color: var(--accent-color);
        }
        
        .review-summary {
            display: flex;
            align-items: center;
            margin-bottom: 30px;
            background-color: var(--secondary-color);
            padding: 20px;
            border-radius: 8px;
        }
        
        .average-rating {
            text-align: center;
            padding-right: 30px;
            border-right: 1px solid var(--light-gray);
            margin-right: 30px;
        }
        
        .average-rating-value {
            font-size: 3rem;
            font-weight: 700;
            color: var(--primary-color);
            line-height: 1;
        }
        
        .rating-stars-large {
            color: var(--warning-color);
            font-size: 1.5rem;
            margin: 10px 0;
        }
        
        .total-reviews {
            font-size: 0.9rem;
            color: var(--dark-gray);
        }
        
        .rating-bars {
            flex: 1;
        }
        
        .rating-bar {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
        }
        
        .rating-label {
            width: 60px;
            display: flex;
            align-items: center;
        }
        
        .rating-label i {
            color: var(--warning-color);
            margin-right: 5px;
        }
        
        .rating-progress {
            flex: 1;
            height: 8px;
            background-color: var(--light-gray);
            border-radius: 4px;
            margin: 0 15px;
            overflow: hidden;
        }
        
        .rating-progress-bar {
            height: 100%;
            background-color: var(--warning-color);
        }
        
        .rating-percent {
            width: 40px;
            font-size: 0.9rem;
            color: var(--dark-gray);
            text-align: right;
        }
        
        .review-card {
            background-color: white;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            transition: transform 0.3s, box-shadow 0.3s;
        }
        
        .review-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .review-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
        }
        
        .reviewer-info {
            display: flex;
            align-items: center;
        }
        
        .reviewer-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            overflow: hidden;
            margin-right: 15px;
        }
        
        .reviewer-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .reviewer-name {
            font-weight: 500;
            margin-bottom: 5px;
        }
        
        .review-date {
            font-size: 0.8rem;
            color: var(--medium-gray);
        }
        
        .review-rating {
            color: var(--warning-color);
        }
        
        .review-title {
            font-weight: 600;
            margin-bottom: 10px;
        }
        
        .review-content {
            color: var(--dark-gray);
            line-height: 1.6;
            margin-bottom: 15px;
        }
        
        .review-images {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .review-image {
            width: 80px;
            height: 80px;
            border-radius: 4px;
            overflow: hidden;
            cursor: pointer;
        }
        
        .review-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s;
        }
        
        .review-image img:hover {
            transform: scale(1.05);
        }
        
        .review-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: var(--medium-gray);
            font-size: 0.9rem;
        }
        
        .review-helpful {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .btn-helpful {
            background: none;
            border: none;
            color: var(--dark-gray);
            cursor: pointer;
            transition: color 0.3s;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .btn-helpful:hover {
            color: var(--primary-color);
        }
        
        .btn-helpful:disabled {
            cursor: default;
            opacity: 0.7;
        }
        
        .btn-helpful.text-primary {
            color: var(--primary-color);
        }
        
        .btn-helpful i {
            font-size: 1rem;
        }
        
        .helpful-count {
            color: var(--dark-gray);
        }
        
        .review-verified {
            display: flex;
            align-items: center;
            gap: 5px;
            color: var(--success-color);
        }
        
        .pagination-container {
            display: flex;
            justify-content: center;
            margin-top: 30px;
        }
        
        .pagination .page-link {
            color: var(--primary-color);
            border-color: var(--light-gray);
            margin: 0 5px;
            border-radius: 4px;
            transition: all 0.3s;
        }
        
        .pagination .page-link:hover {
            background-color: var(--secondary-color);
            color: var(--primary-color);
        }
        
        .pagination .page-item.active .page-link {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }
        
        .write-review-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            font-weight: 500;
            transition: all 0.3s;
            margin-bottom: 30px;
        }
        
        .write-review-btn:hover {
            background-color: #000;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        /* Star Rating in Review Form */
        .rating-input {
            margin-bottom: 20px;
        }
        
        .star-rating {
            display: flex;
            flex-direction: row-reverse;
            justify-content: flex-end;
        }
        
        .star-rating input {
            display: none;
        }
        
        .star-rating label {
            cursor: pointer;
            font-size: 1.5rem;
            color: var(--warning-color);
            padding: 0 5px;
        }
        
        .star-rating label:hover,
        .star-rating label:hover ~ label,
        .star-rating input:checked ~ label {
            color: var(--warning-color);
        }
        
        .star-rating label:hover i,
        .star-rating label:hover ~ label i,
        .star-rating input:checked ~ label i {
            content: "\f005";
            font-weight: 900;
        }
        
        /* Similar Products */
        .similar-products {
            margin-top: 60px;
            margin-bottom: 60px;
        }
        
        .product-card {
            border: none;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05);
            transition: transform 0.3s, box-shadow 0.3s;
            margin-bottom: 20px;
        }
        
        .product-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 30px rgba(0,0,0,0.1);
        }
        
        .product-card-img {
            height: 250px;
            object-fit: cover;
        }
        
        .product-card-body {
            padding: 20px;
        }
        
        .product-card-title {
            font-weight: 500;
            margin-bottom: 10px;
            height: 48px;
            overflow: hidden;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
        }
        
        .product-card-price {
            font-weight: 600;
            color: var(--primary-color);
            margin-bottom: 5px;
        }
        
        .product-card-discount {
            color: var(--accent-color);
            font-weight: 500;
            font-size: 0.9rem;
        }
        
        /* Newsletter Section */
        .newsletter-section {
            background-color: var(--secondary-color);
            padding: 60px 0;
            margin-top: 60px;
        }
        
        .newsletter-title {
            font-size: 2rem;
            font-weight: 600;
            margin-bottom: 15px;
        }
        
        .newsletter-description {
            color: var(--dark-gray);
            margin-bottom: 30px;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }
        
        .newsletter-form {
            max-width: 500px;
            margin: 0 auto;
        }
        
        .newsletter-input {
            height: 50px;
            border-radius: 4px 0 0 4px;
            border: 1px solid var(--light-gray);
            padding: 0 20px;
        }
        
        .newsletter-button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            height: 50px;
            padding: 0 30px;
            border-radius: 0 4px 4px 0;
            font-weight: 500;
            transition: background-color 0.3s;
        }
        
        .newsletter-button:hover {
            background-color: #000;
        }
        
        /* Toast Notifications */
        .toast-container {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 1050;
        }
        
        .toast {
            min-width: 250px;
        }
        
        /* Responsive Styles */
        @media (max-width: 991px) {
            .zoom-result {
                display: none !important;
            }
            
            .review-summary {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .average-rating {
                border-right: none;
                border-bottom: 1px solid var(--light-gray);
                padding-right: 0;
                padding-bottom: 20px;
                margin-right: 0;
                margin-bottom: 20px;
                width: 100%;
            }
        }
        
        @media (max-width: 767px) {
            .product-title {
                font-size: 1.5rem;
            }
            
            .current-price {
                font-size: 1.5rem;
            }
            
            .action-buttons {
                flex-direction: column;
            }
            
            .thumb-swiper {
                height: 80px;
            }
            
            .thumb-slide {
                width: 80px;
                height: 80px;
            }
            
            .review-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .review-rating {
                margin-top: 10px;
            }
            
            .zoom-lens {
                display: none !important;
            }
            
            .main-image {
                cursor: default;
            }
        }
        
        @media (max-width: 575px) {
            .gallery-thumbs {
                display: flex;
                overflow-x: auto;
                margin-bottom: 15px;
            }
            
            .thumb-slide {
                width: 60px;
                height: 60px;
                flex-shrink: 0;
                margin-right: 10px;
            }
            
            .newsletter-form .input-group {
                flex-direction: column;
            }
            
            .newsletter-input, .newsletter-button {
                width: 100%;
                border-radius: 4px;
                margin-bottom: 10px;
            }
            
            .fullscreen-nav {
                width: 40px;
                height: 40px;
                font-size: 18px;
            }
            
            .fullscreen-close {
                width: 40px;
                height: 40px;
                font-size: 24px;
                top: 10px;
                right: 10px;
            }
        }
    </style>
</head>
<body>
    <%- include("../partials/user/header") %>

    <!-- Breadcrumb -->
    <div class="custom-breadcrumb">
        <div class="container">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb mb-0">
                    <li class="breadcrumb-item"><a href="/"><i class="fas fa-home"></i> Home</a></li>
                    <li class="breadcrumb-item"><a href="/allproduct">Shop</a></li>
                    <% if (product.categoryId && product.categoryId.name) { %>
                        <li class="breadcrumb-item"><a href="/allproduct?category=<%= product.categoryId._id %>"><%= product.categoryId.name %></a></li>
                    <% } %>
                    <li class="breadcrumb-item active" aria-current="page"><%= product.name || 'Product' %></li>
                </ol>
            </nav>
        </div>
    </div>

    <main class="container py-5">
        <div class="row">
            <!-- Product Gallery -->
            <div class="col-lg-6 mb-4">
                <div class="product-gallery">
                    <div class="gallery-main" id="gallery-main">
                        <div class="zoom-lens" id="zoom-lens"></div>
                        <div class="zoom-result" id="zoom-result"></div>
                        <% if (product.images && product.images.length > 0) { %>
                            <img id="main-image" src="<%= product.images[0].url %>" alt="<%= product.name || 'Product' %>" class="main-image" onerror="this.src='/images/placeholder.jpg'">
                        <% } else { %>
                            <img id="main-image" src="/images/placeholder.jpg" alt="No image" class="main-image">
                        <% } %>
                        <button class="zoom-toggle" id="zoom-toggle" title="View fullscreen">
                            <i class="fas fa-expand-alt"></i>
                        </button>
                    </div>
                    
                    <div class="gallery-thumbs">
                        <div class="swiper thumb-swiper" id="thumb-swiper">
                            <div class="swiper-wrapper">
                                <% if (product.images && product.images.length > 0) { %>
                                    <% product.images.forEach(function(image, index) { %>
                                        <div class="swiper-slide thumb-slide <%= index === 0 ? 'active' : '' %>" data-index="<%= index %>">
                                            <img src="<%= image.url %>" alt="Thumbnail" class="thumb-image" onerror="this.src='/images/placeholder.jpg'">
                                        </div>
                                    <% }); %>
                                <% } else { %>
                                    <div class="swiper-slide thumb-slide active" data-index="0">
                                        <img src="/images/placeholder.jpg" alt="No image" class="thumb-image">
                                    </div>
                                <% } %>
                            </div>
                            <div class="swiper-button-next"></div>
                            <div class="swiper-button-prev"></div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Product Info -->
            <div class="col-lg-6">
                <h1 class="product-title"><%= product.name || 'Unnamed Product' %></h1>
                <p class="product-code">Product Code: <%= product.sku || 'N/A' %></p>
                
                <div class="rating-stars">
                    <% for (let i = 0; i < 5; i++) { %>
                        <% if (i < Math.floor(product.ratings?.average || 0)) { %>
                            <i class="fas fa-star"></i>
                        <% } else if (i < (product.ratings?.average || 0)) { %>
                            <i class="fas fa-star-half-alt"></i>
                        <% } else { %>
                            <i class="far fa-star"></i>
                        <% } %>
                    <% } %>
                    <span class="review-count">(<%= product.ratings?.count || 0 %> reviews)</span>
                </div>
                
                <div class="price-container" id="price-container">
                    <% if (product.variants && product.variants.length > 0) { %>
                        <span class="current-price" id="current-price">₹<%= product.variants[0].salePrice?.toFixed(2) || 'N/A' %></span>
                        <% if (product.variants[0].varientPrice && product.variants[0].varientPrice > product.variants[0].salePrice) { %>
                            <span class="original-price" id="original-price">₹<%= product.variants[0].varientPrice.toFixed(2) %></span>
                            <span class="discount-badge" id="discount-badge">
                                <%= Math.round(((product.variants[0].varientPrice - product.variants[0].salePrice) / product.variants[0].varientPrice) * 100) %>% OFF
                            </span>
                        <% } %>
                    <% } else { %>
                        <span class="current-price">Price not available</span>
                    <% } %>
                </div>
                
                <div class="stock-info" id="stock-info">
                    <% if (product.variants && product.variants.length > 0 && product.variants[0].varientquatity > 0) { %>
                        <span class="in-stock" id="stock-status"><i class="fas fa-check-circle"></i> In Stock</span>
                        <% if (product.variants[0].varientquatity <= 5) { %>
                            <span class="low-stock" id="stock-quantity">Only <%= product.variants[0].varientquatity %> left!</span>
                        <% } %>
                    <% } else { %>
                        <span class="out-of-stock" id="stock-status"><i class="fas fa-times-circle"></i> Out of Stock</span>
                    <% } %>
                </div>
                
                <form id="add-to-cart-form" data-product-id="<%= product._id %>">
                    <!-- Size Selection -->
                    <div class="mb-4">
                        <label class="option-label">Size:</label>
                        <div class="size-selector">
                            <% if (product.variants && product.variants.length > 0) { %>
                                <% product.variants.forEach(function(variant, index) { %>
                                    <div class="size-option">
                                        <input type="radio" name="size" id="size-<%= variant.size %>" 
                                               value="<%= variant.size %>" 
                                               data-index="<%= index %>" 
                                               data-regular="<%= variant.varientPrice || 0 %>" 
                                               data-sale="<%= variant.salePrice || 0 %>" 
                                               data-quantity="<%= variant.varientquatity || 0 %>" 
                                               <%= index === 0 ? 'checked' : '' %> 
                                               onchange="updatePriceAndStock(this)" required>
                                        <label for="size-<%= variant.size %>"><%= variant.size %></label>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <p>No sizes available</p>
                            <% } %>
                        </div>
                    </div>
                    
                    <!-- Color Selection -->
                    <div class="mb-4">
                        <label class="option-label">Color:</label>
                        <div class="color-selector">
                            <% if (product.color) { %>
                                <div class="color-option">
                                    <input type="radio" name="color" id="color-<%= product.color %>" value="<%= product.color %>" checked required>
                                    <label for="color-<%= product.color %>" style="background-color: <%= product.color %>" title="<%= product.color %>"></label>
                                </div>
                            <% } else { %>
                                <p>No color specified</p>
                            <% } %>
                        </div>
                    </div>
                    
                    <!-- Quantity Selection -->
                    <div class="quantity-container">
                        <label class="option-label">Quantity:</label>
                        <div class="quantity-selector">
                            <button type="button" class="quantity-btn" id="decrement-btn" onclick="decrementQuantity()">-</button>
                            <input type="number" class="quantity-input" id="quantity" name="quantity" value="1" min="1" max="10" readonly>
                            <button type="button" class="quantity-btn" id="increment-btn" onclick="incrementQuantity()">+</button>
                        </div>
                    </div>
                    
                    <!-- Action Buttons -->
                    <div class="action-buttons">
                        <button type="submit" class="btn-add-to-cart" id="add-to-cart-btn">
                            <i class="fas fa-shopping-cart me-2"></i> Add to Cart
                        </button>
                        <button type="button" class="btn-buy-now" id="buy-now-btn" onclick="buyNow()">
                            <i class="fas fa-bolt me-2"></i> Buy Now
                        </button>
                    </div>
                </form>
                
                <button class="btn-wishlist" onclick="addToWishlist('<%= product._id %>')" id="wishlist-btn">
                    <i class="far fa-heart"></i> Add to Wishlist
                </button>
                
                <!-- Product Tabs -->
                <div class="product-tabs">
                    <ul class="nav nav-tabs" id="productTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="description-tab" data-bs-toggle="tab" data-bs-target="#description" type="button" role="tab" aria-controls="description" aria-selected="true">Description</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="details-tab" data-bs-toggle="tab" data-bs-target="#details" type="button" role="tab" aria-controls="details" aria-selected="false">Details</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="care-tab" data-bs-toggle="tab" data-bs-target="#care" type="button" role="tab" aria-controls="care" aria-selected="false">Care Instructions</button>
                        </li>
                    </ul>
                    <div class="tab-content" id="productTabsContent">
                        <div class="tab-pane fade show active" id="description" role="tabpanel" aria-labelledby="description-tab">
                            <p><%= product.description || 'No description available' %></p>
                        </div>
                        <div class="tab-pane fade" id="details" role="tabpanel" aria-labelledby="details-tab">
                            <h3>Size & Fit</h3>
                            <p><%= product.sizeFit || 'No size & fit information available' %></p>
                            
                            <h3>Specifications</h3>
                            <p><%= product.specifications || 'No specifications available' %></p>
                        </div>
                        <div class="tab-pane fade" id="care" role="tabpanel" aria-labelledby="care-tab">
                            <h3>Wash Care</h3>
                            <p><%= product.washCare || 'No wash care instructions available' %></p>
                            
                            <p class="text-muted fst-italic mt-4">
                                Note: The actual colors of the product may vary slightly due to photographic lighting sources or your display settings.
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Reviews Section -->
        <section class="reviews-section">
            <h2 class="section-title">Customer Reviews</h2>
            
            <div class="review-summary">
                <div class="average-rating">
                    <div class="average-rating-value" id="average-rating-value">
                        <%= (product.ratings?.average || 0).toFixed(1) %>
                    </div>
                    <div class="rating-stars-large" id="rating-stars-large">
                        <% for (let i = 0; i < 5; i++) { %>
                            <% if (i < Math.floor(product.ratings?.average || 0)) { %>
                                <i class="fas fa-star"></i>
                            <% } else if (i < (product.ratings?.average || 0)) { %>
                                <i class="fas fa-star-half-alt"></i>
                            <% } else { %>
                                <i class="far fa-star"></i>
                            <% } %>
                        <% } %>
                    </div>
                    <div class="total-reviews" id="total-reviews">
                        Based on <%= product.ratings?.count || 0 %> review<%= (product.ratings?.count || 0) !== 1 ? 's' : '' %>
                    </div>
                </div>
                
                <div class="rating-bars">
                    <% for (let i = 5; i >= 1; i--) { %>
                        <div class="rating-bar">
                            <div class="rating-label">
                                <i class="fas fa-star"></i> <%= i %>
                            </div>
                            <div class="rating-progress">
                                <% 
                                    // Calculate percentage safely
                                    let percentage = 0;
                                    if (product.ratings && product.ratings.distribution && product.ratings.distribution[i]) {
                                        percentage = product.ratings.distribution[i].percentage || 0;
                                    } else if (product.ratings && product.ratings.count > 0) {
                                        // Fallback calculation if distribution is not available
                                        const count = product.ratings.distribution?.[i]?.count || 0;
                                        percentage = Math.round((count / product.ratings.count) * 100);
                                    }
                                %>
                                <div class="rating-progress-bar" id="rating-bar-<%= i %>" style="width: <%= percentage %>%"></div>
                            </div>
                            <div class="rating-percent" id="rating-percent-<%= i %>"><%= percentage %>%</div>
                        </div>
                    <% } %>
                </div>
            </div>
            
            <% if (user) { %>
                <button class="write-review-btn" onclick="openReviewForm()">
                    <i class="fas fa-pen me-2"></i> Write a Review
                </button>
            <% } else { %>
                <a href="/login?redirect=<%= encodeURIComponent('/productdetails/' + product._id) %>" class="write-review-btn">
                    <i class="fas fa-pen me-2"></i> Login to Write a Review
                </a>
            <% } %>
            
            <div id="reviews-container">
                <!-- Reviews will be loaded here via AJAX -->
                <div class="text-center py-4" id="reviews-loading">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading reviews...</p>
                </div>
            </div>
            
            <div class="pagination-container" id="reviews-pagination">
                <!-- Pagination will be added here -->
            </div>
        </section>
        
        <!-- Similar Products -->
        <section class="similar-products">
            <h2 class="section-title">Similar Products</h2>
            
            <div class="row">
                <% if (similarProducts && similarProducts.length > 0) { %>
                    <% similarProducts.forEach(function(item) { %>
                        <div class="col-6 col-md-3">
                            <div class="card product-card">
                                <a href="/productdetails/<%= item._id %>">
                                    <img src="<%= item.images && item.images.length > 0 ? item.images[0].url : '/images/placeholder.jpg' %>" 
                                         class="card-img-top product-card-img" 
                                         alt="<%= item.name || 'Product Image' %>" 
                                         onerror="this.src='/images/placeholder.jpg'">
                                </a>
                                <div class="card-body product-card-body">
                                    <h5 class="product-card-title"><%= item.name || 'Unnamed Product' %></h5>
                                    <div class="product-card-price">
                                        ₹<%= item.variants && item.variants.length > 0 ? (item.variants[0].salePrice || 0).toFixed(2) : 'N/A' %>
                                    </div>
                                    <% const itemOffer = item.offer || 0; const categoryOffer = item.categoryId?.offer || 0; const totalItemOffer = itemOffer + categoryOffer; %>
                                    <% if (totalItemOffer > 0) { %>
                                        <div class="product-card-discount"><%= totalItemOffer %>% OFF</div>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="col-12">
                        <p class="text-muted">No similar products found.</p>
                    </div>
                <% } %>
            </div>
        </section>
    </main>
    
    <!-- Newsletter Section -->
    <section class="newsletter-section">
        <div class="container text-center">
            <h2 class="newsletter-title">Get Exclusive Offers & Updates</h2>
            <p class="newsletter-description">Subscribe to our newsletter for exclusive deals, new arrivals, and fashion tips.</p>
            <form class="newsletter-form">
                <div class="input-group">
                    <input type="email" class="form-control newsletter-input" placeholder="Enter your email address" required>
                    <button class="btn newsletter-button" type="submit">Subscribe</button>
                </div>
            </form>
        </div>
    </section>
    
    <!-- Toast Container -->
    <div class="toast-container"></div>
    
    <!-- Review Modal -->
    <div class="modal fade" id="reviewModal" tabindex="-1" aria-labelledby="reviewModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="reviewModalLabel">Write a Review</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="review-form">
                        <div class="mb-3">
                            <label for="review-rating" class="form-label">Rating</label>
                            <div class="rating-input">
                                <div class="star-rating">
                                    <input type="radio" id="star5" name="rating" value="5" required>
                                    <label for="star5" title="5 stars"><i class="far fa-star"></i></label>
                                    <input type="radio" id="star4" name="rating" value="4">
                                    <label for="star4" title="4 stars"><i class="far fa-star"></i></label>
                                    <input type="radio" id="star3" name="rating" value="3">
                                    <label for="star3" title="3 stars"><i class="far fa-star"></i></label>
                                    <input type="radio" id="star2" name="rating" value="2">
                                    <label for="star2" title="2 stars"><i class="far fa-star"></i></label>
                                    <input type="radio" id="star1" name="rating" value="1">
                                    <label for="star1" title="1 star"><i class="far fa-star"></i></label>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="review-title" class="form-label">Review Title</label>
                            <input type="text" class="form-control" id="review-title" name="title" required>
                        </div>
                        <div class="mb-3">
                            <label for="review-content" class="form-label">Your Review</label>
                            <textarea class="form-control" id="review-content" name="description" rows="5" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="review-images" class="form-label">Add Photos (optional)</label>
                            <input type="file" class="form-control" id="review-images" name="images" multiple accept="image/*">
                        </div>
                        <input type="hidden" id="orderItemId" name="orderItemId" value="">
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="submit-review-btn">Submit Review</button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Image Preview Modal -->
    <div class="modal fade" id="imagePreviewModal" tabindex="-1" aria-labelledby="imagePreviewModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="imagePreviewModalLabel">Image Preview</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    <img id="previewImage" src="/placeholder.svg" alt="Preview" class="img-fluid">
                </div>
            </div>
        </div>
    </div>
    
    <!-- Fullscreen Zoom Modal -->
    <div class="fullscreen-zoom" id="fullscreen-zoom">
        <div class="fullscreen-zoom-content">
            <img id="fullscreen-image" src="/placeholder.svg" alt="Product fullscreen view" class="fullscreen-image">
            <div class="fullscreen-zoom-lens" id="fullscreen-zoom-lens"></div>
        </div>
        <div class="fullscreen-close" id="fullscreen-close">
            <i class="fas fa-times"></i>
        </div>
        <div class="fullscreen-nav fullscreen-prev" id="fullscreen-prev">
            <i class="fas fa-chevron-left"></i>
        </div>
        <div class="fullscreen-nav fullscreen-next" id="fullscreen-next">
            <i class="fas fa-chevron-right"></i>
        </div>
    </div>
    
    <%- include("../partials/user/footer") %>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/swiper@8/swiper-bundle.min.js"></script>
    <script>
        // Product data from server
        const productData = <%- JSON.stringify(product || {}) %>;
        const variants = <%- JSON.stringify(product.variants || []) %>;
        let currentImageIndex = 0;
        
        // Initialize on document load
        document.addEventListener('DOMContentLoaded', function() {
            initImageZoom();
            initThumbnailSwiper();
            initFullscreenZoom();
            loadReviews(1);
            
            // Initialize with first size selected
            const firstSize = document.querySelector('input[name="size"]:checked');
            if (firstSize) {
                updatePriceAndStock(firstSize);
            }
            
            // Setup event listeners
            setupEventListeners();
        });
        
        // Initialize image zoom functionality
        function initImageZoom() {
            const container = document.getElementById('gallery-main');
            const mainImage = document.getElementById('main-image');
            const lens = document.getElementById('zoom-lens');
            const result = document.getElementById('zoom-result');
            const zoomToggle = document.getElementById('zoom-toggle');
            
            if (!container || !mainImage || !lens || !result) {
                console.error('Zoom elements not found');
                return;
            }
            
            // Set up the zoom functionality
            const zoomLevel = 3;
            
            // Show lens and result on mouseenter
            container.addEventListener('mouseenter', function(e) {
                if (window.innerWidth >= 992) { // Only on desktop
                    lens.style.display = 'block';
                    result.style.display = 'block';
                    updateZoom(e); // Pass the event to updateZoom
                }
            });
            
            // Hide lens and result on mouseleave
            container.addEventListener('mouseleave', function() {
                lens.style.display = 'none';
                result.style.display = 'none';
            });
            
            // Update zoom on mousemove
            container.addEventListener('mousemove', updateZoom);
            
            // Toggle fullscreen zoom on click
            if (zoomToggle) {
                zoomToggle.addEventListener('click', function(e) {
                    e.preventDefault();
                    openFullscreenZoom();
                });
            }
            
            // Also allow clicking on the image to open fullscreen
            mainImage.addEventListener('click', function(e) {
                if (window.innerWidth >= 768) { // Only on tablets and up
                    e.preventDefault();
                    openFullscreenZoom();
                }
            });
            
            function updateZoom(e) {
                if (lens.style.display === 'none') return;
                
                // Get cursor position
                const rect = mainImage.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                
                // Ensure cursor is within bounds
                if (x < 0 || x > rect.width || y < 0 || y > rect.height) {
                    lens.style.display = 'none';
                    result.style.display = 'none';
                    return;
                }
                
                // Position lens
                const lensWidth = lens.offsetWidth;
                const lensHeight = lens.offsetHeight;
                
                let lensX = x - lensWidth / 2;
                let lensY = y - lensHeight / 2;
                
                // Prevent lens from going outside the image
                if (lensX < 0) lensX = 0;
                if (lensY < 0) lensY = 0;
                if (lensX > rect.width - lensWidth) lensX = rect.width - lensWidth;
                if (lensY > rect.height - lensHeight) lensY = rect.height - lensHeight;
                
                lens.style.left = `${lensX}px`;
                lens.style.top = `${lensY}px`;
                
                // Calculate the ratio of the result div size to the lens size
                const ratioX = result.offsetWidth / lensWidth;
                const ratioY = result.offsetHeight / lensHeight;
                
                // Set background properties for the result div
                result.style.backgroundImage = `url(${mainImage.src})`;
                result.style.backgroundSize = `${rect.width * ratioX}px ${rect.height * ratioY}px`;
                result.style.backgroundPosition = `-${lensX * ratioX}px -${lensY * ratioY}px`;
            }
        }
        
        // Initialize fullscreen zoom
        function initFullscreenZoom() {
            const fullscreenZoom = document.getElementById('fullscreen-zoom');
            const fullscreenImage = document.getElementById('fullscreen-image');
            const fullscreenLens = document.getElementById('fullscreen-zoom-lens');
            const closeBtn = document.getElementById('fullscreen-close');
            const prevBtn = document.getElementById('fullscreen-prev');
            const nextBtn = document.getElementById('fullscreen-next');
            
            if (!fullscreenZoom || !fullscreenImage || !fullscreenLens || !closeBtn || !prevBtn || !nextBtn) {
                console.error('Fullscreen zoom elements not found');
                return;
            }
            
            // Close fullscreen on close button click
            closeBtn.addEventListener('click', closeFullscreenZoom);
            
            // Close fullscreen on background click
            fullscreenZoom.addEventListener('click', function(e) {
                if (e.target === fullscreenZoom) {
                    closeFullscreenZoom();
                }
            });
            
            // Navigate to previous image
            prevBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                navigateFullscreenImage(-1);
            });
            
            // Navigate to next image
            nextBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                navigateFullscreenImage(1);
            });
            
            // Handle keyboard navigation
            document.addEventListener('keydown', function(e) {
                if (fullscreenZoom.style.display === 'flex') {
                    if (e.key === 'Escape') {
                        closeFullscreenZoom();
                    } else if (e.key === 'ArrowLeft') {
                        navigateFullscreenImage(-1);
                    } else if (e.key === 'ArrowRight') {
                        navigateFullscreenImage(1);
                    }
                }
            });
            
            // Handle zoom lens in fullscreen
            fullscreenImage.addEventListener('mousemove', function(e) {
                updateFullscreenZoom(e);
            });
            
            fullscreenImage.addEventListener('mouseenter', function() {
                fullscreenLens.style.display = 'block';
            });
            
            fullscreenImage.addEventListener('mouseleave', function() {
                fullscreenLens.style.display = 'none';
            });
            
            function updateFullscreenZoom(e) {
                const rect = fullscreenImage.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                
                // Ensure cursor is within bounds
                if (x < 0 || x > rect.width || y < 0 || y > rect.height) {
                    fullscreenLens.style.display = 'none';
                    return;
                }
                
                // Position lens
                const lensWidth = fullscreenLens.offsetWidth;
                const lensHeight = fullscreenLens.offsetHeight;
                
                let lensX = x - lensWidth / 2;
                let lensY = y - lensHeight / 2;
                
                // Prevent lens from going outside the image
                if (lensX < 0) lensX = 0;
                if (lensY < 0) lensY = 0;
                if (lensX > rect.width - lensWidth) lensX = rect.width - lensWidth;
                if (lensY > rect.height - lensHeight) lensY = rect.height - lensHeight;
                
                fullscreenLens.style.left = `${lensX}px`;
                fullscreenLens.style.top = `${lensY}px`;
                
                // Calculate zoom ratio
                const zoomLevel = 2.5;
                
                // Set background properties for the lens
                fullscreenLens.style.backgroundImage = `url(${fullscreenImage.src})`;
                fullscreenLens.style.backgroundSize = `${rect.width * zoomLevel}px ${rect.height * zoomLevel}px`;
                
                // Calculate background position
                const bgX = (x / rect.width) * 100;
                const bgY = (y / rect.height) * 100;
                fullscreenLens.style.backgroundPosition = `${bgX}% ${bgY}%`;
            }
        }
        
        // Open fullscreen zoom
        function openFullscreenZoom() {
            const fullscreenZoom = document.getElementById('fullscreen-zoom');
            const fullscreenImage = document.getElementById('fullscreen-image');
            
            if (!fullscreenZoom || !fullscreenImage) return;
            
            // Get current image source
            const mainImage = document.getElementById('main-image');
            if (mainImage) {
                fullscreenImage.src = mainImage.src;
                
                // Show fullscreen zoom
                fullscreenZoom.style.display = 'flex';
                document.body.style.overflow = 'hidden'; // Prevent scrolling
                
                // Update current image index
                const thumbSlides = document.querySelectorAll('.thumb-slide');
                thumbSlides.forEach((slide, index) => {
                    if (slide.classList.contains('active')) {
                        currentImageIndex = index;
                    }
                });
            }
        }
        
        // Close fullscreen zoom
        function closeFullscreenZoom() {
            const fullscreenZoom = document.getElementById('fullscreen-zoom');
            if (fullscreenZoom) {
                fullscreenZoom.style.display = 'none';
                document.body.style.overflow = ''; // Restore scrolling
            }
        }
        
        // Navigate fullscreen image
        function navigateFullscreenImage(direction) {
            const images = productData.images || [];
            if (images.length <= 1) return;
            
            // Calculate new index
            currentImageIndex = (currentImageIndex + direction + images.length) % images.length;
            
            // Update fullscreen image
            const fullscreenImage = document.getElementById('fullscreen-image');
            if (fullscreenImage && images[currentImageIndex]) {
                fullscreenImage.src = images[currentImageIndex].url || '/images/placeholder.jpg';
            }
            
            // Update thumbnail active state
            const thumbSlides = document.querySelectorAll('.thumb-slide');
            thumbSlides.forEach((slide, index) => {
                if (index === currentImageIndex) {
                    slide.classList.add('active');
                } else {
                    slide.classList.remove('active');
                }
            });
            
            // Also update main image
            const mainImage = document.getElementById('main-image');
            if (mainImage && images[currentImageIndex]) {
                mainImage.src = images[currentImageIndex].url || '/images/placeholder.jpg';
            }
        }
        
        // Initialize thumbnail swiper
        function initThumbnailSwiper() {
            new Swiper('#thumb-swiper', {
                slidesPerView: 'auto',
                spaceBetween: 10,
                navigation: {
                    nextEl: '.swiper-button-next',
                    prevEl: '.swiper-button-prev',
                },
                breakpoints: {
                    576: {
                        slidesPerView: 4,
                    },
                    768: {
                        slidesPerView: 5,
                    }
                }
            });
            
            // Add click event to thumbnails
            const thumbSlides = document.querySelectorAll('.thumb-slide');
            thumbSlides.forEach(slide => {
                slide.addEventListener('click', function() {
                    // Update active class
                    thumbSlides.forEach(s => s.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Update main image
                    const imgSrc = this.querySelector('img').src;
                    document.getElementById('main-image').src = imgSrc;
                    
                    // Update current image index
                    currentImageIndex = parseInt(this.getAttribute('data-index')) || 0;
                    
                    // Reinitialize zoom
                    initImageZoom();
                });
            });
        }
        
        // Setup event listeners
        function setupEventListeners() {
            // Add to cart form submission
            const form = document.getElementById('add-to-cart-form');
            if (form) {
                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    addToCart();
                });
            }
            
            // Review form submission
            const submitReviewBtn = document.getElementById('submit-review-btn');
            if (submitReviewBtn) {
                submitReviewBtn.addEventListener('click', submitReview);
            }
            
            // Rating stars in review form
            const ratingInputs = document.querySelectorAll('.rating-input input[type="radio"]');
            ratingInputs.forEach(input => {
                input.addEventListener('change', function() {
                    // Update stars appearance
                    const stars = document.querySelectorAll('.rating-input label i');
                    const rating = parseInt(this.value);
                    
                    stars.forEach((star, index) => {
                        if (index < 5 - rating) {
                            star.className = 'far fa-star';
                        } else {
                            star.className = 'fas fa-star';
                        }
                    });
                });
            });
        }
        
        // Update price and stock based on selected size
        function updatePriceAndStock(element) {
            const index = parseInt(element.getAttribute('data-index'));
            const variant = variants[index];
            
            if (!variant) {
                console.error('Variant not found for index:', index);
                return;
            }
            
            // Update price display
            const currentPriceEl = document.getElementById('current-price');
            const originalPriceEl = document.getElementById('original-price');
            const discountBadgeEl = document.getElementById('discount-badge');
            
            if (currentPriceEl) {
                currentPriceEl.textContent = `₹${(variant.salePrice || 0).toFixed(2)}`;
            }
            
            if (originalPriceEl && discountBadgeEl) {
                if (variant.varientPrice && variant.varientPrice > variant.salePrice) {
                    originalPriceEl.textContent = `₹${variant.varientPrice.toFixed(2)}`;
                    originalPriceEl.style.display = 'inline';
                    
                    const discountPercent = Math.round(((variant.varientPrice - variant.salePrice) / variant.varientPrice) * 100);
                    discountBadgeEl.textContent = `${discountPercent}% OFF`;
                    discountBadgeEl.style.display = 'inline';
                } else {
                    originalPriceEl.style.display = 'none';
                    discountBadgeEl.style.display = 'none';
                }
            }
            
            // Update stock display
            const stockStatusEl = document.getElementById('stock-status');
            const stockQuantityEl = document.getElementById('stock-quantity');
            const addToCartBtn = document.getElementById('add-to-cart-btn');
            const buyNowBtn = document.getElementById('buy-now-btn');
            
            if (stockStatusEl) {
                if (variant.varientquatity > 0) {
                    stockStatusEl.innerHTML = '<i class="fas fa-check-circle"></i> In Stock';
                    stockStatusEl.className = 'in-stock';
                    
                    if (addToCartBtn) addToCartBtn.disabled = false;
                    if (buyNowBtn) buyNowBtn.disabled = false;
                    
                    if (stockQuantityEl) {
                        if (variant.varientquatity <= 5) {
                            stockQuantityEl.textContent = `Only ${variant.varientquatity} left!`;
                            stockQuantityEl.style.display = 'inline';
                        } else {
                            stockQuantityEl.style.display = 'none';
                        }
                    }
                } else {
                    stockStatusEl.innerHTML = '<i class="fas fa-times-circle"></i> Out of Stock';
                    stockStatusEl.className = 'out-of-stock';
                    
                    if (stockQuantityEl) stockQuantityEl.style.display = 'none';
                    if (addToCartBtn) addToCartBtn.disabled = true;
                    if (buyNowBtn) buyNowBtn.disabled = true;
                }
            }
            
            // Reset quantity to 1
            const quantityInput = document.getElementById('quantity');
            if (quantityInput) {
                quantityInput.value = 1;
                const maxQuantity = variant.varientquatity > 0 ? Math.min(variant.varientquatity, 10) : 0;
                quantityInput.setAttribute('max', maxQuantity);
                updateQuantityButtons();
            }
        }
        
        // Update quantity buttons state
        function updateQuantityButtons() {
            const quantityInput = document.getElementById('quantity');
            const decrementBtn = document.getElementById('decrement-btn');
            const incrementBtn = document.getElementById('increment-btn');
            
            if (!quantityInput || !decrementBtn || !incrementBtn) return;
            
            const currentValue = parseInt(quantityInput.value) || 1;
            const maxQuantity = parseInt(quantityInput.getAttribute('max')) || 10;
            
            decrementBtn.disabled = currentValue <= 1;
            incrementBtn.disabled = currentValue >= maxQuantity || maxQuantity === 0;
        }
        
        // Increment quantity
        function incrementQuantity() {
            const quantityInput = document.getElementById('quantity');
            if (!quantityInput) return;
            
            const currentValue = parseInt(quantityInput.value) || 1;
            const maxQuantity = parseInt(quantityInput.getAttribute('max')) || 10;
            
            if (currentValue < maxQuantity) {
                quantityInput.value = currentValue + 1;
                updateQuantityButtons();
            } else {
                showToast('Maximum quantity reached', 'danger');
            }
        }
        
        // Decrement quantity
        function decrementQuantity() {
            const quantityInput = document.getElementById('quantity');
            if (!quantityInput) return;
            
            const currentValue = parseInt(quantityInput.value) || 1;
            
            if (currentValue > 1) {
                quantityInput.value = currentValue - 1;
                updateQuantityButtons();
            }
        }
        
        // Add to cart
        async function addToCart() {
            const form = document.getElementById('add-to-cart-form');
            if (!form) return;
            
            const productId = form.getAttribute('data-product-id');
            const quantity = form.querySelector('#quantity').value;
            const size = form.querySelector('input[name="size"]:checked')?.value;
            const color = form.querySelector('input[name="color"]:checked')?.value;
            
            const addToCartBtn = document.getElementById('add-to-cart-btn');
            if (addToCartBtn) {
                addToCartBtn.disabled = true;
                addToCartBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Adding...';
            }
            
            try {
                const response = await fetch('/cart/add', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ productId, quantity, size, color }),
                    credentials: 'include',
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast(result.message || 'Added to cart successfully', 'success');
                    
                    // Update cart count if available
                    if (typeof updateCartCount === 'function') {
                        updateCartCount(result.cartCount);
                    }
                } else {
                    showToast(result.message || 'Failed to add to cart', 'danger');
                    
                    // Redirect to login if unauthorized
                    if (response.status === 401) {
                        setTimeout(() => {
                            window.location.href = '/login?redirect=' + encodeURIComponent(window.location.pathname);
                        }, 2000);
                    }
                }
            } catch (error) {
                console.error('Error adding to cart:', error);
                showToast('An error occurred. Please try again.', 'danger');
            } finally {
                if (addToCartBtn) {
                    addToCartBtn.disabled = false;
                    addToCartBtn.innerHTML = '<i class="fas fa-shopping-cart me-2"></i> Add to Cart';
                }
            }
        }
        
        // Buy now
        async function buyNow() {
            const form = document.getElementById('add-to-cart-form');
            if (!form) return;
            
            const productId = form.getAttribute('data-product-id');
            const quantity = form.querySelector('#quantity').value;
            const size = form.querySelector('input[name="size"]:checked')?.value;
            const color = form.querySelector('input[name="color"]:checked')?.value;
            
            const buyNowBtn = document.getElementById('buy-now-btn');
            if (buyNowBtn) {
                buyNowBtn.disabled = true;
                buyNowBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...';
            }
            
            try {
                const response = await fetch('/cart/add', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ productId, quantity, size, color, buyNow: true }),
                    credentials: 'include',
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Redirect to checkout
                    window.location.href = '/checkout';
                } else {
                    showToast(result.message || 'Failed to proceed to checkout', 'danger');
                    
                    // Redirect to login if unauthorized
                    if (response.status === 401) {
                        setTimeout(() => {
                            window.location.href = '/login?redirect=' + encodeURIComponent(window.location.pathname);
                        }, 2000);
                    }
                }
            } catch (error) {
                console.error('Error in buy now:', error);
                showToast('An error occurred. Please try again.', 'danger');
            } finally {
                if (buyNowBtn) {
                    buyNowBtn.disabled = false;
                    buyNowBtn.innerHTML = '<i class="fas fa-bolt me-2"></i> Buy Now';
                }
            }
        }
        
        // Add to wishlist
        async function addToWishlist(productId) {
            const wishlistBtn = document.getElementById('wishlist-btn');
            if (wishlistBtn) {
                wishlistBtn.disabled = true;
                wishlistBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';
            }
            
            try {
                const response = await fetch('/addTowhislist', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ productId }),
                    credentials: 'include',
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast(result.message || 'Added to wishlist', 'success');
                    
                    // Update wishlist button
                    if (wishlistBtn) {
                        wishlistBtn.innerHTML = '<i class="fas fa-heart"></i> Added to Wishlist';
                        wishlistBtn.classList.add('text-danger');
                    }
                } else {
                    showToast(result.message || 'Failed to add to wishlist', 'danger');
                    
                    // Redirect to login if unauthorized
                    if (response.status === 401) {
                        setTimeout(() => {
                            window.location.href = '/login?redirect=' + encodeURIComponent(window.location.pathname);
                        }, 2000);
                    }
                }
            } catch (error) {
                console.error('Error adding to wishlist:', error);
                showToast('An error occurred. Please try again.', 'danger');
            } finally {
                if (wishlistBtn) {
                    wishlistBtn.disabled = false;
                    if (!wishlistBtn.classList.contains('text-danger')) {
                        wishlistBtn.innerHTML = '<i class="far fa-heart"></i> Add to Wishlist';
                    }
                }
            }
        }
        
        // Load reviews
        async function loadReviews(page = 1) {
            const reviewsContainer = document.getElementById('reviews-container');
            const paginationContainer = document.getElementById('reviews-pagination');
            const loadingElement = document.getElementById('reviews-loading');
            
            if (!reviewsContainer) return;
            
            try {
                const productId = document.querySelector('[data-product-id]')?.getAttribute('data-product-id');
                if (!productId) {
                    throw new Error('Product ID not found');
                }
                
                const response = await fetch(`/api/reviews/reload/${productId}?page=${page}&limit=5`);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                
                if (!data.success) {
                    throw new Error(data.message || 'Failed to load reviews');
                }
                
                // Hide loading indicator
                if (loadingElement) {
                    loadingElement.style.display = 'none';
                }
                
                // Update review summary
                updateReviewSummary(data.reviewStats);
                
                // Display reviews or no reviews message
                if (data.reviews && data.reviews.length > 0) {
                    const reviewsHtml = data.reviews.map(review => createReviewHtml(review)).join('');
                    reviewsContainer.innerHTML = reviewsHtml;
                    
                    // Add pagination
                    if (paginationContainer) {
                        paginationContainer.innerHTML = createPaginationHtml(data.pagination);
                        
                        // Add event listeners to pagination buttons
                        const pageLinks = paginationContainer.querySelectorAll('.page-link');
                        pageLinks.forEach(link => {
                            link.addEventListener('click', function(e) {
                                e.preventDefault();
                                const pageNum = parseInt(this.getAttribute('data-page'));
                                loadReviews(pageNum);
                                
                                // Scroll to reviews section
                                document.querySelector('.reviews-section').scrollIntoView({ behavior: 'smooth' });
                            });
                        });
                    }
                } else {
                    reviewsContainer.innerHTML = `
                        <div class="text-center py-5">
                            <i class="far fa-comment-dots fa-3x text-muted mb-3"></i>
                            <h4>No Reviews Yet</h4>
                            <p class="text-muted">Be the first to review this product</p>
                            <button class="btn btn-primary mt-3" onclick="openReviewForm()">
                                <i class="fas fa-pen me-2"></i> Write a Review
                            </button>
                        </div>
                    `;
                    
                    if (paginationContainer) {
                        paginationContainer.innerHTML = '';
                    }
                }
                
                // Add event listeners to review elements
                setupReviewEventListeners();
            } catch (error) {
                console.error('Error loading reviews:', error);
                reviewsContainer.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-circle me-2"></i> An error occurred while loading reviews. Please try again.
                        <button class="btn btn-sm btn-danger ms-3" onclick="loadReviews(1)">Retry</button>
                    </div>
                `;
                
                if (loadingElement) {
                    loadingElement.style.display = 'none';
                }
            }
        }
        
        // Update review summary
        function updateReviewSummary(reviewStats) {
            if (!reviewStats) return;
            
            // Update average rating
            const averageRatingEl = document.getElementById('average-rating-value');
            if (averageRatingEl) {
                averageRatingEl.textContent = reviewStats.average.toFixed(1);
            }
            
            // Update rating stars
            const ratingStarsEl = document.getElementById('rating-stars-large');
            if (ratingStarsEl) {
                let starsHtml = '';
                for (let i = 0; i < 5; i++) {
                    if (i < Math.floor(reviewStats.average)) {
                        starsHtml += '<i class="fas fa-star"></i>';
                    } else if (i < reviewStats.average) {
                        starsHtml += '<i class="fas fa-star-half-alt"></i>';
                    } else {
                        starsHtml += '<i class="far fa-star"></i>';
                    }
                }
                ratingStarsEl.innerHTML = starsHtml;
            }
            
            // Update total reviews
            const totalReviewsEl = document.getElementById('total-reviews');
            if (totalReviewsEl) {
                totalReviewsEl.textContent = `Based on ${reviewStats.count} review${reviewStats.count !== 1 ? 's' : ''}`;
            }
            
            // Update rating bars
            for (let i = 1; i <= 5; i++) {
                const barEl = document.getElementById(`rating-bar-${i}`);
                const percentEl = document.getElementById(`rating-percent-${i}`);
                
                if (barEl && percentEl) {
                    const percentage = reviewStats.distribution[i]?.percentage || 0;
                    barEl.style.width = `${percentage}%`;
                    percentEl.textContent = `${percentage}%`;
                }
            }
        }
        
        // Create HTML for a review
        function createReviewHtml(review) {
            const date = new Date(review.createdAt).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            
            // Generate stars HTML
            let starsHtml = '';
            for (let i = 0; i < 5; i++) {
                if (i < review.rating) {
                    starsHtml += '<i class="fas fa-star"></i>';
                } else {
                    starsHtml += '<i class="far fa-star"></i>';
                }
            }
            
            // Generate review images HTML if available
            let imagesHtml = '';
            if (review.images && review.images.length > 0) {
                imagesHtml = `
                    <div class="review-images">
                        ${review.images.map((image, index) => `
                            <div class="review-image">
                                <img src="${typeof image === 'string' ? image : image.url}" alt="Review image" onclick="previewImage('${typeof image === 'string' ? image : image.url}')">
                            </div>
                        `).join('')}
                    </div>
                `;
            }
            
            // Check if the current user has already marked this review as helpful
            const isHelpfulDisabled = review.userHasMarkedHelpful;
            
            return `
                <div class="review-card" data-review-id="${review._id}">
                    <div class="review-header">
                        <div class="reviewer-info">
                            <div class="reviewer-avatar">
                                <img src="${review.user.profileImage || '/images/default-avatar.jpg'}" alt="${review.user.fullname || 'User'}" onerror="this.src='/images/default-avatar.jpg'">
                            </div>
                            <div>
                                <div class="reviewer-name">${review.user.fullname || 'Anonymous'}</div>
                                <div class="review-date">${date}</div>
                            </div>
                        </div>
                        <div class="review-rating">
                            ${starsHtml}
                        </div>
                    </div>
                    <h4 class="review-title">${review.title || 'Review'}</h4>
                    <div class="review-content">${review.description}</div>
                    ${imagesHtml}
                    <div class="review-footer">
                        <div class="review-helpful">
                            <button class="btn-helpful ${isHelpfulDisabled ? 'text-primary' : ''}" 
                                    onclick="markHelpful('${review._id}')" 
                                    ${isHelpfulDisabled ? 'disabled' : ''}
                                    id="helpful-btn-${review._id}">
                                <i class="${isHelpfulDisabled ? 'fas' : 'far'} fa-thumbs-up"></i> 
                                ${isHelpfulDisabled ? 'Marked Helpful' : 'Helpful'}
                            </button>
                            <span class="helpful-count" id="helpful-count-${review._id}">(${review.helpfulVotes?.length || 0})</span>
                        </div>
                        ${review.isVerified ? `
                        <div class="review-verified">
                            <i class="fas fa-check-circle"></i> Verified Purchase
                        </div>
                        ` : ''}
                    </div>
                </div>
            `;
        }
        
        // Create pagination HTML
        function createPaginationHtml(pagination) {
            if (!pagination || pagination.totalPages <= 1) {
                return '';
            }
            
            let paginationHtml = `
                <nav aria-label="Reviews pagination">
                    <ul class="pagination">
                        <li class="page-item ${pagination.currentPage === 1 ? 'disabled' : ''}">
                            <a class="page-link" href="#" data-page="${pagination.currentPage - 1}" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
            `;
            
            // Generate page numbers
            for (let i = 1; i <= pagination.totalPages; i++) {
                // Show limited page numbers for better UX
                if (
                    i === 1 || 
                    i === pagination.totalPages || 
                    (i >= pagination.currentPage - 1 && i <= pagination.currentPage + 1)
                ) {
                    paginationHtml += `
                        <li class="page-item ${i === pagination.currentPage ? 'active' : ''}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                        </li>
                    `;
                } else if (
                    (i === pagination.currentPage - 2 && pagination.currentPage > 3) ||
                    (i === pagination.currentPage + 2 && pagination.currentPage < pagination.totalPages - 2)
                ) {
                    paginationHtml += `
                        <li class="page-item disabled">
                            <a class="page-link" href="#">...</a>
                        </li>
                    `;
                }
            }
            
            paginationHtml += `
                        <li class="page-item ${pagination.currentPage === pagination.totalPages ? 'disabled' : ''}">
                            <a class="page-link" href="#" data-page="${pagination.currentPage + 1}" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>
            `;
            
            return paginationHtml;
        }
        
        // Setup event listeners for review elements
        function setupReviewEventListeners() {
            // Add event listeners to review images
            const reviewImages = document.querySelectorAll('.review-image img');
            reviewImages.forEach(img => {
                img.addEventListener('click', function() {
                    previewImage(this.src);
                });
            });
        }
        
        // Preview image in modal
        function previewImage(src) {
            const previewImage = document.getElementById('previewImage');
            const modal = new bootstrap.Modal(document.getElementById('imagePreviewModal'));
            
            if (previewImage) {
                previewImage.src = src;
            }
            
            modal.show();
        }
        
        // Open review form
        function openReviewForm() {
            // Check if user is logged in
            fetch('/api/check-auth')
                .then(response => response.json())
                .then(data => {
                    if (data.authenticated) {
                        // Show review modal
                        const modal = new bootstrap.Modal(document.getElementById('reviewModal'));
                        modal.show();
                    } else {
                        // Redirect to login
                        showToast('Please log in to write a review', 'warning');
                        setTimeout(() => {
                            window.location.href = '/login?redirect=' + encodeURIComponent(window.location.pathname);
                        }, 2000);
                    }
                })
                .catch(error => {
                    console.error('Error checking authentication:', error);
                    showToast('An error occurred. Please try again.', 'danger');
                });
        }
        
        // Submit review
        async function submitReview() {
            const form = document.getElementById('review-form');
            if (!form) return;
            
            const rating = form.querySelector('input[name="rating"]:checked')?.value;
            const title = form.querySelector('#review-title').value;
            const description = form.querySelector('#review-content').value;
            const orderItemId = form.querySelector('#orderItemId').value;
            const imagesInput = form.querySelector('#review-images');
            
            // Validate form
            if (!rating) {
                showToast('Please select a rating', 'warning');
                return;
            }
            
            if (!title.trim()) {
                showToast('Please enter a review title', 'warning');
                return;
            }
            
            if (!description.trim()) {
                showToast('Please enter your review', 'warning');
                return;
            }
            
            const submitBtn = document.getElementById('submit-review-btn');
            if (submitBtn) {
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Submitting...';
            }
            
            try {
                // Create form data for file upload
                const formData = new FormData();
                const productId = document.querySelector('[data-product-id]')?.getAttribute('data-product-id');
                
                formData.append('productId', productId);
                formData.append('rating', rating);
                formData.append('title', title);
                formData.append('description', description);
                
                if (orderItemId) {
                    formData.append('orderItemId', orderItemId);
                }
                
                // Add images if any
                if (imagesInput && imagesInput.files.length > 0) {
                    for (let i = 0; i < imagesInput.files.length; i++) {
                        formData.append('images', imagesInput.files[i]);
                    }
                }
                
                const response = await fetch('/review/submit', {
                    method: 'POST',
                    body: formData,
                    credentials: 'include',
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast(result.message || 'Review submitted successfully', 'success');
                    
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('reviewModal'));
                    if (modal) {
                        modal.hide();
                    }
                    
                    // Reset form
                    form.reset();
                    
                    // Reload reviews
                    loadReviews(1);
                    
                    // Update product rating if available
                    if (result.newRating) {
                        updateReviewSummary(result.newRating);
                    }
                } else {
                    showToast(result.message || 'Failed to submit review', 'danger');
                }
            } catch (error) {
                console.error('Error submitting review:', error);
                showToast('An error occurred. Please try again.', 'danger');
            } finally {
                if (submitBtn) {
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = 'Submit Review';
                }
            }
        }
        
        // Mark review as helpful
        async function markHelpful(reviewId) {
            try {
                const response = await fetch('/api/reviews/helpful', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ reviewId }),
                    credentials: 'include',
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast(result.message || 'Marked as helpful', 'success');
                    
                    // Update helpful button and count
                    const helpfulBtn = document.getElementById(`helpful-btn-${reviewId}`);
                    const helpfulCount = document.getElementById(`helpful-count-${reviewId}`);
                    
                    if (helpfulBtn) {
                        helpfulBtn.disabled = true;
                        helpfulBtn.classList.add('text-primary');
                        helpfulBtn.innerHTML = '<i class="fas fa-thumbs-up"></i> Marked Helpful';
                    }
                    
                    if (helpfulCount) {
                        helpfulCount.textContent = `(${result.helpfulCount || 0})`;
                    }
                } else {
                    showToast(result.message || 'Failed to mark as helpful', 'danger');
                    
                    // Redirect to login if unauthorized
                    if (response.status === 401) {
                        setTimeout(() => {
                            window.location.href = '/login?redirect=' + encodeURIComponent(window.location.pathname);
                        }, 2000);
                    }
                }
            } catch (error) {
                console.error('Error marking review as helpful:', error);
                showToast('An error occurred. Please try again.', 'danger');
            }
        }
        
        // Show toast notification
        function showToast(message, type = 'success') {
            const toastContainer = document.querySelector('.toast-container');
            if (!toastContainer) return;
            
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : type === 'warning' ? 'warning' : 'danger'} border-0`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'warning' ? 'exclamation-triangle' : 'exclamation-circle'} me-2"></i>
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;
            
            toastContainer.appendChild(toast);
            
            const bsToast = new bootstrap.Toast(toast, {
                autohide: true,
                delay: 5000
            });
            
            bsToast.show();
            
            // Remove toast after it's hidden
            toast.addEventListener('hidden.bs.toast', function() {
                toast.remove();
            });
        }
    </script>
</body>
</html>