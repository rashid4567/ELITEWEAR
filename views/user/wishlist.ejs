<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Elite Wear | My Wishlist</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/userStyle/whislist.css">
</head>
<body>
  <div class="app-container">
    <!-- Include Header Partial -->
    <%- include("../partials/user/header") %>

    <!-- Include Sidebar Partial -->
    <%- include("../partials/user/profileSidebar") %>

    <!-- Main Content -->
    <main class="main-content">
      <div class="page-header">
        <div class="header-content">
          <div class="header-title">
            <div class="header-title-icon">
              <i class="fas fa-heart"></i>
            </div>
            <div>
              <h1>My Wishlist</h1>
              <p>Items you've saved for later <span class="wishlist-count"><%= products.length %> items</span></p>
            </div>
          </div>
        </div>
        
        <div class="header-actions">
          <button class="theme-toggle" id="themeToggle" aria-label="Toggle dark mode">
            <i class="fas fa-sun sun"></i>
            <i class="fas fa-moon moon"></i>
            <span class="toggle-circle"></span>
          </button>
          
          <% if(products.length > 0) { %>
            <button class="btn-empty-wishlist" id="emptyWishlistBtn">
              <i class="fas fa-trash-alt"></i>
              <span>Empty Wishlist</span>
            </button>
          <% } %>
        </div>
      </div>

      <% if(products.length > 0) { %>
        <div class="wishlist-grid" id="wishlistItems">
          <% products.forEach((product, index) => { %>
            <div class="wishlist-item" data-product-id="<%= product._id %>" data-index="<%= index %>">
              <div class="wishlist-item-image">
                <% if (product.offer) { %>
                  <div class="product-badge badge-discount"><%= product.offer %>% OFF</div>
                <% } else if (product.isNew) { %>
                  <div class="product-badge badge-new">NEW</div>
                <% } %>
                
                <!-- Update the image element to use direct URL and better error handling -->
                <% if (product.images && product.images.length > 0 && product.images[0].url) { %>
                  <img 
                    src="<%= product.images[0].url %>" 
                    alt="<%= product.name || 'Product Image' %>"
                    loading="lazy"
                    style="max-width: 100%; max-height: 100%; object-fit: contain; display: block;"
                    onerror="this.onerror=null; console.error('Image failed to load:', this.src); this.style.display='none'; if(!this.parentNode.querySelector('.image-placeholder')){var p=document.createElement('div');p.className='image-placeholder';p.innerHTML='<i class=\'fas fa-image\'></i>';this.parentNode.appendChild(p);}"
                  />
                <% } else { %>
                  <div class="image-placeholder">
                    <i class="fas fa-image"></i>
                  </div>
                <% } %>
                
                <button class="wishlist-item-remove" data-product-id="<%= product._id %>" aria-label="Remove from wishlist">
                  <i class="fas fa-times"></i>
                </button>
              </div>
              
              <div class="wishlist-item-content">
                <div class="wishlist-item-brand"><%= product.brand || 'Elite Wear' %></div>
                <h3 class="wishlist-item-title"><%= product.name || 'Unnamed Product' %></h3>
                
                <div class="wishlist-item-price">
                  <span class="current-price">₹<%= product.variants && product.variants[0] && product.variants[0].salePrice ? product.variants[0].salePrice.toFixed(0) : 'N/A' %></span>
                  <% if (product.variants && product.variants[0] && product.variants[0].originalPrice && product.variants[0].originalPrice > product.variants[0].salePrice) { %>
                    <span class="original-price">₹<%= product.variants[0].originalPrice.toFixed(0) %></span>
                  <% } %>
                </div>
                
                <% if (product.variants && product.variants.length > 0) { %>
                  <div class="wishlist-item-size">
                    <label for="size-select-<%= product._id %>" class="size-label">Select Size:</label>
                    <select class="size-select" id="size-select-<%= product._id %>" data-product-id="<%= product._id %>">
                      <option value="">Choose a size</option>
                      <% product.variants.forEach(variant => { %>
                        <option value="<%= variant.size %>"><%= variant.size %></option>
                      <% }) %>
                    </select>
                  </div>
                <% } %>
                
                <div class="wishlist-item-actions">
                  <button class="btn-add-to-cart" data-product-id="<%= product._id %>">
                    <i class="fas fa-shopping-cart"></i>
                    <span>Add to Cart</span>
                  </button>
                  <a href="/productdetails/<%= product._id %>" class="btn-view-details" aria-label="View product details">
                    <i class="fas fa-eye"></i>
                  </a>
                </div>
              </div>
            </div>
          <% }) %>
        </div>
      <% } else { %>
        <div class="empty-state">
          <div class="empty-state-icon">
            <i class="far fa-heart"></i>
          </div>
          <h2>Your wishlist is empty</h2>
          <p>Save items you love and find them all in one place</p>
          <a href="/allproduct" class="btn-explore">
            <i class="fas fa-arrow-left"></i>
            <span>Explore Products</span>
          </a>
        </div>
      <% } %>
    </main>
  </div>

  <!-- Toast Container -->
  <div class="toast-container" id="toastContainer"></div>

  <!-- Confirm Empty Modal -->
  <div class="modal-backdrop" id="confirmEmptyModal">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">Clear Wishlist</h3>
        <button class="modal-close" id="modalClose" aria-label="Close modal">
          <i class="fas fa-times"></i>
        </button>
      </div>
      <div class="modal-body">
        <div class="modal-icon">
          <i class="fas fa-trash-alt"></i>
        </div>
        <p class="modal-message">Are you sure you want to remove all items?</p>
        <p class="modal-description">This action cannot be undone</p>
      </div>
      <div class="modal-footer">
        <button class="btn-cancel" id="cancelEmptyWishlist">Cancel</button>
        <button class="btn-confirm" id="confirmEmptyWishlist">Yes, Clear All</button>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Animate wishlist items on load
      document.querySelectorAll('.wishlist-item').forEach(item => {
        const index = parseInt(item.getAttribute('data-index'));
        setTimeout(() => {
          item.classList.add('fade-in');
        }, index * 100);
      });
      
      // Theme Toggle
      const themeToggle = document.getElementById('themeToggle');
      
      // Check for saved theme
      const savedTheme = localStorage.getItem('theme');
      if (savedTheme === 'dark') {
        document.documentElement.setAttribute('data-theme', 'dark');
      } else if (!savedTheme && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        document.documentElement.setAttribute('data-theme', 'dark');
      }
      
      themeToggle.addEventListener('click', function() {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
      });
      
      // Enhanced Toast Notification System
      function showToast({ title, message, type = 'success', duration = 5000, productImage = null }) {
        const toastContainer = document.getElementById('toastContainer');
        
        // Create toast element
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        
        // Create toast content
        let toastContent = `
          <div class="toast-border"></div>
          <div class="toast-body">
            <div class="toast-icon">
              <i class="fas fa-${getIconForType(type)}"></i>
            </div>
            <div class="toast-content">
              <div class="toast-title">${title}</div>
              <div class="toast-message">${message}</div>
            </div>
            <button class="toast-close" aria-label="Close notification">
              <i class="fas fa-times"></i>
            </button>
          </div>
          <div class="toast-progress">
            <div class="toast-progress-bar"></div>
          </div>
        `;
        
        toast.innerHTML = toastContent;
        
        // Add to container
        toastContainer.appendChild(toast);
        
        // Set animation duration based on toast duration
        const progressBar = toast.querySelector('.toast-progress-bar');
        progressBar.style.animationDuration = `${duration / 1000}s`;
        
        // Auto remove after duration
        const timeoutId = setTimeout(() => {
          removeToast(toast);
        }, duration);
        
        // Close button
        const closeBtn = toast.querySelector('.toast-close');
        closeBtn.addEventListener('click', function() {
          clearTimeout(timeoutId);
          removeToast(toast);
        });
        
        // Add ripple effect to close button
        closeBtn.addEventListener('mousedown', createRippleEffect);
        
        // Return the toast element
        return toast;
      }
      
      // Helper function to get icon based on toast type
      function getIconForType(type) {
        switch(type) {
          case 'success': return 'check-circle';
          case 'error': return 'exclamation-circle';
          case 'warning': return 'exclamation-triangle';
          case 'info': return 'info-circle';
          default: return 'bell';
        }
      }
      
      // Function to remove toast with animation
      function removeToast(toast) {
        toast.classList.add('toast-hide');
        
        setTimeout(() => {
          if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
          }
        }, 500);
      }
      
      // Ripple Effect for buttons
      function createRippleEffect(event) {
        const button = event.currentTarget;
        
        const circle = document.createElement('span');
        const diameter = Math.max(button.clientWidth, button.clientHeight);
        const radius = diameter / 2;
        
        circle.style.width = circle.style.height = `${diameter}px`;
        circle.style.left = `${event.clientX - button.getBoundingClientRect().left - radius}px`;
        circle.style.top = `${event.clientY - button.getBoundingClientRect().top - radius}px`;
        circle.classList.add('ripple');
        
        const ripple = button.querySelector('.ripple');
        if (ripple) {
          ripple.remove();
        }
        
        button.appendChild(circle);
      }
      
      // Add ripple effect to all buttons
      document.querySelectorAll('.btn-add-to-cart, .btn-view-details, .btn-empty-wishlist, .btn-cancel, .btn-confirm, .btn-explore').forEach(button => {
        button.addEventListener('mousedown', createRippleEffect);
      });
      
      // Empty Wishlist Modal
      const emptyWishlistBtn = document.getElementById('emptyWishlistBtn');
      const confirmEmptyModal = document.getElementById('confirmEmptyModal');
      const modalClose = document.getElementById('modalClose');
      const cancelEmptyWishlist = document.getElementById('cancelEmptyWishlist');
      const confirmEmptyWishlist = document.getElementById('confirmEmptyWishlist');
      
      if (emptyWishlistBtn) {
        emptyWishlistBtn.addEventListener('click', function() {
          confirmEmptyModal.classList.add('show');
          document.body.style.overflow = 'hidden';
        });
      }
      
      function closeModal() {
        confirmEmptyModal.classList.remove('show');
        document.body.style.overflow = '';
      }
      
      modalClose.addEventListener('click', closeModal);
      cancelEmptyWishlist.addEventListener('click', closeModal);
      
      // Empty Wishlist Functionality
      confirmEmptyWishlist.addEventListener('click', async function() {
        // Add loading state
        this.disabled = true;
        this.innerHTML = '<span class="loading-spinner"></span>';
        
        try {
          const response = await fetch('/wishlist/empty', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include'
          });
          
          const data = await response.json();
          
          if (data.success) {
            showToast({
              title: 'Wishlist Cleared',
              message: 'All items have been removed from your wishlist',
              type: 'success'
            });
            
            // Clear wishlist UI
            const wishlistItems = document.getElementById('wishlistItems');
            const mainContent = document.querySelector('.main-content');
            
            if (wishlistItems) {
              // Replace with empty state
              const emptyWishlist = document.createElement('div');
              emptyWishlist.className = 'empty-state';
              emptyWishlist.innerHTML = `
                <div class="empty-state-icon">
                  <i class="far fa-heart"></i>
                </div>
                <h2>Your wishlist is empty</h2>
                <p>Save items you love and find them all in one place</p>
                <a href="/allproduct" class="btn-explore">
                  <i class="fas fa-arrow-left"></i>
                  <span>Explore Products</span>
                </a>
              `;
              
              // Remove empty wishlist button
              if (emptyWishlistBtn) {
                emptyWishlistBtn.remove();
              }
              
              // Replace content
              wishlistItems.remove();
              
              // Find the page header
              const pageHeader = mainContent.querySelector('.page-header');
              
              // Update wishlist count in header
              const wishlistCount = pageHeader.querySelector('.wishlist-count');
              if (wishlistCount) {
                wishlistCount.textContent = '0 items';
              }
              
              // Insert the empty state after the page header
              if (pageHeader) {
                pageHeader.insertAdjacentElement('afterend', emptyWishlist);
              } else {
                mainContent.appendChild(emptyWishlist);
              }
            }
          } else {
            showToast({
              title: 'Error',
              message: data.message || 'Failed to empty wishlist',
              type: 'error'
            });
          }
        } catch (error) {
          console.error('Error emptying wishlist:', error);
          showToast({
            title: 'Error',
            message: 'An error occurred while emptying your wishlist',
            type: 'error'
          });
        } finally {
          closeModal();
          this.disabled = false;
          this.innerHTML = 'Yes, Clear All';
        }
      });
      
      // Remove from Wishlist
      document.querySelectorAll('.wishlist-item-remove').forEach(button => {
        button.addEventListener('click', async function() {
          const productId = this.getAttribute('data-product-id');
          const wishlistItem = this.closest('.wishlist-item');
          const productName = wishlistItem.querySelector('.wishlist-item-title').textContent.trim();
          const productPrice = wishlistItem.querySelector('.current-price').textContent;
          
          // Get product image if available
          let productImageSrc = null;
          const productImage = wishlistItem.querySelector('.wishlist-item-image img');
          if (productImage && productImage.style.display !== 'none') {
            productImageSrc = productImage.src;
          }
          
          // Add loading state
          this.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
          this.disabled = true;
          
          try {
            const response = await fetch('/wishlist/remove', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ productId }),
              credentials: 'include'
            });
            
            const data = await response.json();
            
            if (data.success) {
              // Create a detailed toast message
              showToast({
                title: 'Item Removed from Wishlist',
                message: `"${productName}" (${productPrice}) has been successfully removed from your wishlist.`,
                type: 'success',
                productImage: productImageSrc
              });
              
              // Update wishlist count in header
              const wishlistCount = document.querySelector('.wishlist-count');
              if (wishlistCount) {
                wishlistCount.textContent = `${data.wishlistCount} items`;
              }
              
              // Update sidebar badge
              const wishlistBadge = document.querySelector('.sidebar-menu-link.active .sidebar-menu-badge');
              if (wishlistBadge) {
                wishlistBadge.textContent = data.wishlistCount;
              }
              
              // Remove item with animation
              wishlistItem.style.opacity = '0';
              wishlistItem.style.transform = 'translateY(20px)';
              
              setTimeout(() => {
                wishlistItem.remove();
                
                // Check if wishlist is empty
                if (data.wishlistCount === 0) {
                  const wishlistItems = document.getElementById('wishlistItems');
                  const mainContent = document.querySelector('.main-content');
                  
                  // Replace with empty state
                  const emptyWishlist = document.createElement('div');
                  emptyWishlist.className = 'empty-state';
                  emptyWishlist.innerHTML = `
                    <div class="empty-state-icon">
                      <i class="far fa-heart"></i>
                    </div>
                    <h2>Your wishlist is empty</h2>
                    <p>Save items you love and find them all in one place</p>
                    <a href="/allproduct" class="btn-explore">
                      <i class="fas fa-arrow-left"></i>
                      <span>Explore Products</span>
                    </a>
                  `;
                  
                  // Remove empty wishlist button
                  if (emptyWishlistBtn) {
                    emptyWishlistBtn.remove();
                  }
                  
                  // Replace content
                  wishlistItems.remove();
                  
                  // Find the page header
                  const pageHeader = mainContent.querySelector('.page-header');
                  
                  // Insert the empty state after the page header
                  if (pageHeader) {
                    pageHeader.insertAdjacentElement('afterend', emptyWishlist);
                  } else {
                    mainContent.appendChild(emptyWishlist);
                  }
                }
              }, 300);
            } else {
              showToast({
                title: 'Error',
                message: data.message || 'Failed to remove item from wishlist',
                type: 'error'
              });
              this.innerHTML = '<i class="fas fa-times"></i>';
              this.disabled = false;
            }
          } catch (error) {
            console.error('Error removing from wishlist:', error);
            showToast({
              title: 'Error',
              message: 'An error occurred while removing the item from wishlist',
              type: 'error'
            });
            this.innerHTML = '<i class="fas fa-times"></i>';
            this.disabled = false;
          }
        });
      });
      
      // Size Selection
      document.querySelectorAll('.size-select').forEach(select => {
        select.addEventListener('change', function() {
          const productId = this.getAttribute('data-product-id');
          const selectedSize = this.value;
          const wishlistItem = this.closest('.wishlist-item');
          const productName = wishlistItem.querySelector('.wishlist-item-title').textContent.trim();
          
          if (selectedSize) {
            showToast({
              title: 'Size Selected',
              message: `Size ${selectedSize} has been selected for "${productName}". You can now add it to your cart.`,
              type: 'info'
            });
          }
        });
      });
      
      // Add to Cart
      document.querySelectorAll('.btn-add-to-cart').forEach(button => {
        button.addEventListener('click', async function() {
          const productId = this.getAttribute('data-product-id');
          const sizeSelect = document.getElementById(`size-select-${productId}`);
          const size = sizeSelect ? sizeSelect.value : null;
          const wishlistItem = this.closest('.wishlist-item');
          const productName = wishlistItem.querySelector('.wishlist-item-title').textContent.trim();
          const productPrice = wishlistItem.querySelector('.current-price').textContent;
          
          if (sizeSelect && !size) {
            showToast({
              title: 'Size Required',
              message: 'Please select a size before adding this item to your cart',
              type: 'warning'
            });
            
            // Highlight the size select
            sizeSelect.classList.add('highlight');
            sizeSelect.focus();
            
            // Remove highlight after 3 seconds
            setTimeout(() => {
              sizeSelect.classList.remove('highlight');
            }, 3000);
            
            return;
          }
          
          // Add loading state
          const originalText = this.innerHTML;
          this.innerHTML = '<span class="loading-spinner"></span>';
          this.disabled = true;
          
          try {
            const response = await fetch('/add-to-cart-remove-wishlist', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ productId, quantity: 1, size }),
              credentials: 'include'
            });
            
            const data = await response.json();
            
            if (data.success) {
              showToast({
                title: 'Added to Cart',
                message: `"${productName}" (${productPrice}) has been added to your cart and removed from wishlist`,
                type: 'success'
              });
              
              // Update wishlist count in header
              const wishlistCount = document.querySelector('.wishlist-count');
              if (wishlistCount) {
                wishlistCount.textContent = `${data.wishlistCount} items`;
              }
              
              // Update sidebar badge
              const wishlistBadge = document.querySelector('.sidebar-menu-link.active .sidebar-menu-badge');
              if (wishlistBadge) {
                wishlistBadge.textContent = data.wishlistCount;
              }
              
              // Remove item with animation
              wishlistItem.style.opacity = '0';
              wishlistItem.style.transform = 'translateY(20px)';
              
              setTimeout(() => {
                wishlistItem.remove();
                
                // Check if wishlist is empty
                if (data.wishlistCount === 0) {
                  const wishlistItems = document.getElementById('wishlistItems');
                  const mainContent = document.querySelector('.main-content');
                  
                  // Replace with empty state
                  const emptyWishlist = document.createElement('div');
                  emptyWishlist.className = 'empty-state';
                  emptyWishlist.innerHTML = `
                    <div class="empty-state-icon">
                      <i class="far fa-heart"></i>
                    </div>
                    <h2>Your wishlist is empty</h2>
                    <p>Save items you love and find them all in one place</p>
                    <a href="/allproduct" class="btn-explore">
                      <i class="fas fa-arrow-left"></i>
                      <span>Explore Products</span>
                    </a>
                  `;
                  
                  // Remove empty wishlist button
                  if (emptyWishlistBtn) {
                    emptyWishlistBtn.remove();
                  }
                  
                  // Replace content
                  wishlistItems.remove();
                  
                  // Find the page header
                  const pageHeader = mainContent.querySelector('.page-header');
                  
                  // Insert the empty state after the page header
                  if (pageHeader) {
                    pageHeader.insertAdjacentElement('afterend', emptyWishlist);
                  } else {
                    mainContent.appendChild(emptyWishlist);
                  }
                }
              }, 300);
            } else {
              showToast({
                title: 'Error',
                message: data.message || 'Failed to add item to cart',
                type: 'error'
              });
              this.innerHTML = originalText;
              this.disabled = false;
            }
          } catch (error) {
            console.error('Error adding to cart:', error);
            showToast({
              title: 'Error',
              message: 'An error occurred while adding the item to cart',
              type: 'error'
            });
            this.innerHTML = originalText;
            this.disabled = false;
          }
        });
      });
      
      // Image handling
      document.querySelectorAll('.wishlist-item-image img').forEach(img => {
        // Set a data attribute to store the original source
        img.setAttribute('data-src', img.src);
        
        // Add load event to ensure image is visible
        img.addEventListener('load', function() {
          console.log('Image loaded successfully:', this.src);
          this.style.display = 'block';
          this.style.opacity = '1';
          
          // Remove any placeholder that might have been added
          const placeholder = this.parentNode.querySelector('.image-placeholder');
          if (placeholder) {
            placeholder.remove();
          }
        });
        
        // Add error event with retry logic
        img.addEventListener('error', function() {
          console.error('Image failed to load:', this.src);
          
          // Try with a different approach - add a timestamp to bypass cache
          const originalSrc = this.getAttribute('data-src');
          if (originalSrc && !originalSrc.includes('?t=')) {
            console.log('Retrying with cache-busting:', originalSrc);
            this.src = originalSrc + '?t=' + new Date().getTime();
          } else {
            // If retry fails, show placeholder
            this.style.display = 'none';
            if (!this.parentNode.querySelector('.image-placeholder')) {
              const placeholder = document.createElement('div');
              placeholder.className = 'image-placeholder';
              placeholder.innerHTML = '<i class="fas fa-image"></i>';
              this.parentNode.appendChild(placeholder);
            }
          }
        });
        
        // Force reload with cache-busting
        const originalSrc = img.getAttribute('data-src');
        if (originalSrc) {
          img.src = originalSrc + '?t=' + new Date().getTime();
        }
      });
    });
  </script>
</body>
</html>
