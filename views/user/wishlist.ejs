<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Elite Wear - Wishlist</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <link rel="stylesheet" href="/userStyle/whislist.css" />
  </head>
  <body>
    <%- include("../partials/user/header") %>

    <div class="container-fluid py-4">
      <div class="row">
        <%- include("../partials/user/profileSidebar") %>

        <div class="col-md-9">
          <div class="wishlist-header">
            <h5 class="fw-semibold">Wishlist (<%= products.length %>)</h5>
            <div>
              <!-- <button class="btn btn-outline-dark btn-sm me-2">
                Move All To Bag
              </button> -->
              <button class="btn btn-danger btn-sm" id="empty-wishlist-btn">
                Empty my Wishlist
              </button>
            </div>
          </div>
          <% if(products.length > 0) { %>
          <div class="row gy-4" id="wishlist-items">
            <% for(let product of products) { %>
            <div
              class="col-sm-12 col-md-6 col-lg-4 wishlist-item"
              data-product-id="<%= product._id %>"
            >
              <div class="product-card">
                <img
                  src="<%= product.images && product.images.length > 0 ? product.images[0].url : '/api/placeholder/300/300' %>"
                  alt="<%= product.name || 'Product Image' %>"
                  class="product-image"
                />
                <h6 class="product-title">
                  <%= product.name || 'Unnamed Product' %>
                </h6>
                <p class="product-price">
                  â‚¹<%= product.variants[0].salePrice?.toFixed(2) || 'N/A' %>
                </p>
                <p class="discount"><%= product.offer || 'No offer' %> off</p>
                <button class="btn btn-add-cart">Add To Cart</button>
                <button
                  class="btn btn-remove-wishlist"
                  data-product-id="<%= product._id %>"
                >
                  <i class="fas fa-trash-alt"></i> Remove
                </button>
              </div>
            </div>
            <% } %>
          </div>
          <% } else { %>
          <p id="empty-wishlist-message" class="text-center">
            No items found in your wishlist.
          </p>
          <div class="text-center mt-3">
            <a href="/allproduct" class="btn btn-dark">Continue Shopping</a>
          </div>
          <% } %>
        </div>
      </div>
    </div>

    <div class="toast-container position-fixed bottom-0 end-0 p-3">
      <div
        id="wishlistToast"
        class="toast"
        role="alert"
        aria-live="assertive"
        aria-atomic="true"
      >
        <div class="toast-header">
          <strong class="me-auto">Wishlist</strong>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="toast"
            aria-label="Close"
          ></button>
        </div>
        <div class="toast-body" id="toastBody"></div>
      </div>
    </div>

    <div
      class="modal fade"
      id="confirmEmptyModal"
      tabindex="-1"
      aria-labelledby="confirmEmptyModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="confirmEmptyModalLabel">
              ARE YOU SURE!!
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            Sure, are you want to clear the wishlist?
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Cancel
            </button>
            <button type="button" class="btn btn-danger" id="confirm-delete">
              Yes, delete
            </button>
          </div>
        </div>
      </div>
    </div>

    <%- include("../partials/user/footer") %>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      const wishlistToast = new bootstrap.Toast(
        document.getElementById("wishlistToast")
      );
    
      const confirmEmptyModal = new bootstrap.Modal(
        document.getElementById("confirmEmptyModal")
      );
    
      function forceRepaint() {
        const container = document.getElementById("wishlist-items");
        if (container) {
          container.style.display = "none";
          container.offsetHeight;
          container.style.display = "";
        }
      }
    
      // Add to Cart functionality
      document.querySelectorAll(".btn-add-cart").forEach((button) => {
        button.addEventListener("click", async function () {
          const productCard = this.closest(".wishlist-item");
          const productId = productCard.getAttribute("data-product-id");
          const toastBody = document.getElementById("toastBody");
    
          if (!productId) {
            console.error("Product ID not found");
            toastBody.textContent = "Error: Product ID missing";
            toastBody.style.color = "red";
            wishlistToast.show();
            return;
          }
    
          try {
            // Step 1: Add to Cart
            const addToCartResponse = await fetch("/cart/add", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                productId: productId,
                quantity: 1, // Default quantity
                size: null, // Adjust if your product requires a size
                color: null, // Adjust if your product requires a color
              }),
              credentials: "include",
            });
    
            const cartData = await addToCartResponse.json();
    
            if (!cartData.success) {
              toastBody.textContent = cartData.message || "Failed to add to cart";
              toastBody.style.color = "red";
              wishlistToast.show();
              return;
            }
    
            // Step 2: Remove from Wishlist
            const removeWishlistResponse = await fetch("/wishlist/remove", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ productId: productId }),
            });
    
            const wishlistData = await removeWishlistResponse.json();
    
            toastBody.textContent = wishlistData.success
              ? "Product added to cart and removed from wishlist"
              : wishlistData.message;
            toastBody.style.color = wishlistData.success ? "green" : "red";
            wishlistToast.show();
    
            if (wishlistData.success) {
              productCard.style.transition = "opacity 0.3s";
              productCard.style.opacity = "0";
              setTimeout(() => {
                productCard.remove();
                console.log("Product card removed from DOM");
    
                const wishlistHeader = document.querySelector(".wishlist-header h5");
                const currentCount = parseInt(
                  wishlistHeader.textContent.match(/\d+/)[0]
                );
                wishlistHeader.textContent = `Wishlist (${currentCount - 1})`;
    
                if (currentCount - 1 === 0) {
                  const wishlistContainer =
                    document.getElementById("wishlist-items");
                  wishlistContainer.outerHTML = `
                    <div id="empty-wishlist-message" class="text-center">
                      <p>No items found in your wishlist.</p>
                      <div class="mt-3">
                        <a href="/allproduct" class="btn btn-dark">Continue Shopping</a>
                      </div>
                    </div>
                  `;
                }
    
                forceRepaint();
              }, 300);
            }
          } catch (error) {
            console.error("Error in add to cart/remove from wishlist:", error);
            toastBody.textContent = "An error occurred";
            toastBody.style.color = "red";
            wishlistToast.show();
          }
        });
      });
    
      // Existing Remove from Wishlist functionality
      document.querySelectorAll(".btn-remove-wishlist").forEach((button) => {
        button.addEventListener("click", async function () {
          const productId = this.getAttribute("data-product-id");
          const productCard = document.querySelector(
            `.wishlist-item[data-product-id="${productId}"]`
          );
          const toastBody = document.getElementById("toastBody");
    
          if (!productCard) {
            console.error("Product card not found for ID:", productId);
            toastBody.textContent = "Error: Product not found";
            toastBody.style.color = "red";
            wishlistToast.show();
            return;
          }
    
          console.log("Removing product ID:", productId);
    
          try {
            const response = await fetch("/wishlist/remove", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ productId: productId }),
            });
    
            const data = await response.json();
            console.log("Server response:", data);
    
            toastBody.textContent = data.message;
            toastBody.style.color = data.success ? "green" : "red";
            wishlistToast.show();
    
            if (data.success) {
              productCard.style.transition = "opacity 0.3s";
              productCard.style.opacity = "0";
              setTimeout(() => {
                productCard.remove();
                console.log("Product card removed from DOM");
    
                const wishlistHeader = document.querySelector(".wishlist-header h5");
                const currentCount = parseInt(
                  wishlistHeader.textContent.match(/\d+/)[0]
                );
                wishlistHeader.textContent = `Wishlist (${currentCount - 1})`;
    
                if (currentCount - 1 === 0) {
                  const wishlistContainer =
                    document.getElementById("wishlist-items");
                  wishlistContainer.outerHTML = `
                    <div id="empty-wishlist-message" class="text-center">
                      <p>No items found in your wishlist.</p>
                      <div class="mt-3">
                        <a href="/allproduct" class="btn btn-dark">Continue Shopping</a>
                      </div>
                    </div>
                  `;
                }
    
                forceRepaint();
              }, 300);
            }
          } catch (error) {
            console.error("Error removing product from wishlist:", error);
            toastBody.textContent = "Failed to remove product";
            toastBody.style.color = "red";
            wishlistToast.show();
          }
        });
      });
    
      // Existing Empty Wishlist functionality
      document
        .getElementById("empty-wishlist-btn")
        .addEventListener("click", function () {
          confirmEmptyModal.show();
        });
    
      document
        .getElementById("confirm-delete")
        .addEventListener("click", async function () {
          const wishlistItems = document.getElementById("wishlist-items");
          const toastBody = document.getElementById("toastBody");
    
          if (!wishlistItems) {
            toastBody.textContent = "Wishlist is already empty";
            toastBody.style.color = "red";
            wishlistToast.show();
            confirmEmptyModal.hide();
            return;
          }
    
          try {
            const response = await fetch("/wishlist/empty", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
            });
    
            const data = await response.json();
            console.log("Empty wishlist response:", data);
    
            toastBody.textContent = data.message;
            toastBody.style.color = data.success ? "green" : "red";
            wishlistToast.show();
    
            if (data.success) {
              const productCards = document.querySelectorAll(".wishlist-item");
              productCards.forEach((card) => {
                card.style.transition = "opacity 0.3s";
                card.style.opacity = "0";
              });
    
              setTimeout(() => {
                wishlistItems.outerHTML = `
                  <div id="empty-wishlist-message" class="text-center">
                    <p>No items found in your wishlist.</p>
                    <div class="mt-3">
                      <a href="/allproduct" class="btn btn-dark">Continue Shopping</a>
                    </div>
                  </div>
                `;
                const wishlistHeader = document.querySelector(".wishlist-header h5");
                wishlistHeader.textContent = "Wishlist (0)";
                forceRepaint();
              }, 300);
            }
          } catch (error) {
            console.error("Error emptying wishlist:", error);
            toastBody.textContent = "Failed to empty wishlist";
            toastBody.style.color = "red";
            wishlistToast.show();
          } finally {
            confirmEmptyModal.hide();
          }
        });
    </script>
  </body>
</html>
