<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Elite Wear - Payment</title>

    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />

    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />

    <link
      href="https://fonts.googleapis.com/css2?family=Outfit:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />

    <link rel="stylesheet" href="https://unpkg.com/aos@next/dist/aos.css" />

    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/swiper@10/swiper-bundle.min.css"
    />

    <link rel="stylesheet" href="/userStyle/header.css" />
    <link rel="stylesheet" href="/userStyle/footer.css" />
    <link rel="stylesheet" href="/userStyle/checkoutPayment.css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  </head>
  <body>

    <div class="preloader">
      <div class="loader"></div>
    </div>

    <div class="scroll-indicator"></div>

    <div class="cursor-glow"></div>
   <div class="loading-overlay" id="loadingOverlay">
      <div class="loading-spinner"></div>
    </div>

    <%- include("../partials/user/header") %>

    <div class="container my-5">
      <div class="checkout-header-wrapper" data-aos="fade-up">
        <h2 class="checkout-header">PAYMENT</h2>
      </div>

      <!-- Progress Bar -->
      <div
        class="checkout-progress-container"
        data-aos="fade-up"
        data-aos-delay="100"
      >
        <div class="checkout-progress">
          <div class="progress-step completed">
            <div class="step-icon">
              <i class="fas fa-shopping-cart"></i>
            </div>
            <div class="step-label">Cart</div>
          </div>
          <div class="progress-connector active"></div>
          <div class="progress-step completed">
            <div class="step-icon">
              <i class="fas fa-map-marker-alt"></i>
            </div>
            <div class="step-label">Delivery</div>
          </div>
          <div class="progress-connector active"></div>
          <div class="progress-step active">
            <div class="step-icon">
              <i class="fas fa-credit-card"></i>
            </div>
            <div class="step-label">Payment</div>
          </div>
          <div class="progress-connector"></div>
          <div class="progress-step">
            <div class="step-icon">
              <i class="fas fa-check-circle"></i>
            </div>
            <div class="step-label">Confirmation</div>
          </div>
        </div>
      </div>

      <div class="row g-4">
        <!-- Payment Methods Section -->
        <div class="col-lg-5">
          <div
            class="payment-methods-card"
            data-aos="fade-right"
            data-aos-delay="200"
          >
            <div class="card-header">
              <h5>Payment Methods</h5>
            </div>

            <div class="card-body">
              <div id="paymentAlert"></div>

              <div class="payment-options">
                <!-- COD Payment Option -->
                <div
                  class="payment-option <%= grandTotal > 1000 ? 'disabled' : '' %>"
                  id="cod-option"
                >
                  <div class="shimmer"></div>
                  <input
                    type="radio"
                    name="payment"
                    id="cod"
                    value="COD"
                    <%= grandTotal > 1000 ? 'disabled' : 'checked' %>
                  />
                  <label for="cod">
                    <div class="payment-option-icon">
                      <i class="fas fa-money-bill-wave"></i>
                    </div>
                    <div class="payment-option-content">
                      <div class="payment-option-title">Cash on Delivery</div>
                      <div class="payment-option-description">
                        Pay when your order is delivered
                      </div>
                      <% if (grandTotal > 1000) { %>
                      <div
                        class="error-message"
                        style="display: block; color: var(--error-color)"
                      >
                        COD is not available for orders above ₹1,000
                      </div>
                      <% } %>
                    </div>
                  </label>
                </div>

                <div class="payment-option">
                  <div class="shimmer"></div>
                  <input
                    type="radio"
                    name="payment"
                    id="razorpay"
                    value="Razorpay"
                    <%= grandTotal > 1000 ? 'checked' : '' %>
                  />
                  <label for="razorpay">
                    <div class="payment-option-icon">
                      <i class="fas fa-credit-card"></i>
                    </div>
                    <div class="payment-option-content">
                      <div class="payment-option-title">Pay Online</div>
                      <div class="payment-option-description">
                        Credit/Debit Card, UPI, Netbanking via Razorpay
                      </div>
                    </div>
                  </label>
                </div>

                <div class="payment-cards">
                  <img
                    src="/uploads/visaCard.png"
                    alt="Visa"
                    onerror="this.onerror=null; this.src='/placeholder.svg?height=30&width=50&query=visa+card';"
                  />
                  <img
                    src="/uploads/mastercard.jpeg"
                    alt="Mastercard"
                    onerror="this.onerror=null; this.src='/placeholder.svg?height=30&width=50&query=mastercard';"
                  />
                  <img
                    src="/uploads/Rupay-Logo.png"
                    alt="RuPay"
                    onerror="this.onerror=null; this.src='/placeholder.svg?height=30&width=50&query=rupay+card';"
                  />
                  <img
                    src="/uploads/upi.jpeg"
                    alt="UPI"
                    onerror="this.onerror=null; this.src='/placeholder.svg?height=30&width=50&query=upi';"
                  />
                </div>

                <!-- Wallet payment option -->
                <div
                  class="payment-option <%= (walletBalance < grandTotal) ? 'disabled' : '' %>"
                  id="wallet-option"
                >
                  <div class="shimmer"></div>
                  <input type="radio" name="payment" id="wallet" value="Wallet"
                  <%= (walletBalance < grandTotal) ? 'disabled' : '' %> >
                  <label for="wallet">
                    <div class="payment-option-icon">
                      <i class="fas fa-wallet"></i>
                    </div>
                    <div class="payment-option-content">
                      <div class="payment-option-title">
                        Wallet
                        <span
                          class="wallet-balance <%= (walletBalance < grandTotal) ? 'insufficient' : 'sufficient' %>"
                        >
                          ₹<%= walletBalance ? walletBalance.toFixed(2) : '0.00' %>
                        </span>
                      </div>
                      <div class="payment-option-description">
                        <% if (walletBalance < grandTotal) { %> Insufficient
                        balance. You need ₹<%= (grandTotal -
                        walletBalance).toFixed(2) %> more.
                        <a href="/wallet" class="add-money-link">Add money</a>
                        <div
                          class="error-message"
                          style="display: block; color: var(--error-color)"
                        >
                          Insufficient wallet balance for this order
                        </div>
                        <% } else { %> Pay using your wallet balance <% } %>
                      </div>
                    </div>
                  </label>
                </div>
              </div>
            </div>
          </div>

          <div
            class="delivery-address-card"
            data-aos="fade-right"
            data-aos-delay="300"
          >
            <div class="card-header">
              <h5>Delivery Address</h5>
              <a href="/checkOut" class="btn-change-address">
                <i class="fas fa-pencil-alt"></i> Change
              </a>
            </div>

            <div class="card-body">
              <div class="address-details">
                <div class="address-name"><%= deliveryAddress.fullname %></div>
                <div class="address-line"><%= deliveryAddress.address %></div>
                <div class="address-line">
                  <%= deliveryAddress.city %>, <%= deliveryAddress.district %>
                </div>
                <div class="address-line">
                  <%= deliveryAddress.state %> - <%= deliveryAddress.pincode %>
                </div>
                <div class="address-phone">
                  <i class="fas fa-phone-alt"></i> <%= deliveryAddress.mobile %>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Order Summary Section -->
        <div class="col-lg-7">
          <div
            class="order-summary-card"
            data-aos="fade-left"
            data-aos-delay="200"
          >
            <div class="card-header">
              <h5>Order Summary</h5>
              <span class="badge bg-primary"
                ><%= cartItems.length %> items</span
              >
            </div>

            <div class="card-body">
              <div class="order-items">
                <% cartItems.forEach((item, index) => { %>
                  <% // Safely check if productId exists and is an object %>
                  <% if (item && item.productId && typeof item.productId === 'object') { %>
                    <% // Safely get variants %>
                    <% const variants = item.productId.variants || []; %>
                    <% // Find the variant with matching size %>
                    <% const variant = variants.find(v => v && v.size === item.size); %>
                    <% // Get price safely %>
                    <% const price = variant ? variant.salePrice : (item.price || 0); %>
                    <% const totalItemPrice = price * item.quantity; %>
                    <% // Check if this item has a discount %>
                    <% const hasDiscount = item.originalPrice && item.finalPrice && item.originalPrice > item.finalPrice; %>
                    
                    <div class="order-item" data-aos="fade-up" data-aos-delay="<%= 300 + (index * 50) %>">
                      <div class="item-image">
                        <img
                          src="<%= item.productId.images && item.productId.images.length > 0 && item.productId.images[0]?.url || '/placeholder.svg?height=70&width=70&query=fashion+product' %>"
                          alt="<%= item.productId.name || 'Product' %>"
                          onerror="this.onerror=null; this.src='/placeholder.svg?height=70&width=70&query=fashion+product';"
                        />
                      </div>
                      <div class="item-details">
                        <div class="item-name">
                          <%= item.productId.name || 'Product' %>
                        </div>
                        <div class="item-meta">
                          <span>Size: <%= item.size || 'N/A' %></span>
                          <span>Qty: <%= item.quantity || 1 %></span>
                        </div>
                      </div>

                      <% if (hasDiscount) { %>
                      <div class="item-price-container">
                        <span class="item-original-price">₹<%= (item.originalPrice * item.quantity).toFixed(2) %></span>
                        <span class="item-price">₹<%= (item.finalPrice * item.quantity).toFixed(2) %></span>
                        <span class="item-discount-badge">-<%= ((item.originalPrice - item.finalPrice) / item.originalPrice * 100).toFixed(0) %>%</span>
                      </div>
                      <% } else { %>
                      <div class="item-price">
                        ₹<%= totalItemPrice.toFixed(2) %>
                      </div>
                      <% } %>
                    </div>
                  <% } else { %>
                    <% // Handle case where productId is not properly populated %>
                    <% const fallbackPrice = item.price || 0; %>
                    <% const fallbackQuantity = item.quantity || 1; %>
                    <% const fallbackTotal = fallbackPrice * fallbackQuantity; %>
                    
                    <div class="order-item" data-aos="fade-up" data-aos-delay="<%= 300 + (index * 50) %>">
                      <div class="item-image">
                        <img
                          src="/placeholder.svg?height=70&width=70&query=fashion+product"
                          alt="Product"
                        />
                      </div>
                      <div class="item-details">
                        <div class="item-name"><%= item.name || 'Product' %></div>
                        <div class="item-meta">
                          <span>Size: <%= item.size || 'N/A' %></span>
                          <span>Qty: <%= item.quantity || 1 %></span>
                        </div>
                      </div>
                      <div class="item-price">₹<%= fallbackTotal.toFixed(2) %></div>
                    </div>
                  <% } %>
                <% }); %>
              </div>

              <div
                class="price-summary"
                data-aos="fade-up"
                data-aos-delay="400"
              >
                <div class="price-row">
                  <span>Subtotal</span>
                  <span>₹<%= totalPrice.toFixed(2) %></span>
                </div>
                <div class="price-row">
                  <span>Delivery</span>
                  <span
                    ><%= deliveryCharge === 0 ? 'FREE' : '₹' +
                    deliveryCharge.toFixed(2) %></span
                  >
                </div>

                <% if (discount > 0 && appliedCoupon) { %>
                <div class="price-row discount">
                  <span
                    >Discount (<%= appliedCoupon.code ||
                    appliedCoupon.coupencode %>)</span
                  >
                  <span>-₹<%= discount.toFixed(2) %></span>
                </div>
                <% } %>

                <div class="price-row total">
                  <span>Total</span>
                  <span>₹<%= grandTotal.toFixed(2) %></span>
                </div>
              </div>

              <button
                id="placeOrderBtn"
                class="btn-place-order"
                onclick="handlePayment()"
                data-aos="fade-up"
                data-aos-delay="500"
              >
                <span class="btn-text">Place Order</span>
                <span class="btn-price">₹<%= grandTotal.toFixed(2) %></span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Toast Container -->
    <div id="toastContainer"></div>

    <%- include("../partials/user/footer") %>

    <!-- Dark Mode Toggle -->
    <button class="dark-mode-toggle" id="darkModeToggle">
      <i class="fas fa-moon"></i>
    </button>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://unpkg.com/aos@next/dist/aos.js"></script>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Initialize AOS
        AOS.init({
          duration: 800,
          easing: 'ease-in-out',
          once: true
        });

        // Preloader
        const preloader = document.querySelector('.preloader');
        setTimeout(() => {
          preloader.classList.add('fade-out');
        }, 500);

        // Scroll Indicator
        const scrollIndicator = document.querySelector('.scroll-indicator');
        window.addEventListener('scroll', () => {
          const winScroll = document.body.scrollTop || document.documentElement.scrollTop;
          const height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
          const scrolled = (winScroll / height) * 100;
          scrollIndicator.style.width = scrolled + '%';
        });

        // Cursor Glow Effect
        const cursorGlow = document.querySelector('.cursor-glow');
        document.addEventListener('mousemove', (e) => {
          cursorGlow.style.left = e.clientX + 'px';
          cursorGlow.style.top = e.clientY + 'px';
        });

        document.addEventListener('mousedown', () => {
          cursorGlow.style.width = '30px';
          cursorGlow.style.height = '30px';
          cursorGlow.style.opacity = '0.8';
        });

        document.addEventListener('mouseup', () => {
          cursorGlow.style.width = '20px';
          cursorGlow.style.height = '20px';
          cursorGlow.style.opacity = '0.5';
        });

        // Dark mode toggle
        const darkModeToggle = document.getElementById('darkModeToggle');
        const prefersDarkScheme = window.matchMedia('(prefers-color-scheme: dark)');

        // Check for saved theme preference or use the system preference
        const savedTheme = localStorage.getItem('theme');

        if (savedTheme === 'dark' || (!savedTheme && prefersDarkScheme.matches)) {
          document.body.classList.add('dark-mode');
          darkModeToggle.innerHTML = '<i class="fas fa-sun"></i>';
        }

        darkModeToggle.addEventListener('click', () => {
          if (document.body.classList.contains('dark-mode')) {
            document.body.classList.remove('dark-mode');
            localStorage.setItem('theme', 'light');
            darkModeToggle.innerHTML = '<i class="fas fa-moon"></i>';
          } else {
            document.body.classList.add('dark-mode');
            localStorage.setItem('theme', 'dark');
            darkModeToggle.innerHTML = '<i class="fas fa-sun"></i>';
          }
        });

        // Navbar scroll effect
        window.addEventListener('scroll', function () {
          const navbar = document.querySelector('.navbar');
          if (navbar) {
            if (window.scrollY > 50) {
              navbar.classList.add('navbar-scrolled');
            } else {
              navbar.classList.remove('navbar-scrolled');
            }
          }
        });

        // Add shimmer effect to payment options
        document.querySelectorAll('.payment-option').forEach(option => {
          option.addEventListener('mouseenter', () => {
            const shimmer = option.querySelector('.shimmer');
            if (shimmer) {
              shimmer.style.opacity = '1';
            }
          });

          option.addEventListener('mouseleave', () => {
            const shimmer = option.querySelector('.shimmer');
            if (shimmer) {
              shimmer.style.opacity = '0';
            }
          });
        });

        // Add event listeners to payment options
        const paymentOptions = document.querySelectorAll('.payment-option input[type="radio"]');
        paymentOptions.forEach((option) => {
          option.addEventListener("change", () => {
            // Remove highlight from all options
            document.querySelectorAll(".payment-option").forEach((opt) => {
              opt.classList.remove("selected");
            });

            // Add highlight to selected option
            if (!option.closest(".payment-option").classList.contains('disabled')) {
              option.closest(".payment-option").classList.add("selected");
            }
          });
        });

        // Initial highlight for selected payment method
        const selectedOption = document.querySelector('input[name="payment"]:checked');
        if (selectedOption && !selectedOption.closest(".payment-option").classList.contains('disabled')) {
          selectedOption.closest(".payment-option").classList.add("selected");
        }

        // Initialize toast system
        window.toastSystem = {
          container: document.getElementById("toastContainer"),
          counter: 0,

          // Show a toast notification
          show: function (message, type = "success", duration = 3000) {
            try {
              // Create toast element
              const toastId = `toast-${++this.counter}`;
              const toast = document.createElement("div");
              toast.id = toastId;
              toast.className = `toast-notification ${type}`;

              // Set icon based on type
              let icon = "";
              if (type === "success") {
                icon = '<i class="fas fa-check-circle"></i>';
              } else if (type === "error") {
                icon = '<i class="fas fa-exclamation-circle"></i>';
              } else if (type === "info") {
                icon = '<i class="fas fa-info-circle"></i>';
              }

              // Create toast content
              toast.innerHTML = `
                <div class="toast-icon">${icon}</div>
                <div class="toast-message">${message}</div>
                <button class="toast-close" aria-label="Close">×</button>
                <div class="toast-progress"></div>
              `;

              // Add to container
              this.container.appendChild(toast);

              // Add close button functionality
              const closeBtn = toast.querySelector(".toast-close");
              closeBtn.addEventListener("click", () => {
                this.close(toastId);
              });

              // Auto close after duration
              setTimeout(() => {
                this.close(toastId);
              }, duration);

              return toastId;
            } catch (error) {
              console.error("Error showing toast:", error);
              // Fallback to alert if toast fails
              alert(message);
            }
          },

          // Close a toast notification
          close: (id) => {
            try {
              const toast = document.getElementById(id);
              if (toast) {
                toast.style.animation = "slideOut 0.3s forwards";
                setTimeout(() => {
                  if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                  }
                }, 300);
              }
            } catch (error) {
              console.error("Error closing toast:", error);
            }
          },

          // Helper methods for different toast types
          success: function (message, duration) {
            return this.show(message, "success", duration);
          },

          error: function (message, duration) {
            return this.show(message, "error", duration);
          },

          info: function (message, duration) {
            return this.show(message, "info", duration);
          },
        };
      });

      // Show alert message
      function showAlert(type, message) {
        const alertDiv = document.getElementById("paymentAlert");
        alertDiv.innerHTML = `
          <div class="alert alert-${type} alert-dismissible fade show" role="alert">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
          </div>
        `;

        // Auto dismiss after longer duration - 10 seconds for success, 15 seconds for errors
        setTimeout(() => {
          const alertElement = document.querySelector(".alert");
          if (alertElement) {
            const bsAlert = new bootstrap.Alert(alertElement);
            bsAlert.close();
          }
        }, type === 'danger' ? 15000 : 10000);

        // Scroll to alert
        alertDiv.scrollIntoView({ behavior: "smooth", block: "start" });
      }

      // Show loading overlay
      function showLoading() {
        document.getElementById('loadingOverlay').style.display = 'flex';
      }

      // Hide loading overlay
      function hideLoading() {
        document.getElementById('loadingOverlay').style.display = 'none';
      }

      // Create confetti animation
      function createConfetti() {
        const colors = ['#3b82f6', '#8b5cf6', '#ec4899', '#10b981', '#f59e0b'];
        const confettiCount = 100;

        for (let i = 0; i < confettiCount; i++) {
          const confetti = document.createElement('div');
          confetti.className = 'confetti';
          confetti.style.left = Math.random() * 100 + 'vw';
          confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
          confetti.style.width = Math.random() * 10 + 5 + 'px';
          confetti.style.height = Math.random() * 10 + 5 + 'px';
          confetti.style.opacity = Math.random();
          confetti.style.animationDuration = Math.random() * 3 + 2 + 's';
          document.body.appendChild(confetti);

          // Remove confetti after animation completes
          setTimeout(() => {
            confetti.remove();
          }, 5000);
        }
      }

      // Helper function to show toast
      function showToast(message, type = "success", duration = 3000) {
        if (window.toastSystem) {
          return window.toastSystem.show(message, type, duration);
        } else {
          // Create a simple toast if the toast system is not available
          const toast = document.createElement("div");
          toast.className = `toast-notification ${type}`;
          toast.innerHTML = `
            <div class="toast-message">${message}</div>
          `;

          const container = document.getElementById("toastContainer");
          if (container) {
            container.appendChild(toast);
            setTimeout(() => {
              toast.remove();
            }, duration);
          } else {
            alert(message);
          }
        }
      }

      // Handle payment process
      async function handlePayment() {
        try {
          const selectedPaymentOption = document.querySelector('input[name="payment"]:checked');

          if (!selectedPaymentOption) {
            showAlert('warning', 'Please select a payment method');
            return;
          }

          const paymentMethod = selectedPaymentOption.value;
          const couponCode = "<%= appliedCoupon ? (appliedCoupon.code || appliedCoupon.coupencode) : '' %>";
          const placeOrderBtn = document.getElementById('placeOrderBtn');

          // Check for payment restrictions
          if (paymentMethod === 'COD' && <%= grandTotal %> > 1000) {
            window.location.href = `/order-failed?message=${encodeURIComponent('Cash on Delivery is not available for orders above ₹1,000. Please choose another payment method.')}`;
            return;
          }

          if (paymentMethod === 'Wallet' && <%= walletBalance %> < <%= grandTotal %>) {
            window.location.href = `/order-failed?message=${encodeURIComponent(`Insufficient wallet balance. Available: ₹${<%= walletBalance.toFixed(2) %>}, Required: ₹${<%= grandTotal.toFixed(2) %>}`)}`;
            return;
          }

          // Disable button and show loading state
          placeOrderBtn.disabled = true;
          placeOrderBtn.innerHTML = '<span class="spinner"></span> Processing...';

          if (paymentMethod === 'Razorpay') {
            // Handle Razorpay payment
            showLoading();
            const response = await fetch('/create-razorpay-order', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ couponCode })
            });

            hideLoading();

            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.message || 'Failed to create Razorpay order');
            }

            const data = await response.json();
            console.log('Razorpay order response:', data);

            if (!data.success) {
              throw new Error(data.message || 'Failed to create Razorpay order');
            }

            const options = {
              key: data.key,
              amount: data.order.amount,
              currency: data.order.currency,
              name: 'Elite Wear',
              description: 'Purchase from Elite Wear',
              image: '/Uploads/ChatGPT Image Apr 13, 2025, 06_50_48 PM.png',
              order_id: data.order.id,
              prefill: {
                name: data.user?.name || '<%= deliveryAddress.fullname %>',
                email: data.user?.email || '',
                contact: data.user?.mobile || '<%= deliveryAddress.mobile %>' || ''
              },
              theme: {
                color: '#3b82f6'
              },
              handler: function(response) {
                // Handle successful payment
                verifyPayment(response);
              },
              modal: {
                ondismiss: function() {
                  // Re-enable button when modal is closed
                  placeOrderBtn.disabled = false;
                  placeOrderBtn.innerHTML = '<span class="btn-text">Place Order</span><span class="btn-price">₹<%= grandTotal.toFixed(2) %></span>';
                  showToast('Payment cancelled', 'info');
                }
              }
            };

            // Initialize Razorpay
            const razorpay = new Razorpay(options);

            // Open Razorpay checkout
            razorpay.on('payment.failed', function(response) {
              console.error('Payment failed:', response.error);
              window.location.href = `/order-failed?message=${encodeURIComponent(response.error.description || 'Please try again')}`;
            });

            razorpay.open();

          } else if (paymentMethod === 'Wallet') {
            // Handle wallet payment
            showLoading();

            // Place the order directly with wallet payment
            const response = await fetch('/place-order', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                paymentMethod: 'Wallet',
                couponCode
              })
            });

            hideLoading();

            if (!response.ok) {
              const errorData = await response.json();
              window.location.href = `/order-failed?message=${encodeURIComponent(errorData.message || 'Wallet payment failed')}`;
              return;
            }

            const data = await response.json();

            if (data.success) {
              // Show success message and redirect
              createConfetti();
              showToast('Payment successful! Redirecting to order confirmation...', 'success', 3000);
              setTimeout(() => {
                window.location.href = data.redirect;
              }, 3000);
            } else {
              window.location.href = `/order-failed?message=${encodeURIComponent(data.message || 'Wallet payment failed')}`;
            }

          } else if (paymentMethod === 'COD') {
            // Handle COD payment
            showLoading();

            // Place the order with COD payment
            const response = await fetch('/place-order', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                paymentMethod: 'COD',
                couponCode
              })
            });

            hideLoading();

            if (!response.ok) {
              const errorData = await response.json();
              window.location.href = `/order-failed?message=${encodeURIComponent(errorData.message || 'Failed to place COD order')}`;
              return;
            }

            const data = await response.json();

            if (data.success) {
              // Show success message and redirect
              createConfetti();
              showToast('Order placed successfully! Redirecting to order confirmation...', 'success', 3000);
              setTimeout(() => {
                window.location.href = data.redirect;
              }, 3000);
            } else {
              window.location.href = `/order-failed?message=${encodeURIComponent(data.message || 'Failed to place COD order')}`;
            }
          }
        } catch (error) {
          console.error('Payment error:', error);
          window.location.href = `/order-failed?message=${encodeURIComponent(error.message || 'Unknown error occurred')}`;
          
          // Re-enable button
          const placeOrderBtn = document.getElementById('placeOrderBtn');
          if (placeOrderBtn) {
            placeOrderBtn.disabled = false;
            placeOrderBtn.innerHTML = '<span class="btn-text">Place Order</span><span class="btn-price">₹<%= grandTotal.toFixed(2) %></span>';
          }
        }
      }

      // Verify payment after Razorpay success
      async function verifyPayment(response) {
        try {
          showLoading();
          const verifyResponse = await fetch('/verify-payment', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              razorpay_payment_id: response.razorpay_payment_id,
              razorpay_order_id: response.razorpay_order_id,
              razorpay_signature: response.razorpay_signature,
              couponCode: "<%= appliedCoupon ? (appliedCoupon.code || appliedCoupon.coupencode) : '' %>"
            })
          });

          hideLoading();

          if (!verifyResponse.ok) {
            const errorData = await verifyResponse.json();
            window.location.href = `/order-failed?message=${encodeURIComponent(errorData.message || 'Payment verification failed')}`;
            return;
          }

          const data = await verifyResponse.json();

          if (data.success) {
            // Show success animation and message
            createConfetti();
            showToast('Payment successful! Redirecting to order confirmation...', 'success', 3000);

            // Redirect to success page
            setTimeout(() => {
              window.location.href = data.redirect;
            }, 3000);
          } else {
            window.location.href = `/order-failed?message=${encodeURIComponent(data.message || 'Payment verification failed')}`;
          }
        } catch (error) {
          console.error('Payment verification error:', error);
          window.location.href = `/order-failed?message=${encodeURIComponent(error.message || 'Unknown error occurred')}`;
        }
      }
    </script>
  </body>
</html>