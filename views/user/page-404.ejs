<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>404 - Page Not Found</title>
  <link rel="stylesheet" href="/userStyle/page-404.css">
  <!-- Three.js library -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <!-- OrbitControls for camera manipulation -->
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
  <!-- FontLoader for 3D text -->
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/FontLoader.js"></script>
  <!-- TextGeometry for 3D text -->
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/geometries/TextGeometry.js"></script>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      overflow-x: hidden;
    }
    
    .error-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
      padding: 2rem;
      text-align: center;
      position: relative;
      overflow: hidden;
      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    }
    
    #three-canvas {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 1;
      pointer-events: none;
    }
    
    .content-wrapper {
      position: relative;
      z-index: 2;
      padding-top: 40vh; /* Space for the 3D model */
      width: 100%;
      max-width: 800px;
    }
    
    .error-title {
      font-size: 2.5rem;
      font-weight: 700;
      margin: 1rem 0;
      color: #333;
      text-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .error-description {
      font-size: 1.2rem;
      max-width: 600px;
      margin: 1rem auto 2rem;
      color: #666;
      line-height: 1.6;
    }
    
    .button-group {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 1rem;
      margin-bottom: 2rem;
    }
    
    .back-button {
      display: inline-block;
      padding: 0.8rem 2rem;
      background: linear-gradient(45deg, #6a11cb, #2575fc);
      color: white;
      font-weight: 600;
      text-decoration: none;
      border-radius: 50px;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(37, 117, 252, 0.3);
    }
    
    .back-button:hover {
      transform: translateY(-3px);
      box-shadow: 0 7px 20px rgba(37, 117, 252, 0.4);
    }
    
    .explore-button {
      display: inline-block;
      padding: 0.8rem 2rem;
      background: white;
      color: #6a11cb;
      font-weight: 600;
      text-decoration: none;
      border-radius: 50px;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      border: 2px solid #6a11cb;
    }
    
    .explore-button:hover {
      transform: translateY(-3px);
      box-shadow: 0 7px 20px rgba(0, 0, 0, 0.15);
      background: #6a11cb;
      color: white;
    }
    
    .search-container {
      margin-top: 1rem;
      max-width: 500px;
      width: 100%;
      transform: translateX(7vw);
      position: relative;
    }
    
    .search-input {
      width: 100%;
      padding: 1rem 1.5rem;
      border-radius: 50px;
      border: 2px solid #ddd;
      font-size: 1rem;
      transition: all 0.3s ease;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
    }
    
    .search-input:focus {
      outline: none;
      border-color: #6a11cb;
      box-shadow: 0 4px 15px rgba(106, 17, 203, 0.2);
    }
    
    .search-button {
      position: absolute;
      right: 5px;
      top: 5px;
      background: linear-gradient(45deg, #6a11cb, #2575fc);
      color: white;
      border: none;
      border-radius: 50px;
      padding: 0.7rem 1.5rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
          transform: translateY(3px);
    }
    
    .search-button:hover {
      background: linear-gradient(45deg, #5a0cb1, #1a65e6);
    }
    
    .loading-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      transition: opacity 0.5s ease;
    }
    
    .loader {
      width: 50px;
      height: 50px;
      border: 5px solid rgba(106, 17, 203, 0.3);
      border-radius: 50%;
      border-top-color: #6a11cb;
      animation: spin 1s ease-in-out infinite;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    
    @media (max-width: 768px) {
      .content-wrapper {
        padding-top: 30vh; /* Less space on mobile */
      }
      
      .error-title {
        font-size: 2rem;
      }
      
      .button-group {
        flex-direction: column;
      }
    }
  </style>
</head>
<body>
  <!-- Loading screen -->
  <div class="loading-screen" id="loading-screen">
    <div class="loader"></div>
  </div>

  <main class="error-container">
    <!-- Three.js canvas -->
    <canvas id="three-canvas"></canvas>
    
    <div class="content-wrapper">
      <h2 class="error-title">Oops! Page Not Found</h2>
      <p class="error-description">
        The product you're looking for has sold out or the page doesn't exist. 
        Don't worry, we have plenty of other amazing products waiting for you!
      </p>
      
      <div class="button-group">
        <a class="back-button" href="/">Back to Home</a>
        <a class="explore-button" href="/products">Explore Products</a>
      </div>
      
      <div class="search-container">
        <form action="/search" method="GET">
          <input type="text" class="search-input" name="q" placeholder="Search for products...">
          <button type="submit" class="search-button">Search</button>
        </form>
      </div>
    </div>
  </main>

  <script>
    // Three.js implementation
    document.addEventListener('DOMContentLoaded', function() {
      // Variables for scene
      let scene, camera, renderer, controls;
      let text, textMaterial, pointLight;
      let mouseX = 0, mouseY = 0;
      let targetX = 0, targetY = 0;
      const windowHalfX = window.innerWidth / 2;
      const windowHalfY = window.innerHeight / 2;
      
      // Initialize the scene
      init();
      
      // Animation loop
      animate();
      
      function init() {
        // Create scene
        scene = new THREE.Scene();
        
        // Create camera
        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.z = 200;
        
        // Create renderer
        renderer = new THREE.WebGLRenderer({ 
          canvas: document.getElementById('three-canvas'),
          antialias: true,
          alpha: true 
        });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setPixelRatio(window.devicePixelRatio);
        
        // Add lights
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
        scene.add(ambientLight);
        
        pointLight = new THREE.PointLight(0x6a11cb, 1);
        pointLight.position.set(100, 100, 100);
        scene.add(pointLight);
        
        const pointLight2 = new THREE.PointLight(0x2575fc, 1);
        pointLight2.position.set(-100, -100, 100);
        scene.add(pointLight2);
        
        // Load font and create 3D text
        const fontLoader = new THREE.FontLoader();
        
        // Use a callback function to handle the loaded font
        fontLoader.load('https://threejs.org/examples/fonts/helvetiker_bold.typeface.json', function(font) {
          const textGeometry = new THREE.TextGeometry('404', {
            font: font,
            size: 80,
            height: 20,
            curveSegments: 12,
            bevelEnabled: true,
            bevelThickness: 5,
            bevelSize: 3,
            bevelOffset: 0,
            bevelSegments: 5
          });
          
          // Center the text
          textGeometry.computeBoundingBox();
          const textWidth = textGeometry.boundingBox.max.x - textGeometry.boundingBox.min.x;
          textGeometry.translate(-textWidth / 2, -40, 0);
          
          // Create material with gradient
          const textMaterial = new THREE.MeshPhongMaterial({
            color: 0xffffff,
            specular: 0x6a11cb,
            shininess: 100
          });
          
          // Create mesh and add to scene
          text = new THREE.Mesh(textGeometry, textMaterial);
          scene.add(text);
          
          // Hide loading screen once text is loaded
          document.getElementById('loading-screen').style.opacity = 0;
          setTimeout(() => {
            document.getElementById('loading-screen').style.display = 'none';
          }, 500);
        });
        
        // Add event listeners for mouse movement
        document.addEventListener('mousemove', onDocumentMouseMove);
        
        // Handle window resize
        window.addEventListener('resize', onWindowResize);
      }
      
      function onDocumentMouseMove(event) {
        mouseX = (event.clientX - windowHalfX) / 100;
        mouseY = (event.clientY - windowHalfY) / 100;
      }
      
      function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
      }
      
      function animate() {
        requestAnimationFrame(animate);
        
        // Smooth camera movement following mouse
        targetX = mouseX * 0.3;
        targetY = mouseY * 0.3;
        
        if (text) {
          // Rotate text slightly based on mouse position
          text.rotation.y += 0.05 * (targetX - text.rotation.y);
          text.rotation.x += 0.05 * (targetY - text.rotation.x);
          
          // Add subtle floating animation
          text.position.y = Math.sin(Date.now() * 0.001) * 5;
          
          // Rotate text slowly
          text.rotation.z += 0.001;
        }
        
        // Move light with mouse
        if (pointLight) {
          pointLight.position.x = mouseX * 10;
          pointLight.position.y = -mouseY * 10;
        }
        
        renderer.render(scene, camera);
      }
    });
  </script>

  <%- include("../partials/user/footer") %>
</body>
</html>