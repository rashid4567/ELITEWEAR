<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add New Address</title>
  <link rel="stylesheet" href="/userStyle/addAddress.css">
</head>
<body>
    <%- include("../partials/user/header") %>
  <div class="container">
    <div class="page-header">
      <h1 class="page-title">Add New Address</h1>
      <a href="/address" class="back-button">
        <span>← Back to Addresses</span>
      </a>
    </div>
    
    <div class="form-container">
      <h2 class="form-title">Contact Details</h2>
      <form id="addAddressForm" action="/add-address" method="POST" novalidate>
        <div class="form-row">
          <div class="form-group">
            <label for="fullName" class="form-label">Full Name</label>
            <input type="text" id="fullName" name="fullname" class="form-control" placeholder="Enter your full name" maxlength="50">
            <div id="fullNameError" class="error-message">Full name must be at least 2 characters long.</div>
          </div>
          
          <div class="form-group">
            <label for="mobile" class="form-label">Mobile Number</label>
            <input type="tel" id="mobile" name="mobile" class="form-control" placeholder="Enter 10-digit mobile number">
            <div id="mobileError" class="error-message">Please enter a valid 10-digit mobile number.</div>
          </div>
        </div>
        
        <h2 class="form-title">Address</h2>
        <div class="form-group">
          <label for="address" class="form-label">Address (House No, Building, Street, Area)</label>
          <textarea id="address" name="address" class="form-control" rows="3" placeholder="Enter your complete address"></textarea>
          <div id="addressError" class="error-message">Address cannot be empty.</div>
        </div>
        
        <div class="form-group">
          <label for="landmark" class="form-label">Landmark (Optional)</label>
          <input type="text" id="landmark" name="landmark" class="form-control" placeholder="Nearby landmark (optional)">
        </div>
        
        <div class="form-row">
          <div class="form-group">
            <label for="district" class="form-label">District</label>
            <input type="text" id="district" name="district" class="form-control" placeholder="Enter district">
            <div id="districtError" class="error-message">District cannot be empty.</div>
          </div>
          
          <div class="form-group">
            <label for="city" class="form-label">City</label>
            <input type="text" id="city" name="city" class="form-control" placeholder="Enter city">
            <div id="cityError" class="error-message">City cannot be empty.</div>
          </div>
        </div>
        
        <div class="form-row">
          <div class="form-group">
            <label for="state" class="form-label">State</label>
            <input type="text" id="state" name="state" class="form-control" placeholder="Enter state">
            <div id="stateError" class="error-message">State cannot be empty.</div>
          </div>
          
          <div class="form-group">
            <label for="pinCode" class="form-label">PIN Code</label>
            <input type="text" id="pinCode" name="pincode" class="form-control" placeholder="Enter 6-digit PIN code">
            <div id="pinCodeError" class="error-message">Please enter a valid 6-digit PIN code.</div>
          </div>
        </div>
        
        <h2 class="form-title">Address Type</h2>
        <div class="address-type-container">
          <div class="address-type-option">
            <input type="radio" id="typeHome" name="type" value="home" class="address-type-radio" checked>
            <label for="typeHome" class="address-type-label">Home</label>
          </div>
          
          <div class="address-type-option">
            <input type="radio" id="typeWork" name="type" value="work" class="address-type-radio">
            <label for="typeWork" class="address-type-label">Office</label>
          </div>
          
          <div class="address-type-option">
            <input type="radio" id="typeOther" name="type" value="other" class="address-type-radio">
            <label for="typeOther" class="address-type-label">Other</label>
          </div>
        </div>
        
        <button type="submit" class="submit-btn">Save Address</button>
      </form>
    </div>
  </div>
  <%- include("../partials/user/footer") %>
  <script>
    // Function to show success alert (keeping this for success messages only)
    function showSuccessAlert(message, onButtonClick) {
      // Create alert container
      const alertOverlay = document.createElement('div');
      alertOverlay.className = 'custom-alert-overlay';
      
      // Create alert content
      alertOverlay.innerHTML = `
        <div class="custom-alert">
          <div class="custom-alert-header">
            <div class="custom-alert-title">SUCCESS!!</div>
            <div class="custom-alert-close">✕</div>
          </div>
          <div class="custom-alert-message">${message}</div>
          <button class="custom-alert-button">OK</button>
        </div>
      `;
      
      document.body.appendChild(alertOverlay);
      
      const closeButton = alertOverlay.querySelector('.custom-alert-close');
      const actionButton = alertOverlay.querySelector('.custom-alert-button');
      
      closeButton.addEventListener('click', () => {
        document.body.removeChild(alertOverlay);
      });
      
      actionButton.addEventListener('click', () => {
        document.body.removeChild(alertOverlay);
        if (typeof onButtonClick === 'function') {
          onButtonClick();
        }
      });
    }

    // Function to show validation error
    function showValidationError(fieldId, show = true) {
      const field = document.getElementById(fieldId);
      const errorElement = document.getElementById(`${fieldId}Error`);
      
      if (show) {
        field.classList.add('error');
        errorElement.style.display = 'block';
      } else {
        field.classList.remove('error');
        errorElement.style.display = 'none';
      }
    }
    
    // Function to clear all validation errors
    function clearValidationErrors() {
      const errorElements = document.querySelectorAll('.error-message');
      const inputElements = document.querySelectorAll('.form-control');
      
      errorElements.forEach(element => {
        element.style.display = 'none';
      });
      
      inputElements.forEach(element => {
        element.classList.remove('error');
      });
    }
    
    // Add input event listeners to clear errors when user starts typing
    document.querySelectorAll('.form-control').forEach(input => {
      input.addEventListener('input', function() {
        const fieldId = this.id;
        showValidationError(fieldId, false);
      });
    });

    // Form submission handler
    document.getElementById('addAddressForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      clearValidationErrors();
      
      let isValid = true;
      const fullName = document.getElementById('fullName').value.trim();
      const mobile = document.getElementById('mobile').value.trim();
      const address = document.getElementById('address').value.trim();
      const district = document.getElementById('district').value.trim();
      const city = document.getElementById('city').value.trim();
      const state = document.getElementById('state').value.trim();
      const pinCode = document.getElementById('pinCode').value.trim();
      
      // Client-side validation with inline errors
      if (!fullName || fullName.length < 2) {
        showValidationError('fullName');
        isValid = false;
      }
      
      if (!mobile || !/^\d{10}$/.test(mobile)) {
        showValidationError('mobile');
        isValid = false;
      }
      
      if (!address) {
        showValidationError('address');
        isValid = false;
      }
      
      if (!district) {
        showValidationError('district');
        isValid = false;
      }
      
      if (!city) {
        showValidationError('city');
        isValid = false;
      }
      
      if (!state) {
        showValidationError('state');
        isValid = false;
      }
      
      if (!pinCode || !/^\d{6}$/.test(pinCode)) {
        showValidationError('pinCode');
        isValid = false;
      }
      
      // If any validation failed, stop form submission
      if (!isValid) {
        // Scroll to the first error field
        const firstErrorField = document.querySelector('.form-control.error');
        if (firstErrorField) {
          firstErrorField.scrollIntoView({ behavior: 'smooth', block: 'center' });
          firstErrorField.focus();
        }
        return;
      }
      
      const formData = new FormData(e.target);
      const addressData = {
        fullname: formData.get('fullname'),
        mobile: formData.get('mobile'),
        address: formData.get('address'),
        district: formData.get('district'),
        city: formData.get('city'),
        state: formData.get('state'),
        pincode: formData.get('pincode'),
        landmark: formData.get('landmark'),
        type: formData.get('type')
      };
      
      try {
        const response = await fetch('/add-address', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(addressData)
        });
        
        const result = await response.json();
        
        if (result.success) {
          showSuccessAlert('Your address has been added successfully!', () => {
            window.location.href = '/address';
          });
        } else {
          // Show server validation errors if any
          if (result.errors && typeof result.errors === 'object') {
            // If server returns specific field errors
            for (const [field, message] of Object.entries(result.errors)) {
              const errorElement = document.getElementById(`${field}Error`);
              if (errorElement) {
                errorElement.textContent = message;
                showValidationError(field);
              }
            }
          } else {
            // Generic error at the top of the form
            const formContainer = document.querySelector('.form-container');
            const errorDiv = document.createElement('div');
            errorDiv.className = 'alert-error';
            errorDiv.textContent = result.message || 'Failed to save address. Please try again.';
            formContainer.insertBefore(errorDiv, formContainer.firstChild);
          }
        }
      } catch (error) {
        console.error('Error submitting form:', error);
        // Generic error at the top of the form
        const formContainer = document.querySelector('.form-container');
        const errorDiv = document.createElement('div');
        errorDiv.className = 'alert-error';
        errorDiv.textContent = 'Failed to save address. Please try again.';
        formContainer.insertBefore(errorDiv, formContainer.firstChild);
      }
    });
  </script>
</body>
</html>