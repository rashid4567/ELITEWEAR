<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>My Addresses | Elite Wear</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Outfit:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary-color: #0f172a;
      --secondary-color: #f8fafc;
      --accent-color: #3b82f6;
      --accent-hover: #2563eb;
      --accent-secondary: #8b5cf6;
      --accent-tertiary: #ec4899;
      --text-primary: #1e293b;
      --text-secondary: #64748b;
      --text-light: #94a3b8;
      --border-color: #e2e8f0;
      --card-bg: #ffffff;
      --sidebar-bg: #ffffff;
      --input-bg: #f8fafc;
      --input-border: #e2e8f0;
      --input-focus-border: #3b82f6;
      --input-focus-shadow: rgba(59, 130, 246, 0.1);
      --card-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.05);
      --card-hover-shadow: 0 20px 35px -10px rgba(0, 0, 0, 0.1);
      --gradient-primary: linear-gradient(135deg, #3b82f6, #8b5cf6);
      --gradient-secondary: linear-gradient(135deg, #8b5cf6, #ec4899);
      --gradient-accent: linear-gradient(135deg, #3b82f6, #10b981);
      --success-color: #10b981;
      --error-color: #ef4444;
      --warning-color: #f59e0b;
      --transition-fast: 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      --transition-normal: 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      --transition-slow: 0.5s cubic-bezier(0.4, 0, 0.2, 1);
      --border-radius-sm: 0.375rem;
      --border-radius: 0.5rem;
      --border-radius-lg: 0.75rem;
      --border-radius-xl: 1rem;
      --border-radius-full: 9999px;
      --font-primary: 'Outfit', sans-serif;
      --font-secondary: 'Playfair Display', serif;
      --menu-item-hover: rgba(59, 130, 246, 0.05);
      --menu-item-active: rgba(59, 130, 246, 0.1);
      --menu-item-active-border: var(--gradient-primary);
      --logout-hover: rgba(239, 68, 68, 0.05);
      --toggle-bg: #f1f5f9;
      --toggle-circle: #ffffff;
      --btn-primary-bg: var(--gradient-primary);
      --btn-primary-hover-bg: var(--gradient-secondary);
      --btn-primary-text: #ffffff;
      --btn-secondary-bg: #f1f5f9;
      --btn-secondary-text: #1e293b;
      --btn-secondary-hover-bg: #e2e8f0;
      --btn-danger-bg: linear-gradient(135deg, #ef4444, #f43f5e);
      --btn-danger-hover-bg: linear-gradient(135deg, #dc2626, #e11d48);
      --btn-success-bg: linear-gradient(135deg, #10b981, #059669);
      --btn-success-hover-bg: linear-gradient(135deg, #059669, #047857);
      --modal-bg: #ffffff;
      --modal-border: #e2e8f0;
      --toast-bg: #ffffff;
      --toast-border: #e2e8f0;
      --toast-success-bg: rgba(16, 185, 129, 0.1);
      --toast-success-border: rgba(16, 185, 129, 0.2);
      --toast-error-bg: rgba(239, 68, 68, 0.1);
      --toast-error-border: rgba(239, 68, 68, 0.2);
      --home-badge-bg: rgba(16, 185, 129, 0.1);
      --home-badge-color: #10b981;
      --work-badge-bg: rgba(59, 130, 246, 0.1);
      --work-badge-color: #3b82f6;
      --other-badge-bg: rgba(139, 92, 246, 0.1);
      --other-badge-color: #8b5cf6;
      --default-badge-bg: rgba(16, 185, 129, 0.1);
      --default-badge-color: #10b981;
    }

    /* Dark mode variables */
    [data-theme="dark"] {
      --primary-color: #f8fafc;
      --secondary-color: #0f172a;
      --text-primary: #f1f5f9;
      --text-secondary: #cbd5e1;
      --text-light: #94a3b8;
      --border-color: #334155;
      --card-bg: #1e293b;
      --sidebar-bg: #0f172a;
      --input-bg: #1e293b;
      --input-border: #334155;
      --input-focus-border: #3b82f6;
      --input-focus-shadow: rgba(59, 130, 246, 0.2);
      --card-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.2);
      --card-hover-shadow: 0 20px 35px -10px rgba(0, 0, 0, 0.3);
      --menu-item-hover: rgba(59, 130, 246, 0.15);
      --menu-item-active: rgba(59, 130, 246, 0.2);
      --logout-hover: rgba(239, 68, 68, 0.15);
      --toggle-bg: #334155;
      --toggle-circle: #0f172a;
      --btn-secondary-bg: #334155;
      --btn-secondary-text: #f1f5f9;
      --btn-secondary-hover-bg: #475569;
      --modal-bg: #1e293b;
      --modal-border: #334155;
      --toast-bg: #1e293b;
      --toast-border: #334155;
      --toast-success-bg: rgba(16, 185, 129, 0.15);
      --toast-success-border: rgba(16, 185, 129, 0.3);
      --toast-error-bg: rgba(239, 68, 68, 0.15);
      --toast-error-border: rgba(239, 68, 68, 0.3);
      --home-badge-bg: rgba(16, 185, 129, 0.15);
      --work-badge-bg: rgba(59, 130, 246, 0.15);
      --other-badge-bg: rgba(139, 92, 246, 0.15);
      --default-badge-bg: rgba(16, 185, 129, 0.15);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: var(--font-primary);
      color: var(--text-primary);
      background-color: var(--secondary-color);
      overflow-x: hidden;
      transition: background-color var(--transition-normal), color var(--transition-normal);
    }

    /* Scrollbar styling */
    ::-webkit-scrollbar {
      width: 6px;
      height: 6px;
    }

    ::-webkit-scrollbar-track {
      background: var(--secondary-color);
    }

    ::-webkit-scrollbar-thumb {
      background: var(--text-light);
      border-radius: var(--border-radius-full);
    }

    ::-webkit-scrollbar-thumb:hover {
      background: var(--text-secondary);
    }

    /* Main Container */
    .main-container {
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    .content-wrapper {
      flex: 1;
      display: flex;
      position: relative;
    }

    /* Sidebar Toggle Button */
    .sidebar-toggle {
      position: fixed;
      top: 1rem;
      left: 1rem;
      z-index: 1050;
      width: 40px;
      height: 40px;
      border-radius: var(--border-radius-full);
      background: var(--card-bg);
      color: var(--text-primary);
      border: none;
      box-shadow: var(--card-shadow);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all var(--transition-normal);
    }

    .sidebar-toggle:hover {
      background: var(--accent-color);
      color: white;
      transform: scale(1.05);
    }

    /* Main Content */
    .main-content {
      flex: 1;
      padding: 2rem;
      transition: all var(--transition-normal);
      position: relative;
      overflow: hidden;
    }

    .main-content::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%233b82f6' fill-opacity='0.03' fill-rule='evenodd'/%3E%3C/svg%3E");
      opacity: 0.5;
      z-index: -1;
    }

    @media (min-width: 768px) {
      .main-content {
        margin-left: 280px;
      }
    }

    /* Page Header */
    .page-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
      flex-wrap: wrap;
      gap: 1rem;
    }

    .header-content {
      flex: 1;
      min-width: 250px;
    }

    .breadcrumb-nav {
      margin-bottom: 0.5rem;
    }

    .breadcrumb {
      margin-bottom: 0;
      padding: 0;
      background: transparent;
    }

    .breadcrumb-item {
      font-size: 0.875rem;
      color: var(--text-secondary);
    }

    .breadcrumb-item a {
      color: var(--text-secondary);
      text-decoration: none;
      transition: color var(--transition-fast);
    }

    .breadcrumb-item a:hover {
      color: var(--accent-color);
    }

    .breadcrumb-item.active {
      color: var(--accent-color);
    }

    .breadcrumb-item + .breadcrumb-item::before {
      content: "/";
      color: var(--text-light);
    }

    .header-title {
      position: relative;
    }

    .header-title h1 {
      font-size: 1.75rem;
      font-weight: 600;
      margin-bottom: 0.25rem;
      background: var(--gradient-primary);
      -webkit-background-clip: text;
      background-clip: text;
      -webkit-text-fill-color: transparent;
      text-fill-color: transparent;
      display: inline-block;
    }

    .header-title p {
      color: var(--text-secondary);
      font-size: 1rem;
      margin-bottom: 0;
    }

    .header-actions {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    /* Add Address Button */
    .btn-add-address {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 0.75rem 1.5rem;
      font-size: 0.95rem;
      font-weight: 500;
      color: white;
      background: var(--gradient-primary);
      border: none;
      border-radius: var(--border-radius);
      text-decoration: none;
      transition: all var(--transition-normal);
      gap: 0.5rem;
      position: relative;
      overflow: hidden;
      z-index: 1;
      box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
    }

    .btn-add-address::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: var(--gradient-secondary);
      z-index: -1;
      opacity: 0;
      transition: opacity var(--transition-normal);
    }

    .btn-add-address:hover {
      transform: translateY(-3px);
      box-shadow: 0 6px 20px rgba(59, 130, 246, 0.4);
      color: white;
    }

    .btn-add-address:hover::before {
      opacity: 1;
    }

    .btn-add-address:active {
      transform: translateY(-1px);
    }

    .btn-icon {
      display: flex;
      align-items: center;
      justify-content: center;
    }

    /* Theme Toggle */
    .theme-toggle {
      position: relative;
      width: 48px;
      height: 24px;
      border-radius: var(--border-radius-full);
      background-color: var(--toggle-bg);
      cursor: pointer;
      transition: background-color var(--transition-normal);
      display: flex;
      align-items: center;
      padding: 0 4px;
      justify-content: space-between;
    }

    .theme-toggle .sun,
    .theme-toggle .moon {
      font-size: 12px;
      color: var(--text-primary);
      z-index: 1;
    }

    .theme-toggle .toggle-circle {
      position: absolute;
      top: 2px;
      left: 2px;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background-color: var(--toggle-circle);
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
      transition: transform var(--transition-normal);
    }

    [data-theme="dark"] .theme-toggle .toggle-circle {
      transform: translateX(24px);
    }

    /* Address List */
    .address-list-container {
      margin-bottom: 2rem;
    }

    .address-list {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 1.5rem;
    }

    .address-item {
      position: relative;
      transition: all var(--transition-normal);
      opacity: 0;
      transform: translateY(20px);
    }

    .address-item.fade-in {
      animation: fadeInUp 0.5s forwards;
    }

    .address-item.fade-out {
      animation: fadeOut 0.5s forwards;
    }

    .address-item.hover {
      transform: translateY(-5px);
    }

    .address-card {
      background-color: var(--card-bg);
      border-radius: var(--border-radius-lg);
      box-shadow: var(--card-shadow);
      padding: 1.5rem;
      height: 100%;
      transition: all var(--transition-normal);
      position: relative;
      overflow: hidden;
      display: flex;
      flex-direction: column;
    }

    .address-item:hover .address-card {
      box-shadow: var(--card-hover-shadow);
    }

    .address-item.is-default .address-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 4px;
      background: var(--gradient-accent);
    }

    .default-badge {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background-color: var(--default-badge-bg);
      color: var(--default-badge-color);
      font-size: 0.75rem;
      font-weight: 500;
      padding: 0.25rem 0.75rem;
      border-radius: var(--border-radius-full);
      display: flex;
      align-items: center;
      gap: 0.35rem;
      z-index: 1;
      backdrop-filter: blur(4px);
      -webkit-backdrop-filter: blur(4px);
      border: 1px solid rgba(16, 185, 129, 0.2);
    }

    .badge-icon {
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .address-header {
      margin-bottom: 1rem;
      position: relative;
    }

    .address-type-badge {
      display: inline-flex;
      align-items: center;
      gap: 0.35rem;
      padding: 0.25rem 0.75rem;
      border-radius: var(--border-radius-full);
      font-size: 0.75rem;
      font-weight: 500;
      margin-bottom: 0.75rem;
    }

    .address-type-badge i {
      font-size: 0.7rem;
    }

    .type-home {
      background-color: var(--home-badge-bg);
      color: var(--home-badge-color);
    }

    .type-work {
      background-color: var(--work-badge-bg);
      color: var(--work-badge-color);
    }

    .type-other {
      background-color: var(--other-badge-bg);
      color: var(--other-badge-color);
    }

    .address-name {
      font-size: 1.25rem;
      font-weight: 600;
      margin-bottom: 0;
      color: var(--text-primary);
    }

    .address-body {
      flex: 1;
      margin-bottom: 1.5rem;
    }

    .address-text {
      color: var(--text-secondary);
      font-size: 0.95rem;
      line-height: 1.5;
    }

    .address-text p {
      margin-bottom: 0.5rem;
    }

    .address-text p:last-child {
      margin-bottom: 0;
    }

    .address-landmark, .address-phone {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      margin-top: 0.75rem;
    }

    .address-landmark i, .address-phone i {
      color: var(--accent-color);
      font-size: 0.85rem;
    }

    .address-actions {
      position: absolute;
      top: 1rem;
      right: 1rem;
      display: flex;
      gap: 0.5rem;
      opacity: 0;
      transform: translateY(-10px);
      transition: all var(--transition-normal);
      z-index: 2;
    }

    .is-default .address-actions {
      top: 3rem;
    }

    .address-item:hover .address-actions {
      opacity: 1;
      transform: translateY(0);
    }

    .action-btn {
      width: 32px;
      height: 32px;
      border-radius: var(--border-radius-full);
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--card-bg);
      color: var(--text-secondary);
      border: 1px solid var(--border-color);
      cursor: pointer;
      transition: all var(--transition-fast);
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    }

    .action-btn:hover {
      transform: translateY(-2px);
    }

    .edit-btn:hover {
      background-color: var(--accent-color);
      color: white;
      border-color: var(--accent-color);
    }

    .default-btn:hover {
      background-color: var(--success-color);
      color: white;
      border-color: var(--success-color);
    }

    .delete-btn:hover {
      background-color: var(--error-color);
      color: white;
      border-color: var(--error-color);
    }

    .address-footer {
      border-top: 1px solid var(--border-color);
      padding-top: 1rem;
      display: flex;
      justify-content: flex-end;
    }

    .footer-actions {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
    }

    /* Buttons */
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 0.5rem 1rem;
      font-size: 0.875rem;
      font-weight: 500;
      border-radius: var(--border-radius);
      transition: all var(--transition-normal);
      gap: 0.35rem;
      position: relative;
      overflow: hidden;
      z-index: 1;
    }

    .btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(255, 255, 255, 0.1);
      z-index: -1;
      transform: scaleX(0);
      transform-origin: right;
      transition: transform var(--transition-normal);
    }

    .btn:hover::before {
      transform: scaleX(1);
      transform-origin: left;
    }

    .btn-primary {
      background: var(--btn-primary-bg);
      color: var(--btn-primary-text);
      border: none;
    }

    .btn-primary:hover {
      box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
      transform: translateY(-2px);
      color: var(--btn-primary-text);
    }

    .btn-outline-primary {
      background-color: transparent;
      color: var(--accent-color);
      border: 1px solid var(--accent-color);
    }

    .btn-outline-primary:hover {
      background-color: var(--accent-color);
      color: white;
      transform: translateY(-2px);
    }

    .btn-outline-secondary {
      background-color: transparent;
      color: var(--text-secondary);
      border: 1px solid var(--border-color);
    }

    .btn-outline-secondary:hover {
      background-color: var(--btn-secondary-bg);
      color: var(--btn-secondary-text);
      transform: translateY(-2px);
    }

    .btn-outline-success {
      background-color: transparent;
      color: var(--success-color);
      border: 1px solid var(--success-color);
    }

    .btn-outline-success:hover {
      background-color: var(--success-color);
      color: white;
      transform: translateY(-2px);
    }

    .btn-outline-danger {
      background-color: transparent;
      color: var(--error-color);
      border: 1px solid var(--error-color);
    }

    .btn-outline-danger:hover {
      background-color: var(--error-color);
      color: white;
      transform: translateY(-2px);
    }

    .btn-danger {
      background: var(--btn-danger-bg);
      color: white;
      border: none;
    }

    .btn-danger:hover {
      box-shadow: 0 4px 15px rgba(239, 68, 68, 0.3);
      transform: translateY(-2px);
    }

    .btn-success {
      background: var(--btn-success-bg);
      color: white;
      border: none;
    }

    .btn-success:hover {
      box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3);
      transform: translateY(-2px);
    }

    .btn:disabled {
      opacity: 0.7;
      cursor: not-allowed;
      pointer-events: none;
    }

    /* Empty State */
    .empty-state {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 3rem 1rem;
      text-align: center;
      background-color: var(--card-bg);
      border-radius: var(--border-radius-lg);
      box-shadow: var(--card-shadow);
    }

    .empty-state-content {
      max-width: 400px;
    }

    .empty-state-icon {
      width: 80px;
      height: 80px;
      border-radius: var(--border-radius-full);
      background: var(--gradient-primary);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 2rem;
      margin-bottom: 1.5rem;
      position: relative;
      overflow: hidden;
    }

    .empty-state-icon::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(to bottom, rgba(255, 255, 255, 0.2), transparent);
      border-radius: inherit;
    }

    .empty-state h2 {
      font-size: 1.5rem;
      font-weight: 600;
      margin-bottom: 0.75rem;
      color: var(--text-primary);
    }

    .empty-state p {
      color: var(--text-secondary);
      margin-bottom: 1.5rem;
    }

    .btn-primary {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 0.75rem 1.5rem;
      font-size: 0.95rem;
      font-weight: 500;
      color: white;
      background: var(--gradient-primary);
      border: none;
      border-radius: var(--border-radius);
      text-decoration: none;
      transition: all var(--transition-normal);
      gap: 0.5rem;
    }

    .btn-primary:hover {
      background: var(--gradient-secondary);
      transform: translateY(-3px);
      box-shadow: 0 6px 20px rgba(59, 130, 246, 0.4);
    }

    /* Modal */
    .modal-content {
      background-color: var(--modal-bg);
      border: 1px solid var(--modal-border);
      border-radius: var(--border-radius-lg);
      box-shadow: var(--card-shadow);
    }

    .modal-header {
      border-bottom: 1px solid var(--border-color);
      padding: 1.25rem 1.5rem;
    }

    .modal-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text-primary);
    }

    .btn-close {
      color: var(--text-secondary);
      background: transparent;
      border: none;
      font-size: 1.5rem;
      line-height: 1;
      padding: 0.25rem;
      opacity: 0.7;
      transition: opacity var(--transition-fast);
    }

    .btn-close:hover {
      opacity: 1;
    }

    .modal-body {
      padding: 1.5rem;
      text-align: center;
    }

    .modal-icon {
      width: 64px;
      height: 64px;
      border-radius: var(--border-radius-full);
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 1.25rem;
      font-size: 1.75rem;
    }

    .modal-icon.danger {
      background-color: rgba(239, 68, 68, 0.1);
      color: var(--error-color);
    }

    .modal-icon.success {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--success-color);
    }

    .modal-message {
      color: var(--text-secondary);
      font-size: 1rem;
      margin-bottom: 0;
    }

    .modal-footer {
      border-top: 1px solid var(--border-color);
      padding: 1rem 1.5rem;
      display: flex;
      justify-content: flex-end;
      gap: 0.75rem;
    }

    /* Toast */
    .toast-container {
      z-index: 1060;
    }

    .toast {
      background-color: var(--toast-bg);
      border: 1px solid var(--toast-border);
      border-radius: var(--border-radius);
      box-shadow: var(--card-shadow);
      overflow: hidden;
    }

    .toast.bg-success {
      background-color: var(--toast-success-bg) !important;
      border-color: var(--toast-success-border);
    }

    .toast.bg-danger {
      background-color: var(--toast-error-bg) !important;
      border-color: var(--toast-error-border);
    }

    .toast-header {
      background-color: transparent;
      border-bottom: 1px solid var(--border-color);
      padding: 0.75rem 1rem;
    }

    .toast.bg-success .toast-header {
      color: var(--success-color);
      border-bottom-color: var(--toast-success-border);
    }

    .toast.bg-danger .toast-header {
      color: var(--error-color);
      border-bottom-color: var(--toast-error-border);
    }

    .toast-body {
      padding: 1rem;
      color: var(--text-primary);
    }

    .toast.bg-success .toast-body {
      color: var(--success-color);
    }

    .toast.bg-danger .toast-body {
      color: var(--error-color);
    }

    /* Page Transition */
    .page-transition {
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    /* Animation Keyframes */
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes fadeOut {
      from {
        opacity: 1;
        transform: translateY(0);
      }
      to {
        opacity: 0;
        transform: translateY(20px);
      }
    }

    @keyframes pulse {
      0% {
        box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.4);
      }
      70% {
        box-shadow: 0 0 0 10px rgba(59, 130, 246, 0);
      }
      100% {
        box-shadow: 0 0 0 0 rgba(59, 130, 246, 0);
      }
    }

    /* Ripple Effect */
    .ripple {
      position: absolute;
      border-radius: 50%;
      transform: scale(0);
      background-color: rgba(255, 255, 255, 0.4);
      pointer-events: none;
      animation: ripple 0.6s linear;
    }

    @keyframes ripple {
      to {
        transform: scale(2);
        opacity: 0;
      }
    }

    /* Responsive Styles */
    @media (max-width: 991px) {
      .address-list {
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      }
    }

    @media (max-width: 767px) {
      .main-content {
        margin-left: 0;
        padding: 1.5rem;
        padding-top: 4rem;
      }

      .page-header {
        flex-direction: column;
        align-items: flex-start;
      }

      .header-actions {
        width: 100%;
      }

      .btn-add-address {
        width: 100%;
        justify-content: center;
      }

      .address-list {
        grid-template-columns: 1fr;
      }

      .footer-actions {
        flex-direction: column;
        width: 100%;
      }

      .footer-actions .btn {
        width: 100%;
      }
    }

    @media (max-width: 576px) {
      .main-content {
        padding: 1rem;
        padding-top: 4rem;
      }

      .header-title h1 {
        font-size: 1.5rem;
      }

      .header-title p {
        font-size: 0.9rem;
      }

      .address-card {
        padding: 1.25rem;
      }

      .address-name {
        font-size: 1.1rem;
      }

      .address-text {
        font-size: 0.9rem;
      }

      .empty-state {
        padding: 2rem 1rem;
      }

      .empty-state-icon {
        width: 70px;
        height: 70px;
        font-size: 1.75rem;
      }

      .empty-state h2 {
        font-size: 1.25rem;
      }

      .empty-state p {
        font-size: 0.9rem;
      }
    }

    /* Sidebar (included for reference, actual sidebar is in a separate file) */
    .sidebar {
      width: 280px;
      height: 100vh;
      position: fixed;
      top: 0;
      left: 0;
      background-color: var(--sidebar-bg);
      box-shadow: var(--card-shadow);
      z-index: 1040;
      transition: transform var(--transition-normal), box-shadow var(--transition-normal), background-color var(--transition-normal);
      display: flex;
      flex-direction: column;
      overflow-y: auto;
      transform: translateX(-100%);
      border-right: 1px solid var(--border-color);
    }

    .sidebar.show {
      transform: translateX(0);
    }

    @media (min-width: 768px) {
      .sidebar {
        transform: translateX(0);
      }
      
      .sidebar-toggle {
        display: none;
      }
    }
  </style>
</head>
<body>
  <div class="main-container">
    <!-- Include Header -->
    <%- include("../partials/user/header") %>

    <div class="content-wrapper">
      <!-- Sidebar Toggle Button (Mobile) -->
      <button class="sidebar-toggle d-md-none" id="sidebarToggle">
        <i class="fas fa-bars"></i>
      </button>
      
      <!-- Include Sidebar -->
      <%- include("../partials/user/profileSidebar") %>

      
      <!-- Main Content -->
      <main class="main-content">
        <!-- Page Header -->
        <section class="page-header">
          <div class="header-content">
            <div class="breadcrumb-nav">
              <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                  <li class="breadcrumb-item"><a href="/"><i class="fas fa-home"></i></a></li>
                  <li class="breadcrumb-item"><a href="/profile">My Account</a></li>
                  <li class="breadcrumb-item active" aria-current="page">Addresses</li>
                </ol>
              </nav>
            </div>
            <div class="header-title">
              <h1>My Addresses</h1>
              <p>Manage your delivery locations</p>
            </div>
            
            <div class="theme-toggle d-none d-md-flex" id="themeToggle">
              <i class="fas fa-sun sun"></i>
              <i class="fas fa-moon moon"></i>
              <span class="toggle-circle"></span>
            </div>
          </div>
          
          <div class="header-actions">
            <a href="/getaddAddress" class="btn-add-address">
              <span class="btn-icon"><i class="fas fa-plus"></i></span>
              <span class="btn-text">Add New Address</span>
            </a>
          </div>
        </section>
        
        <!-- Address List -->
        <section class="address-list-container">
          <% if (addresses && addresses.length > 0) { %>
            <div class="address-list">
              <% addresses.forEach(address => { %>
                <div class="address-item <%= address.isDefault ? 'is-default' : '' %>">
                  <div class="address-card">
                    <% if (address.isDefault) { %>
                      <div class="default-badge">
                        <span class="badge-icon"><i class="fas fa-check"></i></span>
                        <span class="badge-text">Default</span>
                      </div>
                    <% } %>
                    
                    <div class="address-header">
                      <div class="address-type-badge type-<%= address.type.toLowerCase() %>">
                        <i class="fas fa-<%= address.type === 'home' ? 'home' : (address.type === 'work' ? 'briefcase' : 'map-marker-alt') %>"></i>
                        <%= address.type.charAt(0).toUpperCase() + address.type.slice(1) %>
                      </div>
                      <h3 class="address-name"><%= address.fullname %></h3>
                    </div>
                    
                    <div class="address-body">
                      <div class="address-text">
                        <p><%= address.address %></p>
                        <p><%= address.district %>, <%= address.city %></p>
                        <p><%= address.state %> - <%= address.pincode %></p>
                        <% if (address.landmark) { %>
                          <p class="address-landmark">
                            <i class="fas fa-landmark"></i> <%= address.landmark %>
                          </p>
                        <% } %>
                        <p class="address-phone">
                          <i class="fas fa-phone-alt"></i> <%= address.mobile %>
                        </p>
                      </div>
                    </div>
                    
                    <div class="address-actions">
                      <a href="/getaddress-edit/<%= address._id %>" class="action-btn edit-btn" data-bs-toggle="tooltip" title="Edit Address">
                        <i class="fas fa-edit"></i>
                      </a>
                      
                      <% if (!address.isDefault) { %>
                        <button type="button" class="action-btn default-btn set-default-btn" data-address-id="<%= address._id %>" data-bs-toggle="tooltip" title="Set as Default">
                          <i class="fas fa-check-circle"></i>
                        </button>
                      <% } %>
                      
                      <button type="button" class="action-btn delete-btn delete-address-btn" data-address-id="<%= address._id %>" data-bs-toggle="tooltip" title="Delete Address">
                        <i class="fas fa-trash-alt"></i>
                      </button>
                    </div>
                    
                    <div class="address-footer">
                      <div class="footer-actions">
                        <a href="/getaddress-edit/<%= address._id %>" class="btn btn-outline-primary">
                          <i class="fas fa-edit"></i> Edit
                        </a>
                        
                        <% if (!address.isDefault) { %>
                          <button type="button" class="btn btn-outline-secondary set-default-btn" data-address-id="<%= address._id %>">
                            <i class="fas fa-check-circle"></i> Set as Default
                          </button>
                        <% } else { %>
                          <button type="button" class="btn btn-outline-success" disabled>
                            <i class="fas fa-check"></i> Default Address
                          </button>
                        <% } %>
                        
                        <button type="button" class="btn btn-outline-danger delete-address-btn" data-address-id="<%= address._id %>">
                          <i class="fas fa-trash-alt"></i> Delete
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              <% }); %>
            </div>
          <% } else { %>
            <div class="empty-state">
              <div class="empty-state-content">
                <div class="empty-state-icon">
                  <i class="fas fa-map-marker-alt"></i>
                </div>
                <h2>No addresses found</h2>
                <p>You haven't added any delivery locations to your account yet.</p>
                <a href="/getaddAddress" class="btn-primary">
                  <i class="fas fa-plus"></i> Add Your First Address
                </a>
              </div>
            </div>
          <% } %>
        </section>
      </main>
    </div>
    
    <!-- Include Footer -->
    <%- include("../partials/user/footer") %>
  </div>

  <!-- Confirmation Modal -->
  <div class="modal fade" id="confirmationModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="modalTitle"></h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="modal-body">
          <div class="modal-icon" id="modalIcon">
            <i class="fas"></i>
          </div>
          <p class="modal-message" id="modalMessage"></p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal" id="cancelBtn">Cancel</button>
          <button type="button" class="btn" id="confirmBtn"></button>
        </div>
      </div>
    </div>
  </div>

  <!-- Toast Notifications -->
  <div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="notificationToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <i class="fas fa-bell me-2"></i>
        <strong class="me-auto" id="toastTitle"></strong>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close">
          <i class="fas fa-times"></i>
        </button>
      </div>
      <div class="toast-body" id="toastMessage"></div>
    </div>
  </div>

  <!-- Bootstrap Bundle with Popper -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      // Check for saved theme preference
      const savedTheme = localStorage.getItem('theme');
      if (savedTheme) {
        document.documentElement.setAttribute('data-theme', savedTheme);
      } else {
        // Check for system preference
        const prefersDarkScheme = window.matchMedia('(prefers-color-scheme: dark)');
        if (prefersDarkScheme.matches) {
          document.documentElement.setAttribute('data-theme', 'dark');
        }
      }
      
      // Theme toggle functionality
      const themeToggle = document.getElementById('themeToggle');
      if (themeToggle) {
        themeToggle.addEventListener('click', function() {
          const currentTheme = document.documentElement.getAttribute('data-theme');
          const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
          
          document.documentElement.setAttribute('data-theme', newTheme);
          localStorage.setItem('theme', newTheme);
          
          // Add transition effect
          document.body.style.transition = 'background-color 0.5s ease, color 0.5s ease';
          setTimeout(() => {
            document.body.style.transition = '';
          }, 500);
        });
      }
      
      // Initialize tooltips
      const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
      tooltipTriggerList.map(function(tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl, {
          boundary: document.body
        });
      });
      
      // Initialize modal
      const confirmationModal = new bootstrap.Modal(document.getElementById('confirmationModal'));
      
      // Initialize toast
      const notificationToast = new bootstrap.Toast(document.getElementById('notificationToast'), {
        delay: 5000
      });
      
      // Show notification toast
      function showNotification(title, message, isSuccess = true) {
        const toastEl = document.getElementById('notificationToast');
        const toastTitle = document.getElementById('toastTitle');
        const toastMessage = document.getElementById('toastMessage');
        
        toastEl.classList.remove('bg-success', 'bg-danger', 'text-white');
        if (isSuccess) {
          toastEl.classList.add('bg-success', 'text-white');
        } else {
          toastEl.classList.add('bg-danger', 'text-white');
        }
        
        toastTitle.textContent = title;
        toastMessage.textContent = message;
        
        notificationToast.show();
      }
      
      // Show confirmation modal
      function showConfirmation(options) {
        const { title, message, confirmText, confirmClass, iconClass, onConfirm } = options;
        
        document.getElementById('modalTitle').textContent = title;
        document.getElementById('modalMessage').textContent = message;
        
        const confirmBtn = document.getElementById('confirmBtn');
        confirmBtn.textContent = confirmText;
        confirmBtn.className = `btn ${confirmClass}`;
        
        const modalIcon = document.getElementById('modalIcon');
        modalIcon.className = `modal-icon ${iconClass}`;
        modalIcon.querySelector('i').className = `fas ${iconClass === 'danger' ? 'fa-trash-alt' : 'fa-check-circle'}`;
        
        // Remove previous event listener
        const newConfirmBtn = confirmBtn.cloneNode(true);
        confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);
        
        // Add new event listener
        newConfirmBtn.addEventListener('click', function() {
          confirmationModal.hide();
          if (typeof onConfirm === 'function') {
            onConfirm();
          }
        });
        
        confirmationModal.show();
      }
      
      // Delete address
      async function deleteAddress(addressId) {
        try {
          // Show loading state on buttons
          const deleteButtons = document.querySelectorAll(`.delete-address-btn[data-address-id="${addressId}"]`);
          deleteButtons.forEach(btn => {
            const originalContent = btn.innerHTML;
            btn.setAttribute('data-original-content', originalContent);
            btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Deleting...';
            btn.disabled = true;
          });
          
          // Call the delete API
          const response = await fetch(`/remove-address/${addressId}`, {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          const result = await response.json();
          
          if (result.success) {
            // Show success notification
            showNotification('Success', 'Address deleted successfully', true);
            
            // Remove the address item with animation
            const addressItems = document.querySelectorAll(`.address-item`);
            addressItems.forEach(item => {
              const deleteBtn = item.querySelector(`.delete-address-btn[data-address-id="${addressId}"]`);
              if (deleteBtn) {
                item.classList.add('fade-out');
                setTimeout(() => {
                  item.remove();
                  
                  // Check if there are no addresses left
                  const remainingAddresses = document.querySelectorAll('.address-item');
                  if (remainingAddresses.length === 0) {
                    // Show empty state
                    const addressList = document.querySelector('.address-list');
                    if (addressList) {
                      addressList.innerHTML = `
                        <div class="empty-state">
                          <div class="empty-state-content">
                            <div class="empty-state-icon">
                              <i class="fas fa-map-marker-alt"></i>
                            </div>
                            <h2>No addresses found</h2>
                            <p>You haven't added any delivery addresses to your account yet.</p>
                            <a href="/getaddAddress" class="btn-primary">
                              <i class="fas fa-plus"></i> Add Your First Address
                            </a>
                          </div>
                        </div>
                      `;
                    }
                  }
                }, 500);
              }
            });
          } else {
            // Show error notification
            showNotification('Error', result.message || 'Failed to delete address', false);
            
            // Reset buttons
            deleteButtons.forEach(btn => {
              btn.innerHTML = btn.getAttribute('data-original-content');
              btn.disabled = false;
            });
          }
        } catch (error) {
          console.error('Error deleting address:', error);
          
          // Show error notification
          showNotification('Error', 'An unexpected error occurred', false);
          
          // Reset buttons
          const deleteButtons = document.querySelectorAll(`.delete-address-btn[data-address-id="${addressId}"]`);
          deleteButtons.forEach(btn => {
            btn.innerHTML = btn.getAttribute('data-original-content');
            btn.disabled = false;
          });
        }
      }
      
      // Set default address
      async function setDefaultAddress(addressId) {
        try {
          // Show loading state on buttons
          const defaultButtons = document.querySelectorAll(`.set-default-btn[data-address-id="${addressId}"]`);
          defaultButtons.forEach(btn => {
            const originalContent = btn.innerHTML;
            btn.setAttribute('data-original-content', originalContent);
            btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Setting...';
            btn.disabled = true;
          });
          
          // Call the set default API
          const response = await fetch(`/set-default-address/${addressId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          const result = await response.json();
          
          if (result.success) {
            // Show success notification
            showNotification('Success', 'Default address updated successfully', true);
            
            // Reload the page with a smooth transition
            document.body.classList.add('page-transition');
            setTimeout(() => {
              window.location.reload();
            }, 300);
          } else {
            // Show error notification
            showNotification('Error', result.message || 'Failed to update default address', false);
            
            // Reset buttons
            defaultButtons.forEach(btn => {
              btn.innerHTML = btn.getAttribute('data-original-content');
              btn.disabled = false;
            });
          }
        } catch (error) {
          console.error('Error setting default address:', error);
          
          // Show error notification
          showNotification('Error', 'An unexpected error occurred', false);
          
          // Reset buttons
          const defaultButtons = document.querySelectorAll(`.set-default-btn[data-address-id="${addressId}"]`);
          defaultButtons.forEach(btn => {
            btn.innerHTML = btn.getAttribute('data-original-content');
            btn.disabled = false;
          });
        }
      }
      
      // Toggle sidebar on mobile
      const sidebarToggle = document.getElementById('sidebarToggle');
      if (sidebarToggle) {
        sidebarToggle.addEventListener('click', function() {
          document.querySelector('.sidebar').classList.toggle('show');
        });
      }
      
      // Close sidebar when clicking outside on mobile
      document.addEventListener('click', function(event) {
        const sidebar = document.querySelector('.sidebar');
        const sidebarToggle = document.getElementById('sidebarToggle');
        
        if (sidebar && sidebarToggle && 
            window.innerWidth < 768 && 
            sidebar.classList.contains('show') && 
            !sidebar.contains(event.target) && 
            event.target !== sidebarToggle) {
          sidebar.classList.remove('show');
        }
      });
      
      // Add event listeners to delete buttons
      document.querySelectorAll('.delete-address-btn').forEach(button => {
        button.addEventListener('click', function() {
          const addressId = this.getAttribute('data-address-id');
          
          showConfirmation({
            title: 'Delete Address',
            message: 'Are you sure you want to delete this address? This action cannot be undone.',
            confirmText: 'Delete',
            confirmClass: 'btn-danger',
            iconClass: 'danger',
            onConfirm: () => deleteAddress(addressId)
          });
        });
      });
      
      // Add event listeners to set default buttons
      document.querySelectorAll('.set-default-btn').forEach(button => {
        button.addEventListener('click', function() {
          const addressId = this.getAttribute('data-address-id');
          
          showConfirmation({
            title: 'Set Default Address',
            message: 'Are you sure you want to set this as your default address?',
            confirmText: 'Set as Default',
            confirmClass: 'btn-success',
            iconClass: 'success',
            onConfirm: () => setDefaultAddress(addressId)
          });
        });
      });
      
      // Add hover effects
      document.querySelectorAll('.address-item').forEach(item => {
        item.addEventListener('mouseenter', function() {
          this.classList.add('hover');
        });
        
        item.addEventListener('mouseleave', function() {
          this.classList.remove('hover');
        });
      });
      
      // Add animation classes on page load
      document.querySelectorAll('.address-item').forEach((item, index) => {
        item.style.animationDelay = `${index * 0.1}s`;
        item.classList.add('fade-in');
      });
      
      // Add ripple effect to buttons
      document.querySelectorAll('.btn, .btn-add-address, .action-btn').forEach(btn => {
        btn.addEventListener('click', createRippleEffect);
      });
    });
    
    // Ripple effect function
    function createRippleEffect(event) {
      const button = event.currentTarget;
      
      const circle = document.createElement('span');
      const diameter = Math.max(button.clientWidth, button.clientHeight);
      const radius = diameter / 2;
      
      circle.style.width = circle.style.height = `${diameter}px`;
      circle.style.left = `${event.clientX - button.getBoundingClientRect().left - radius}px`;
      circle.style.top = `${event.clientY - button.getBoundingClientRect().top - radius}px`;
      circle.classList.add('ripple');
      
      const ripple = button.querySelector('.ripple');
      if (ripple) {
        ripple.remove();
      }
      
      button.appendChild(circle);
    }
  </script>
</body>
</html>
