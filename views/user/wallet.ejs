<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Elite Wear | My Wallet</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Outfit:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/userStyle/wallet.css">
  </head>
  <body>
    <%- include("../partials/user/header") %>
    
    <div class="page-wrapper">
      <div class="container">
        <div class="row g-4">
          <!-- Sidebar Column -->
          <div class="col-lg-3 col-md-4">
            <%- include("../partials/user/profileSidebar") %>
          </div>
          
          <!-- Main Content Column -->
          <div class="col-lg-9 col-md-8">
            <div class="content-container">
              <!-- Page Header -->
              <div class="page-header">
                <div class="header-content">
                  <div class="breadcrumb-nav">
                    <nav aria-label="breadcrumb">
                      <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/"><i class="fas fa-home"></i></a></li>
                        <li class="breadcrumb-item"><a href="/profile">My Account</a></li>
                        <li class="breadcrumb-item active" aria-current="page">Wallet</li>
                      </ol>
                    </nav>
                  </div>
                  <div class="header-title">
                    <h1><i class="fas fa-wallet me-2"></i> My Wallet</h1>
                    <p>Manage your funds and view transaction history</p>
                  </div>
                </div>
              </div>
              
              <!-- Wallet Dashboard -->
              <div class="wallet-dashboard">
                <div class="row g-4">
                  <!-- Balance Card -->
                  <div class="col-lg-5">
                    <div class="balance-card">
                      <div class="balance-card-inner">
                        <div class="card-pattern"></div>
                        <div class="card-content">
                          <div class="card-label">Available Balance</div>
                          <div class="card-amount">₹<%= wallet.amount.toFixed(2) %></div>
                          <div class="card-actions">
                            <button class="btn-add-money" data-bs-toggle="modal" data-bs-target="#addMoneyModal">
                              <i class="fas fa-plus"></i> Add Money
                            </button>
                          </div>
                        </div>
                        <div class="card-brand">
                          <div class="brand-logo">
                            <i class="fas fa-wallet"></i> Elite Wallet
                          </div>
                          <div class="card-chip">
                            <i class="fas fa-credit-card"></i>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Quick Stats -->
                    <div class="stats-container">
                      
                      
                      
                    </div>
                  </div>
                  
                  <!-- Transaction Summary -->
                  <div class="col-lg-7">
                    <div class="transaction-summary">
                      <div class="summary-header">
                        <h3><i class="fas fa-history me-2"></i> Recent Activity</h3>
                        <div class="summary-filters">
                          <div class="dropdown">
                            <button class="btn-filter dropdown-toggle" type="button" id="filterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                              
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="filterDropdown">
                              <li><a class="dropdown-item" href="/wallet?filter=all">All Transactions</a></li>
                              <li><a class="dropdown-item" href="/wallet?filter=credit">Money Added</a></li>
                              <li><a class="dropdown-item" href="/wallet?filter=debit">Money Spent</a></li>
                            </ul>
                          </div>
                        </div>
                      </div>
                      
                      <div class="summary-body">
                        <% if (wallet.transactions && wallet.transactions.length > 0) { %>
                          <div class="transaction-list">
                            <% wallet.transactions.slice(0, 5).forEach(transaction => { %>
                              <div class="transaction-item">
                                <div class="transaction-icon <%= transaction.type === 'credit' ? 'credit' : 'debit' %>">
                                  <i class="fas <%= transaction.type === 'credit' ? 'fa-arrow-down' : 'fa-arrow-up' %>"></i>
                                </div>
                                <div class="transaction-details">
                                  <div class="transaction-title"><%= transaction.description %></div>
                                  <div class="transaction-meta">
                                    <span class="transaction-date"><i class="far fa-calendar-alt"></i> <%= transaction.formattedDate %></span>
                                    <span class="transaction-id"><i class="fas fa-hashtag"></i> <%= transaction.transactionRef %></span>
                                  </div>
                                </div>
                                <div class="transaction-amount <%= transaction.type === 'credit' ? 'credit' : 'debit' %>">
                                  <%= transaction.type === 'credit' ? '+' : '-' %>₹<%= transaction.amount.toFixed(2) %>
                                </div>
                              </div>
                            <% }) %>
                          </div>
                          
                          <div class="summary-footer">
                            <a href="#transaction-history" class="btn-view-all">
                              View All Transactions <i class="fas fa-chevron-right"></i>
                            </a>
                          </div>
                        <% } else { %>
                          <div class="empty-summary">
                            <div class="empty-icon">
                              <i class="fas fa-receipt"></i>
                            </div>
                            <h4>No Recent Activity</h4>
                            <p>Your recent transactions will appear here</p>
                          </div>
                        <% } %>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- Transaction History -->
              <div id="transaction-history" class="transaction-history">
                <div class="section-header">
                  <h2><i class="fas fa-list-alt me-2"></i> Transaction History</h2>
                  <div class="section-actions">
                    <div class="dropdown">
                      <button class="btn-export dropdown-toggle" type="button" id="exportDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="fas fa-download"></i> Export
                      </button>
                      <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="exportDropdown">
                        <li><a class="dropdown-item" href="/wallet/export?format=pdf"><i class="far fa-file-pdf"></i> Export as PDF</a></li>
                        <li><a class="dropdown-item" href="/wallet/export?format=csv"><i class="far fa-file-excel"></i> Export as CSV</a></li>
                      </ul>
                    </div>
                  </div>
                </div>
                
                <% if (wallet.transactions && wallet.transactions.length > 0) { %>
                  <div class="table-responsive">
                    <table class="table transaction-table">
                      <thead>
                        <tr>
                          <th>Transaction ID</th>
                          <th>Date & Time</th>
                          <th>Description</th>
                          <th>Amount</th>
                          <th>Type</th>
                        </tr>
                      </thead>
                      <tbody>
                        <% wallet.transactions.forEach(transaction => { %>
                          <tr>
                            <td class="transaction-id-cell">
                              <span class="transaction-id-text"><%= transaction.transactionRef %></span>
                            </td>
                            <td><%= transaction.formattedDate %></td>
                            <td><%= transaction.description %></td>
                            <td class="amount-cell">₹<%= transaction.amount.toFixed(2) %></td>
                            <td>
                              <span class="transaction-badge <%= transaction.type === 'credit' ? 'credit' : 'debit' %>">
                                <%= transaction.type === 'credit' ? 'Credit' : 'Debit' %>
                              </span>
                            </td>
                          </tr>
                        <% }) %>
                      </tbody>
                    </table>
                  </div>
                  
                  <!-- Pagination -->
                  <% if (totalPages > 1) { %>
                    <div class="pagination-wrapper">
                      <nav aria-label="Transaction history pagination">
                        <ul class="pagination">
                          <!-- Previous Page -->
                          <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                            <a class="page-link" href="/wallet?page=<%= currentPage - 1 %>" aria-label="Previous" <%= currentPage === 1 ? 'tabindex="-1" aria-disabled="true"' : '' %>>
                              <i class="fas fa-chevron-left"></i>
                            </a>
                          </li>
                          
                          <!-- First Page -->
                          <% if (currentPage > 3) { %>
                            <li class="page-item">
                              <a class="page-link" href="/wallet?page=1">1</a>
                            </li>
                            <% if (currentPage > 4) { %>
                              <li class="page-item disabled">
                                <span class="page-link">...</span>
                              </li>
                            <% } %>
                          <% } %>
                          
                          <!-- Page Numbers -->
                          <% 
                            let startPage = Math.max(1, currentPage - 1);
                            let endPage = Math.min(totalPages, currentPage + 1);
                            
                            if (endPage - startPage + 1 < 3) {
                              if (currentPage < totalPages) {
                                endPage = Math.min(totalPages, currentPage + 2);
                              } else {
                                startPage = Math.max(1, totalPages - 2);
                              }
                            }
                            
                            for (let i = startPage; i <= endPage; i++) {
                          %>
                            <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                              <a class="page-link" href="/wallet?page=<%= i %>"><%= i %></a>
                            </li>
                          <% } %>
                          
                          <!-- Last Page -->
                          <% if (currentPage < totalPages - 2) { %>
                            <% if (currentPage < totalPages - 3) { %>
                              <li class="page-item disabled">
                                <span class="page-link">...</span>
                              </li>
                            <% } %>
                            <li class="page-item">
                              <a class="page-link" href="/wallet?page=<%= totalPages %>"><%= totalPages %></a>
                            </li>
                          <% } %>
                          
                          <!-- Next Page -->
                          <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                            <a class="page-link" href="/wallet?page=<%= currentPage + 1 %>" aria-label="Next" <%= currentPage === totalPages ? 'tabindex="-1" aria-disabled="true"' : '' %>>
                              <i class="fas fa-chevron-right"></i>
                            </a>
                          </li>
                        </ul>
                      </nav>
                      
                      <div class="pagination-info">
                        Showing page <%= currentPage %> of <%= totalPages %>
                      </div>
                    </div>
                  <% } %>
                <% } else { %>
                  <div class="empty-state">
                    <div class="empty-state-content">
                      <div class="empty-state-icon">
                        <i class="fas fa-receipt"></i>
                      </div>
                      <h3>No Transactions Yet</h3>
                      <p>Your transaction history will appear here once you start using your wallet.</p>
                      <button class="btn-primary mt-4" data-bs-toggle="modal" data-bs-target="#addMoneyModal">
                        <i class="fas fa-plus"></i> Add Your First Funds
                      </button>
                    </div>
                  </div>
                <% } %>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Add Money Modal -->
    <div class="modal fade" id="addMoneyModal" tabindex="-1" aria-labelledby="addMoneyModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="addMoneyModalLabel">
              <i class="fas fa-wallet me-2"></i> Add Money to Wallet
            </h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="addMoneyForm">
              <div class="form-group mb-4">
               <label for="amount" class="form-label">Amount (₹)</label>
  <div class="input-group">
    <span class="input-group-text">₹</span>
    <input
      type="number"
      class="form-control form-control-lg"
      id="amount"
      name="amount"
      min="5"
      max="25000"
      placeholder="Enter amount"
     
      oninput="validateAmount()"
    />
  </div>
  <div class="form-text text-muted">Minimum amount: ₹5, Maximum: ₹25,000</div>
  <div id="amountError" style="color: red; font-size: 0.9rem; display: none;"></div>
</div>
              
              <div class="form-group mb-4">
                <label for="description" class="form-label">Description</label>
                <input
                  type="text"
                  class="form-control"
                  id="description"
                  name="description"
                  value="Added money to wallet"
                  placeholder="Enter a description for this transaction"
                 
                />
              </div>
              
              <div class="quick-amounts mb-4">
                <label class="form-label">Quick Select</label>
                <div class="amount-options">
                  <button type="button" class="amount-option" data-amount="100">₹100</button>
                  <button type="button" class="amount-option" data-amount="500">₹500</button>
                  <button type="button" class="amount-option" data-amount="1000">₹1000</button>
                  <button type="button" class="amount-option" data-amount="2000">₹2000</button>
                </div>
              </div>
              
              <div id="razorpay-button-container" class="text-center mb-3" style="display: none;">
                <button type="button" id="razorpay-pay-btn" class="btn-razorpay">
                  <img src="https://razorpay.com/assets/razorpay-logo.svg" alt="Razorpay" height="30">
                  <span>Pay with Razorpay</span>
                </button>
              </div>
              
              <button type="submit" class="btn-submit" id="addMoneyBtn">
                <span class="btn-text">Proceed to Payment</span>
                <span class="btn-icon"><i class="fas fa-arrow-right"></i></span>
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>

    <!-- Payment Success Modal -->
    <div class="modal fade" id="paymentSuccessModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-body text-center p-5">
            <div class="success-animation">
              <div class="checkmark-circle">
                <div class="checkmark draw"></div>
              </div>
            </div>
            <h3 class="mt-4">Payment Successful!</h3>
            <p class="text-muted">Your wallet has been topped up successfully.</p>
            <div class="transaction-details mt-4">
              <div class="detail-item">
                <span class="detail-label">Amount Added:</span>
                <span class="detail-value" id="successAmount">₹0.00</span>
              </div>
              <div class="detail-item">
                <span class="detail-label">Transaction ID:</span>
                <span class="detail-value" id="successTransactionId">-</span>
              </div>
              <div class="detail-item">
                <span class="detail-label">New Balance:</span>
                <span class="detail-value" id="successNewBalance">₹0.00</span>
              </div>
            </div>
            <button type="button" class="btn-primary mt-4" data-bs-dismiss="modal" onclick="window.location.reload()">
              <i class="fas fa-check-circle me-2"></i> Done
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loadingOverlay">
      <div class="spinner-container">
        <div class="spinner"></div>
        <p>Processing your request...</p>
      </div>
    </div>

    <!-- Enhanced Toast Notification -->
    <div id="toastContainer" class="toast-container"></div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Enhanced Toast Notification System
        function showToast(title, message, type = 'success', duration = 5000) {
          const toastContainer = document.getElementById('toastContainer');
          
          // Create toast elements
          const toast = document.createElement('div');
          toast.className = `toast-notification ${type}`;
          
          // Set icon based on type
          let iconClass = 'fa-check-circle';
          if (type === 'error') iconClass = 'fa-exclamation-circle';
          if (type === 'warning') iconClass = 'fa-exclamation-triangle';
          if (type === 'info') iconClass = 'fa-info-circle';
          
          // Create toast content
          toast.innerHTML = `
            <div class="toast-header">
              <i class="fas ${iconClass} toast-icon"></i>
              <div class="toast-title">${title}</div>
              <button type="button" class="toast-close" aria-label="Close">
                <i class="fas fa-times"></i>
              </button>
            </div>
            <div class="toast-body">${message}</div>
            <div class="toast-progress"></div>
          `;
          
          // Add to container
          toastContainer.appendChild(toast);
          
          // Show toast with animation
          setTimeout(() => {
            toast.classList.add('show');
          }, 10);
          
          // Add close button functionality
          const closeBtn = toast.querySelector('.toast-close');
          closeBtn.addEventListener('click', () => {
            toast.classList.remove('show');
            setTimeout(() => {
              toast.remove();
            }, 300);
          });
          
          // Auto remove after duration
          setTimeout(() => {
            if (toast.parentNode) {
              toast.classList.remove('show');
              setTimeout(() => {
                toast.remove();
              }, 300);
            }
          }, duration);
        }
        
        // Loading overlay
        const loadingOverlay = document.getElementById('loadingOverlay');
        
        function showLoading() {
          loadingOverlay.classList.add('active');
        }
        
        function hideLoading() {
          loadingOverlay.classList.remove('active');
        }
        
        // Quick amount selection
        const amountOptions = document.querySelectorAll('.amount-option');
        const amountInput = document.getElementById('amount');
        
        amountOptions.forEach(option => {
          option.addEventListener('click', function(event) {
            const amount = this.getAttribute('data-amount');
            amountInput.value = amount;
            
            // Remove active class from all options
            amountOptions.forEach(opt => opt.classList.remove('active'));
            
            // Add active class to selected option
            this.classList.add('active');
            
            // Add ripple effect
            createRippleEffect(event);
          });
        });
        
        // Razorpay integration
        let razorpayOrderId = null;
        let razorpayInstance = null;
        
        // Add money form submission
        const addMoneyForm = document.getElementById('addMoneyForm');
        const addMoneyBtn = document.getElementById('addMoneyBtn');
        const addMoneyModal = new bootstrap.Modal(document.getElementById('addMoneyModal'));
        const paymentSuccessModal = new bootstrap.Modal(document.getElementById('paymentSuccessModal'));
        
        addMoneyForm.addEventListener('submit', async function(e) {
          e.preventDefault();
          
          const amount = document.getElementById('amount').value;
          const description = document.getElementById('description').value;
          
          // Validate amount
          if (amount <= 0) {
            showToast('Invalid Amount', 'Please enter a valid amount greater than 0', 'error');
            return;
          }
          
          // Show loading state
          addMoneyBtn.disabled = true;
          addMoneyBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...';
          
          try {
            showLoading();
            
            // Create Razorpay order
            const response = await fetch('/wallet/create-razorpay-order', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ 
                amount, 
                description
              })
            });
            
            const result = await response.json();
            
            if (!result.success) {
              hideLoading();
              showToast('Error', result.message || 'Failed to create payment order', 'error');
              
              // Reset button state
              addMoneyBtn.disabled = false;
              addMoneyBtn.innerHTML = '<span class="btn-text">Proceed to Payment</span><span class="btn-icon"><i class="fas fa-arrow-right"></i></span>';
              return;
            }
            
            // Initialize Razorpay
            const options = {
              key: result.key,
              amount: result.order.amount,
              currency: result.order.currency,
              name: "Elite Wear",
              description: description || "Wallet Top-up",
              order_id: result.order.id,
              handler: async function (response) {
                try {
                  showLoading();
                  
                  // Verify payment
                  const verifyResponse = await fetch('/wallet/verify-razorpay-payment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                      razorpay_payment_id: response.razorpay_payment_id,
                      razorpay_order_id: response.razorpay_order_id,
                      razorpay_signature: response.razorpay_signature
                    })
                  });
                  
                  const verifyResult = await verifyResponse.json();
                  
                  hideLoading();
                  addMoneyModal.hide();
                  
                  if (verifyResult.success) {
                    // Update success modal with transaction details
                    document.getElementById('successAmount').textContent = `₹${verifyResult.topupAmount.toFixed(2)}`;
                    document.getElementById('successTransactionId').textContent = verifyResult.transactionRef;
                    document.getElementById('successNewBalance').textContent = `₹${verifyResult.walletBalance.toFixed(2)}`;
                    
                    // Show success toast
                    showToast(
                      'Payment Successful', 
                      `₹${verifyResult.topupAmount.toFixed(2)} has been added to your wallet successfully!`, 
                      'success',
                      7000
                    );
                    
                    // Show success modal
                    paymentSuccessModal.show();
                  } else {
                    showToast('Payment Verification Failed', verifyResult.message || 'Failed to verify payment', 'error');
                  }
                } catch (error) {
                  hideLoading();
                  console.error('Payment verification error:', error);
                  showToast(
                    'Verification Error', 
                    'We encountered an issue while verifying your payment. If your account was charged, please contact customer support.', 
                    'error',
                    15000
                  );
                }
              },
              prefill: {
                name: result.user.name,
                email: result.user.email,
                contact: result.user.contact
              },
              theme: {
                color: "#3399cc"
              },
              modal: {
                ondismiss: function() {
                  // Reset button state
                  addMoneyBtn.disabled = false;
                  addMoneyBtn.innerHTML = '<span class="btn-text">Proceed to Payment</span><span class="btn-icon"><i class="fas fa-arrow-right"></i></span>';
                  hideLoading();
                  
                  // Show info toast when payment window is closed
                  showToast('Payment Cancelled', 'You have closed the payment window. Your wallet has not been charged.', 'info');
                }
              }
            };
            
            hideLoading();
            
            // Create Razorpay instance
            razorpayInstance = new Razorpay(options);
            razorpayInstance.open();
            
            // Handle payment failure
            razorpayInstance.on('payment.failed', async function(response) {
              try {
                const failureResponse = await fetch('/wallet/handle-failed-payment', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    razorpay_order_id: response.error.metadata.order_id
                  })
                });
                
                const failureResult = await failureResponse.json();
                
                // Show detailed error toast
                showToast(
                  'Payment Failed', 
                  `${response.error.description || 'Your payment could not be processed'}. Please try again or use a different payment method.`, 
                  'error',
                  10000
                );
                
                // Reset button state
                addMoneyBtn.disabled = false;
                addMoneyBtn.innerHTML = '<span class="btn-text">Proceed to Payment</span><span class="btn-icon"><i class="fas fa-arrow-right"></i></span>';
              } catch (error) {
                console.error('Error handling payment failure:', error);
                showToast('Error', 'An unexpected error occurred while processing your payment failure.', 'error');
              }
            });
            
          } catch (error) {
            console.error('Error creating Razorpay order:', error);
            
            hideLoading();
            
            showToast('Error', 'An unexpected error occurred. Please try again later.', 'error');
            
            // Reset button state
            addMoneyBtn.disabled = false;
            addMoneyBtn.innerHTML = '<span class="btn-text">Proceed to Payment</span><span class="btn-icon"><i class="fas fa-arrow-right"></i></span>';
          }
        });
        
        // Smooth scroll for anchor links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
          anchor.addEventListener('click', function(e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href');
            const targetElement = document.querySelector(targetId);
            
            if (targetElement) {
              window.scrollTo({
                top: targetElement.offsetTop - 100,
                behavior: 'smooth'
              });
            }
          });
        });
        
        // Add animation classes on page load
        const balanceCard = document.querySelector('.balance-card');
        const statCards = document.querySelectorAll('.stat-card');
        const transactionItems = document.querySelectorAll('.transaction-item');
        
        if (balanceCard) {
          balanceCard.classList.add('fade-in');
        }
        
        statCards.forEach((card, index) => {
          card.style.animationDelay = `${0.2 + (index * 0.1)}s`;
          card.classList.add('fade-in');
        });
        
        transactionItems.forEach((item, index) => {
          item.style.animationDelay = `${0.4 + (index * 0.1)}s`;
          item.classList.add('fade-in');
        });
        
        // Ripple effect function
        function createRippleEffect(event) {
          const button = event.currentTarget;
          const ripple = document.createElement('span');
          ripple.classList.add('ripple');
          
          const rect = button.getBoundingClientRect();
          const size = Math.max(rect.width, rect.height) * 2;
          const x = event.clientX - rect.left - (size / 2);
          const y = event.clientY - rect.top - (size / 2);
          
          ripple.style.width = ripple.style.height = `${size}px`;
          ripple.style.left = `${x}px`;
          ripple.style.top = `${y}px`;
          
          button.appendChild(ripple);
          
          setTimeout(() => {
            ripple.remove();
          }, 600);
        }
        
        // Add ripple effect to buttons
        document.querySelectorAll('.btn-add-money, .btn-submit, .amount-option, .btn-primary').forEach(button => {
          button.addEventListener('mousedown', createRippleEffect);
        });
        
        // Show welcome toast on page load
        setTimeout(() => {
          showToast('Welcome to Your Wallet', 'Manage your funds and track your transactions easily', 'info');
        }, 1000);
      });
      function validateAmount() {
    const amountInput = document.getElementById("amount");
    const errorDiv = document.getElementById("amountError");
    const value = parseInt(amountInput.value);

    if (isNaN(value)) {
      errorDiv.textContent = "Please enter a valid amount.";
      errorDiv.style.display = "block";
    } else if (value < 5) {
      errorDiv.textContent = "Amount must be at least ₹5.";
      errorDiv.style.display = "block";
    } else if (value > 25000) {
      errorDiv.textContent = "Amount must not exceed ₹25,000.";
      errorDiv.style.display = "block";
    } else {
      errorDiv.style.display = "none";
    }
  }
    </script>
  
  </body>
</html>
