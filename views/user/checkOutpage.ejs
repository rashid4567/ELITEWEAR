<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>Elite Wear - Checkout</title>
<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
<!-- Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
<!-- Google Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Outfit:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&display=swap" rel="stylesheet">
<!-- AOS Animation Library -->
<link rel="stylesheet" href="https://unpkg.com/aos@next/dist/aos.css" />
<!-- Swiper CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@10/swiper-bundle.min.css" />
<!-- Custom CSS -->
<link rel="stylesheet" href="/userStyle/header.css">
<link rel="stylesheet" href="/userStyle/footer.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<style>
  :root {
    --primary-color: #0f172a;
    --secondary-color: #f8fafc;
    --accent-color: #3b82f6;
    --accent-hover: #2563eb;
    --accent-secondary: #8b5cf6;
    --accent-tertiary: #ec4899;
    --text-primary: #1e293b;
    --text-secondary: #64748b;
    --text-light: #94a3b8;
    --border-color: #e2e8f0;
    --card-bg: #ffffff;
    --sidebar-bg: #ffffff;
    --card-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.05);
    --card-hover-shadow: 0 20px 35px -10px rgba(0, 0, 0, 0.1);
    --gradient-primary: linear-gradient(135deg, #3b82f6, #8b5cf6);
    --gradient-secondary: linear-gradient(135deg, #8b5cf6, #ec4899);
    --gradient-accent: linear-gradient(135deg, #3b82f6, #10b981);
    --success-color: #10b981;
    --error-color: #ef4444;
    --warning-color: #f59e0b;
    --transition-fast: 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    --transition-normal: 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    --transition-slow: 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    --border-radius-sm: 0.375rem;
    --border-radius: 0.5rem;
    --border-radius-lg: 0.75rem;
    --border-radius-xl: 1rem;
    --border-radius-full: 9999px;
    --font-primary: 'Outfit', sans-serif;
    --font-secondary: 'Playfair Display', serif;
  }

  /* Dark mode variables */
  .dark-mode {
    --primary-color: #f8fafc;
    --secondary-color: #0f172a;
    --text-primary: #f1f5f9;
    --text-secondary: #cbd5e1;
    --text-light: #94a3b8;
    --border-color: #334155;
    --card-bg: #1e293b;
    --sidebar-bg: #0f172a;
    --card-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.2);
    --card-hover-shadow: 0 20px 35px -10px rgba(0, 0, 0, 0.3);
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: var(--font-primary);
    color: var(--text-primary);
    background-color: var(--secondary-color);
    overflow-x: hidden;
    transition: background-color var(--transition-normal), color var(--transition-normal);
  }

  /* Scrollbar styling */
  ::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }

  ::-webkit-scrollbar-track {
    background: var(--secondary-color);
  }

  ::-webkit-scrollbar-thumb {
    background: var(--text-light);
    border-radius: var(--border-radius-full);
  }

  ::-webkit-scrollbar-thumb:hover {
    background: var(--text-secondary);
  }

  /* Scroll Indicator */
  .scroll-indicator {
    position: fixed;
    top: 0;
    left: 0;
    height: 3px;
    background: var(--gradient-primary);
    z-index: 9999;
    width: 0%;
    transition: width 0.1s ease;
  }

  /* Cursor Glow Effect */
  .cursor-glow {
    position: fixed;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: var(--accent-color);
    pointer-events: none;
    mix-blend-mode: difference;
    z-index: 9999;
    transform: translate(-50%, -50%);
    opacity: 0.5;
    transition: width 0.3s, height 0.3s, opacity 0.3s;
  }

  /* Preloader */
  .preloader {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--primary-color);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    transition: opacity 0.5s ease, visibility 0.5s ease;
  }

  .preloader.fade-out {
    opacity: 0;
    visibility: hidden;
  }

  .loader {
    width: 80px;
    height: 80px;
    border: 4px solid rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    border-top-color: var(--accent-color);
    animation: spin 1s linear infinite;
    position: relative;
  }

  .loader::before {
    content: '';
    position: absolute;
    top: -4px;
    left: -4px;
    right: -4px;
    bottom: -4px;
    border: 4px solid transparent;
    border-top-color: var(--accent-secondary);
    border-radius: 50%;
    animation: spin 2s linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  /* Dark Mode Toggle */
  .dark-mode-toggle {
    position: fixed;
    bottom: 2rem;
    left: 2rem;
    width: 50px;
    height: 50px;
    background-color: var(--card-bg);
    color: var(--text-primary);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    transition: all var(--transition-normal);
    border: none;
  }

  .dark-mode-toggle:hover {
    transform: translateY(-5px) rotate(45deg);
    box-shadow: 0 15px 25px rgba(0, 0, 0, 0.15);
  }

  /* Checkout Container */
  .checkout-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 3rem 1rem;
  }

  /* Checkout Header */
  .checkout-header-wrapper {
    position: relative;
    margin-bottom: 3rem;
    text-align: center;
    overflow: hidden;
  }

  .checkout-header {
    font-family: var(--font-secondary);
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    position: relative;
    display: inline-block;
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    text-fill-color: transparent;
  }

  .checkout-header::after {
    content: '';
    position: absolute;
    bottom: -10px;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 3px;
    background: var(--gradient-primary);
    border-radius: var(--border-radius-full);
    transition: width var(--transition-normal);
  }

  .checkout-header:hover::after {
    width: 120px;
  }

  /* Checkout Progress */
  .checkout-progress-container {
    margin-bottom: 3rem;
  }

  .checkout-progress {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 800px;
    margin: 0 auto;
    position: relative;
  }

  .progress-step {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
    z-index: 2;
  }

  .step-icon {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background-color: var(--card-bg);
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-secondary);
    font-size: 1.5rem;
    margin-bottom: 0.75rem;
    position: relative;
    transition: all var(--transition-normal);
    box-shadow: var(--card-shadow);
  }

  .progress-step.active .step-icon {
    background: var(--gradient-primary);
    color: white;
    transform: scale(1.1);
    box-shadow: 0 10px 20px rgba(59, 130, 246, 0.3);
  }

  .progress-step.completed .step-icon {
    background: var(--success-color);
    color: white;
  }

  .step-label {
    font-size: 0.9rem;
    font-weight: 500;
    color: var(--text-secondary);
    transition: color var(--transition-normal);
  }

  .progress-step.active .step-label {
    color: var(--accent-color);
    font-weight: 600;
  }

  .progress-connector {
    flex: 1;
    height: 3px;
    background-color: var(--border-color);
    position: relative;
    z-index: 1;
    transition: background-color var(--transition-normal);
  }

  .progress-connector.active {
    background: var(--gradient-primary);
  }

  /* Order Summary Card */
  .order-summary-card {
    background-color: var(--card-bg);
    border-radius: var(--border-radius-lg);
    overflow: hidden;
    box-shadow: var(--card-shadow);
    transition: all var(--transition-normal);
    margin-bottom: 2rem;
    position: relative;
  }

  .order-summary-card:hover {
    transform: translateY(-10px);
    box-shadow: var(--card-hover-shadow);
  }

  .order-summary-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 4px;
    background: var(--gradient-primary);
    transition: height var(--transition-normal);
  }

  .order-summary-card:hover::before {
    height: 8px;
  }

  .order-summary-card .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid var(--border-color);
  }

  .order-summary-card .card-header h5 {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0;
    color: var(--text-primary);
  }

  .order-summary-card .card-header .badge {
    background: var(--gradient-primary);
    font-weight: 500;
    font-size: 0.8rem;
    padding: 0.35rem 0.75rem;
    border-radius: var(--border-radius-full);
  }

  /* Order Items Preview */
  .order-items-preview {
    padding: 1.5rem;
    border-bottom: 1px solid var(--border-color);
    max-height: 300px;
    overflow-y: auto;
  }

  .order-item-preview {
    display: flex;
    align-items: center;
    padding: 0.75rem 0;
    border-bottom: 1px solid var(--border-color);
    transition: all var(--transition-normal);
  }

  .order-item-preview:last-child {
    border-bottom: none;
  }

  .order-item-preview:hover {
    transform: translateX(5px);
  }

  .item-image {
    width: 60px;
    height: 60px;
    border-radius: var(--border-radius);
    overflow: hidden;
    margin-right: 1rem;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    transition: all var(--transition-normal);
  }

  .order-item-preview:hover .item-image {
    transform: scale(1.1);
  }

  .item-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .item-details {
    flex: 1;
  }

  .item-name {
    font-weight: 500;
    margin-bottom: 0.25rem;
    color: var(--text-primary);
    transition: color var(--transition-fast);
  }

  .order-item-preview:hover .item-name {
    color: var(--accent-color);
  }

  .item-meta {
    display: flex;
    gap: 1rem;
    font-size: 0.85rem;
    color: var(--text-secondary);
  }

  .item-price {
    font-weight: 600;
    color: var(--accent-color);
  }

  /* Item price with discount styling */
  .item-price-container {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
  }
  
  .item-original-price {
    text-decoration: line-through;
    color: var(--text-secondary);
    font-size: 0.85rem;
  }
  
  .item-discount-badge {
    font-size: 0.75rem;
    font-weight: 600;
    color: white;
    background-color: var(--success-color);
    padding: 0.1rem 0.4rem;
    border-radius: var(--border-radius-full);
    margin-top: 0.25rem;
  }

  /* For the sidebar items */
  .order-item .item-price-container {
    margin-top: 0.5rem;
  }

  /* For the order summary section */
  .price-row.discount {
    color: var(--success-color);
    font-weight: 500;
  }

  .price-row.discount .discount-percent {
    background-color: var(--success-color);
    color: white;
    font-size: 0.75rem;
    padding: 0.1rem 0.4rem;
    border-radius: var(--border-radius-full);
    margin-left: 0.5rem;
  }

  .more-items {
    text-align: center;
    padding-top: 1rem;
  }

  .btn-view-all {
    background: transparent;
    color: var(--accent-color);
    border: 1px solid var(--accent-color);
    padding: 0.5rem 1rem;
    border-radius: var(--border-radius);
    font-size: 0.9rem;
    font-weight: 500;
    transition: all var(--transition-normal);
    cursor: pointer;
  }

  .btn-view-all:hover {
    background-color: var(--accent-color);
    color: white;
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(59, 130, 246, 0.3);
  }

  .btn-view-all i {
    margin-left: 0.5rem;
    transition: transform var(--transition-fast);
  }

  .btn-view-all:hover i {
    transform: translateX(3px);
  }

  /* Price Summary */
  .price-summary {
    padding: 1.5rem;
    border-bottom: 1px solid var(--border-color);
  }

  .price-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.75rem;
    font-size: 0.95rem;
    color: var(--text-secondary);
  }

  .price-row:last-child {
    margin-bottom: 0;
  }

  .price-row.total {
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--text-primary);
    padding-top: 0.75rem;
    margin-top: 0.75rem;
    border-top: 1px solid var(--border-color);
  }

  .price-row.discount {
    color: var(--success-color);
  }

  /* Coupon Section */
  .coupon-section {
    padding: 1.5rem;
    border-bottom: 1px solid var(--border-color);
  }

  .btn-apply-coupon {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    background: transparent;
    color: var(--accent-color);
    border: 1px dashed var(--accent-color);
    padding: 0.75rem 1rem;
    border-radius: var(--border-radius);
    width: 100%;
    font-weight: 500;
    transition: all var(--transition-normal);
    cursor: pointer;
  }

  .btn-apply-coupon:hover {
    background-color: rgba(59, 130, 246, 0.1);
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(59, 130, 246, 0.2);
  }

  .applied-coupon {
    display: flex;
    align-items: center;
    justify-content: space-between;
    background-color: rgba(16, 185, 129, 0.1);
    color: var(--success-color);
    padding: 0.75rem 1rem;
    border-radius: var(--border-radius);
    border: 1px dashed var(--success-color);
  }

  .coupon-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-weight: 500;
  }

  .btn-remove-coupon {
    background: transparent;
    color: var(--success-color);
    border: none;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all var(--transition-normal);
    cursor: pointer;
  }

  .btn-remove-coupon:hover {
    background-color: rgba(16, 185, 129, 0.2);
    transform: rotate(90deg);
  }

  /* Brand Section */
  .brand-section {
    padding: 1.5rem;
    text-align: center;
  }

  .brand-logo {
    max-width: 150px;
    opacity: 0.8;
    transition: opacity var(--transition-normal);
  }

  .brand-logo:hover {
    opacity: 1;
  }

  /* Delivery Card */
  .delivery-card {
    background-color: var(--card-bg);
    border-radius: var(--border-radius-lg);
    overflow: hidden;
    box-shadow: var(--card-shadow);
    transition: all var(--transition-normal);
    margin-bottom: 2rem;
    position: relative;
  }

  .delivery-card:hover {
    box-shadow: var(--card-hover-shadow);
  }

  .delivery-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 4px;
    background: var(--gradient-primary);
    transition: height var(--transition-normal);
  }

  .delivery-card:hover::before {
    height: 8px;
  }

  .delivery-card .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid var(--border-color);
  }

  .delivery-card .card-header h5 {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0;
    color: var(--text-primary);
  }

  .btn-add-address {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: var(--gradient-primary);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: var(--border-radius);
    font-size: 0.9rem;
    font-weight: 500;
    transition: all var(--transition-normal);
    text-decoration: none;
  }

  .btn-add-address:hover {
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(59, 130, 246, 0.3);
    color: white;
  }

  /* Addresses Container */
  .addresses-container {
    padding: 1.5rem;
  }

  /* No Address */
  .no-address {
    text-align: center;
    padding: 3rem 2rem;
  }

  .no-address .icon {
    font-size: 3rem;
    color: var(--text-light);
    margin-bottom: 1.5rem;
    animation: float 3s ease-in-out infinite;
  }

  .no-address p {
    font-size: 1.1rem;
    color: var(--text-secondary);
    margin-bottom: 1.5rem;
  }

  .btn-primary {
    background: var(--gradient-primary);
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: var(--border-radius);
    font-weight: 500;
    transition: all var(--transition-normal);
    border: none;
    position: relative;
    overflow: hidden;
    z-index: 1;
    display: inline-block;
    text-decoration: none;
  }

  .btn-primary::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--gradient-secondary);
    z-index: -1;
    opacity: 0;
    transition: opacity var(--transition-normal);
  }

  .btn-primary:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(59, 130, 246, 0.3);
    color: white;
  }

  .btn-primary:hover::before {
    opacity: 1;
  }

  /* Address Card */
  .address-card {
    background-color: var(--card-bg);
    border-radius: var(--border-radius);
    border: 1px solid var(--border-color);
    padding: 1.5rem;
    height: 100%;
    transition: all var(--transition-normal);
    position: relative;
    overflow: hidden;
  }

  .address-card:hover {
    transform: translateY(-5px);
    box-shadow: var(--card-shadow);
    border-color: var(--accent-color);
  }

  .address-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 4px;
    height: 0;
    background: var(--gradient-primary);
    transition: height 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 1;
  }

  .address-card:hover::before {
    height: 100%;
  }

  .address-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .address-header h6 {
    font-weight: 600;
    margin: 0;
    color: var(--text-primary);
  }

  .btn-edit {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    background-color: var(--secondary-color);
    color: var(--text-secondary);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all var(--transition-normal);
  }

  .btn-edit:hover {
    background-color: var(--accent-color);
    color: white;
    transform: rotate(15deg);
  }

  .address-content {
    margin-bottom: 1.5rem;
  }

  .address-content p {
    font-size: 0.9rem;
    color: var(--text-secondary);
    margin: 0;
    line-height: 1.6;
  }

  .address-type {
    margin-top: 0.75rem;
  }

  .address-type .badge {
    font-size: 0.75rem;
    font-weight: 500;
    padding: 0.35rem 0.75rem;
    border-radius: var(--border-radius-full);
  }

  .btn-deliver-here {
    width: 100%;
    background: var(--gradient-primary);
    color: white;
    padding: 0.75rem;
    border-radius: var(--border-radius);
    font-weight: 500;
    transition: all var(--transition-normal);
    border: none;
    position: relative;
    overflow: hidden;
    z-index: 1;
  }

  .btn-deliver-here::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--gradient-secondary);
    z-index: -1;
    opacity: 0;
    transition: opacity var(--transition-normal);
  }

  .btn-deliver-here:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(59, 130, 246, 0.3);
  }

  .btn-deliver-here:hover::before {
    opacity: 1;
  }

  /* Sidebar Overlay */
  .sidebar-overlay,
  .coupon-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1040;
    opacity: 0;
    visibility: hidden;
    transition: opacity var(--transition-normal), visibility var(--transition-normal);
    backdrop-filter: blur(3px);
  }

  .sidebar-overlay.active,
  .coupon-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  /* Order Summary Sidebar */
  .order-summary-sidebar {
    position: fixed;
    top: 0;
    right: -400px;
    width: 100%;
    max-width: 400px;
    height: 100%;
    background-color: var(--card-bg);
    z-index: 1050;
    transition: right var(--transition-normal);
    display: flex;
    flex-direction: column;
    box-shadow: -5px 0 30px rgba(0, 0, 0, 0.1);
  }

  .order-summary-sidebar.active {
    right: 0;
  }

  .sidebar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid var(--border-color);
  }

  .sidebar-header h5 {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0;
    color: var(--text-primary);
  }

  .btn-close {
    background: transparent;
    border: none;
    color: var(--text-secondary);
    font-size: 1.25rem;
    cursor: pointer;
    transition: all var(--transition-fast);
  }

  .btn-close:hover {
    color: var(--text-primary);
    transform: rotate(90deg);
  }

  .sidebar-content {
    flex: 1;
    overflow-y: auto;
  }

  .order-items-list {
    padding: 1.5rem;
    border-bottom: 1px solid var(--border-color);
  }

  .order-item {
    display: flex;
    align-items: center;
    padding: 0.75rem 0;
    border-bottom: 1px solid var(--border-color);
  }

  .order-item:last-child {
    border-bottom: none;
  }

  /* Coupon Sidebar */
  .coupon-sidebar {
    position: fixed;
    top: 0;
    right: -400px;
    width: 100%;
    max-width: 400px;
    height: 100%;
    background-color: var(--card-bg);
    z-index: 1050;
    transition: right var(--transition-normal);
    display: flex;
    flex-direction: column;
    box-shadow: -5px 0 30px rgba(0, 0, 0, 0.1);
  }

  .coupon-sidebar.active {
    right: 0;
  }

  .coupon-input-group {
    display: flex;
    margin: 1.5rem;
    position: relative;
    overflow: hidden;
    border-radius: var(--border-radius);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
  }

  .coupon-input-group input {
    flex: 1;
    padding: 0.75rem 1rem;
    border: 1px solid var(--border-color);
    border-right: none;
    border-radius: var(--border-radius) 0 0 var(--border-radius);
    font-size: 0.95rem;
    color: var(--text-primary);
    background-color: var(--card-bg);
    transition: all var(--transition-normal);
  }

  .coupon-input-group input:focus {
    outline: none;
    border-color: var(--accent-color);
    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
  }

  .btn-apply {
    background: var(--gradient-primary);
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 0 var(--border-radius) var(--border-radius) 0;
    font-weight: 500;
    transition: all var(--transition-normal);
    position: relative;
    overflow: hidden;
    z-index: 1;
  }

  .btn-apply::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--gradient-secondary);
    z-index: -1;
    opacity: 0;
    transition: opacity var(--transition-normal);
  }

  .btn-apply:hover::before {
    opacity: 1;
  }

  .coupon-error {
    color: var(--error-color);
    font-size: 0.9rem;
    margin: 0 1.5rem 1.5rem;
    display: none;
  }

  .coupon-categories {
    padding: 0 1.5rem 1.5rem;
  }

  .coupon-category {
    margin-bottom: 1.5rem;
  }

  .coupon-category h6 {
    font-size: 1rem;
    font-weight: 600;
    margin-bottom: 1rem;
    color: var(--text-primary);
    position: relative;
    display: inline-block;
  }

  .coupon-category h6::after {
    content: '';
    position: absolute;
    bottom: -5px;
    left: 0;
    width: 40px;
    height: 2px;
    background: var(--gradient-primary);
    border-radius: var(--border-radius-full);
    transition: width var(--transition-normal);
  }

  .coupon-category h6:hover::after {
    width: 100%;
  }

  .coupon-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .coupon-item {
    background-color: var(--secondary-color);
    border-radius: var(--border-radius);
    padding: 1rem;
    position: relative;
    overflow: hidden;
    transition: all var(--transition-normal);
    border: 1px dashed var(--border-color);
  }

  .coupon-item:hover {
    transform: translateY(-5px);
    box-shadow: var(--card-shadow);
  }

  .coupon-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 4px;
    height: 0;
    background: var(--gradient-primary);
    transition: height 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 1;
  }

  .coupon-item:hover::before {
    height: 100%;
  }

  .coupon-code {
    font-weight: 600;
    font-size: 1.1rem;
    margin-bottom: 0.5rem;
    color: var(--text-primary);
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .coupon-status {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    font-size: 0.75rem;
    font-weight: 500;
    padding: 0.25rem 0.5rem;
    border-radius: var(--border-radius-full);
  }

  .status-available {
    background-color: rgba(16, 185, 129, 0.1);
    color: var(--success-color);
  }

  .status-used {
    background-color: rgba(59, 130, 246, 0.1);
    color: var(--accent-color);
  }

  .status-expired {
    background-color: rgba(239, 68, 68, 0.1);
    color: var(--error-color);
  }

  .status-upcoming {
    background-color: rgba(245, 158, 11, 0.1);
    color: var(--warning-color);
  }

  .coupon-offer {
    font-weight: 600;
    color: var(--accent-color);
    margin-bottom: 0.5rem;
  }

  .coupon-min-purchase,
  .coupon-expiry,
  .coupon-usage,
  .coupon-description {
    font-size: 0.85rem;
    color: var(--text-secondary);
    margin-bottom: 0.5rem;
  }

  .coupon-description {
    font-style: italic;
  }

  .coupon-apply-btn {
    background: var(--gradient-primary);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: var(--border-radius);
    font-size: 0.85rem;
    font-weight: 500;
    width: 100%;
    margin-top: 0.5rem;
    transition: all var(--transition-normal);
    position: relative;
    overflow: hidden;
    z-index: 1;
    cursor: pointer;
  }

  .coupon-apply-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--gradient-secondary);
    z-index: -1;
    opacity: 0;
    transition: opacity var(--transition-normal);
  }

  .coupon-apply-btn:hover::before {
    opacity: 1;
  }

  .coupon-apply-btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(59, 130, 246, 0.3);
  }

  .coupon-apply-btn:disabled {
    background: var(--text-light);
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  .coupon-tooltip {
    position: relative;
    display: inline-block;
  }

  .coupon-tooltip i {
    color: var(--text-light);
    cursor: help;
  }

  .tooltip-text {
    visibility: hidden;
    width: 200px;
    background-color: var(--primary-color);
    color: white;
    text-align: center;
    border-radius: var(--border-radius);
    padding: 0.5rem;
    position: absolute;
    z-index: 1;
    bottom: 125%;
    left: 50%;
    transform: translateX(-50%);
    opacity: 0;
    transition: opacity var(--transition-normal);
    font-size: 0.8rem;
    font-weight: normal;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  }

  .tooltip-text::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: var(--primary-color) transparent transparent transparent;
  }

  .coupon-tooltip:hover .tooltip-text {
    visibility: visible;
    opacity: 1;
  }

  .empty-coupon-message {
    text-align: center;
    padding: 1rem;
    color: var(--text-light);
    font-style: italic;
    font-size: 0.9rem;
  }

  /* Toast Container */
  #toastContainer {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    z-index: 1050;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .toast-notification {
    display: flex;
    align-items: center;
    background-color: var(--card-bg);
    border-radius: var(--border-radius);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    padding: 1rem;
    min-width: 300px;
    max-width: 400px;
    position: relative;
    overflow: hidden;
    animation: slideIn 0.3s forwards;
  }

  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes slideOut {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(100%);
      opacity: 0;
    }
  }

  .toast-icon {
    margin-right: 1rem;
    font-size: 1.5rem;
  }

  .toast-notification.success .toast-icon {
    color: var(--success-color);
  }

  .toast-notification.error .toast-icon {
    color: var(--error-color);
  }

  .toast-notification.info .toast-icon {
    color: var(--accent-color);
  }

  .toast-message {
    flex: 1;
    color: var(--text-primary);
  }

  .toast-close {
    background: transparent;
    border: none;
    color: var(--text-light);
    font-size: 1.25rem;
    cursor: pointer;
    margin-left: 1rem;
    transition: all var(--transition-fast);
  }

  .toast-close:hover {
    color: var(--text-primary);
    transform: rotate(90deg);
  }

  .toast-progress {
    position: absolute;
    bottom: 0;
    left: 0;
    height: 3px;
    background: var(--gradient-primary);
    width: 100%;
    animation: progress 3s linear forwards;
  }

  @keyframes progress {
    from {
      width: 100%;
    }
    to {
      width: 0%;
    }
  }

  /* Coupon Apply Animation */
  @keyframes couponApplied {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.1);
    }
    100% {
      transform: scale(1);
    }
  }

  .coupon-applied-animation {
    animation: couponApplied 0.5s ease-in-out;
  }

  /* Confetti Animation for Coupon Apply */
  .confetti {
    position: fixed;
    width: 10px;
    height: 10px;
    background-color: var(--accent-color);
    opacity: 0;
    z-index: 1060;
    pointer-events: none;
    animation: confetti-fall 3s linear forwards;
  }

  @keyframes confetti-fall {
    0% {
      transform: translateY(-100vh) rotate(0deg);
      opacity: 1;
    }
    100% {
      transform: translateY(100vh) rotate(360deg);
      opacity: 0;
    }
  }

  /* Responsive Styles */
  @media (max-width: 991.98px) {
    .checkout-header {
      font-size: 2rem;
    }

    .progress-step .step-icon {
      width: 50px;
      height: 50px;
      font-size: 1.25rem;
    }

    .step-label {
      font-size: 0.8rem;
    }
  }

  @media (max-width: 767.98px) {
    .checkout-header {
      font-size: 1.75rem;
    }

    .progress-step .step-icon {
      width: 40px;
      height: 40px;
      font-size: 1rem;
    }

    .step-label {
      font-size: 0.75rem;
    }

    .dark-mode-toggle {
      width: 40px;
      height: 40px;
      bottom: 1rem;
      left: 1rem;
    }

    .order-summary-sidebar,
    .coupon-sidebar {
      max-width: 300px;
    }
  }

  @media (max-width: 575.98px) {
    .checkout-header {
      font-size: 1.5rem;
    }

    .checkout-progress {
      flex-wrap: wrap;
      justify-content: center;
      gap: 1rem;
    }

    .progress-connector {
      display: none;
    }

    .progress-step {
      width: 45%;
      margin-bottom: 1rem;
    }

    .order-summary-sidebar,
    .coupon-sidebar {
      max-width: 100%;
    }
  }

  /* Animations */
  @keyframes float {
    0% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-10px);
    }
    100% {
      transform: translateY(0);
    }
  }

  @keyframes pulse {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.05);
    }
    100% {
      transform: scale(1);
    }
  }

  /* Shimmer effect */
  .shimmer {
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(
      to right,
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 255, 255, 0.1) 50%,
      rgba(255, 255, 255, 0) 100%
    );
    transform: rotate(30deg);
    animation: shimmer 6s infinite;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 0;
  }

  .address-card:hover .shimmer {
    opacity: 1;
  }

  @keyframes shimmer {
    0% {
      transform: translateX(-100%) rotate(30deg);
    }
    100% {
      transform: translateX(100%) rotate(30deg);
    }
  }

  /* Fade in animations */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .address-card {
    animation: fadeInUp 0.6s ease-out forwards;
  }

  /* Staggered animations for address cards */
  .address-card:nth-child(1) {
    animation-delay: 0.1s;
  }

  .address-card:nth-child(2) {
    animation-delay: 0.2s;
  }

  .address-card:nth-child(3) {
    animation-delay: 0.3s;
  }

  .address-card:nth-child(4) {
    animation-delay: 0.4s;
  }
</style>
</head>
<body>
<!-- Preloader -->
<div class="preloader">
  <div class="loader"></div>
</div>

<!-- Scroll Indicator -->
<div class="scroll-indicator"></div>

<!-- Cursor Glow Effect -->
<div class="cursor-glow"></div>

<%- include("../partials/user/header") %>

<div class="container my-5">
  <div class="checkout-header-wrapper" data-aos="fade-up">
    <h2 class="checkout-header">CHECKOUT</h2>
  </div>

  <!-- Progress Bar -->
  <div class="checkout-progress-container" data-aos="fade-up" data-aos-delay="100">
    <div class="checkout-progress">
      <div class="progress-step completed">
        <div class="step-icon">
          <i class="fas fa-shopping-cart"></i>
        </div>
        <div class="step-label">Cart</div>
      </div>
      <div class="progress-connector active"></div>
      <div class="progress-step active">
        <div class="step-icon">
          <i class="fas fa-map-marker-alt"></i>
        </div>
        <div class="step-label">Delivery</div>
      </div>
      <div class="progress-connector"></div>
      <div class="progress-step">
        <div class="step-icon">
          <i class="fas fa-credit-card"></i>
        </div>
        <div class="step-label">Payment</div>
      </div>
      <div class="progress-connector"></div>
      <div class="progress-step">
        <div class="step-icon">
          <i class="fas fa-check-circle"></i>
        </div>
        <div class="step-label">Confirmation</div>
      </div>
    </div>
  </div>

  <div class="row g-4">
    <!-- Order Summary Section -->
    <div class="col-lg-4 order-lg-2">
      <div class="order-summary-card" data-aos="fade-left" data-aos-delay="200">
        <div class="card-header">
          <h5>Order Summary</h5>
          <span class="badge bg-primary"><%= cartItems.length %> items</span>
        </div>
        
        <!-- Order Items Preview Section -->
        <div class="order-items-preview">
          <% cartItems.slice(0, 3).forEach(item => { %>
            <div class="order-item-preview">
              <div class="item-image">
                <% 
                  let imageUrl = '/placeholder.svg?height=60&width=60&query=fashion+product';
                  if (item && item.productId) {
                    if (item.productId.images && item.productId.images.length > 0) {
                      imageUrl = item.productId.images[0].url;
                    }
                  }
                %>
                <img 
                  src="<%= imageUrl %>" 
                  alt="<%= item && item.productId ? item.productId.name : 'Product' %>"
                  onerror="this.onerror=null; this.src='/placeholder.svg?height=60&width=60&query=fashion+product';"
                >
              </div>
              <div class="item-details">
                <div class="item-name"><%= item && item.productId ? item.productId.name : 'Product' %></div>
                <div class="item-meta">
                  <span>Size: <%= item.size || 'N/A' %></span>
                  <span>Qty: <%= item.quantity || 1 %></span>
                </div>
                
                <% 
                  // Find the corresponding discounted item if available
                  let discountedItem = null;
                  if (discountedItems) {
                    discountedItem = discountedItems.find(di => 
                      di.id && item.productId && di.id.toString() === item.productId._id.toString() && 
                      di.size === item.size
                    );
                  }
                  
                  // Get price information
                  let originalPrice = 0;
                  let discountedPrice = 0;
                  let hasDiscount = false;
                  
                  if (item && item.productId && item.productId.variants) {
                    const variant = item.productId.variants.find(v => v.size === item.size);
                    if (variant && variant.salePrice) {
                      originalPrice = variant.salePrice;
                      
                      // If we have discount information, use it
                      if (discountedItem && discountedItem.discountAmount > 0) {
                        discountedPrice = discountedItem.finalPrice;
                        hasDiscount = true;
                      } else {
                        discountedPrice = originalPrice;
                      }
                    }
                  }
                %>
                
                <% if (hasDiscount) { %>
                  <div class="item-price-container">
                    <span class="item-original-price">₹<%= (originalPrice * item.quantity).toFixed(2) %></span>
                    <span class="item-price">₹<%= (discountedPrice * item.quantity).toFixed(2) %></span>
                    <span class="item-discount-badge">-<%= ((originalPrice - discountedPrice) / originalPrice * 100).toFixed(0) %>%</span>
                  </div>
                <% } else { %>
                  <div class="item-price">₹<%= (originalPrice * item.quantity).toFixed(2) %></div>
                <% } %>
              </div>
            </div>
          <% }); %>
          
          <% if (cartItems.length > 3) { %>
            <div class="more-items">
              <button class="btn-view-all" id="openSidebar">
                View all <%= cartItems.length %> items
                <i class="fas fa-chevron-right"></i>
              </button>
            </div>
          <% } %>
        </div>
        
        <div class="price-summary">
          <div class="price-row">
            <span>Subtotal</span>
            <span>₹<%= totalPrice.toFixed(2) %></span>
          </div>
          <div class="price-row">
            <span>Delivery</span>
            <span><%= deliveryCharge === 0 ? 'FREE' : '₹' + deliveryCharge.toFixed(2) %></span>
          </div>
          
          <% if (discount > 0 && appliedCoupon) { %>
            <div class="price-row discount">
              <span>
                Discount (<%= appliedCoupon.code %>)
                <% if (appliedCoupon.percent) { %>
                  <span class="discount-percent">-<%= appliedCoupon.percent %>%</span>
                <% } %>
              </span>
              <span>-₹<%= discount.toFixed(2) %></span>
            </div>
          <% } %>
          
          <div class="price-row total">
            <span>Total</span>
            <span>₹<%= grandTotal.toFixed(2) %></span>
          </div>
        </div>
        
        <div class="coupon-section">
          <% if (appliedCoupon) { %>
            <div class="applied-coupon" id="appliedCoupon">
              <div class="coupon-info">
                <i class="fas fa-tag"></i>
                <span><%= appliedCoupon.code %> applied</span>
              </div>
              <button class="btn-remove-coupon" id="removeCouponBtn">
                <i class="fas fa-times"></i>
              </button>
            </div>
          <% } else { %>
            <button class="btn-apply-coupon" id="openCouponSidebar">
              <i class="fas fa-tag"></i>
              Apply Coupon
            </button>
          <% } %>
        </div>
        
        <div class="brand-section">
          <img src="/Uploads/ChatGPT Image Apr 13, 2025, 06_50_48 PM.png" alt="ELITE WEAR Brand" class="brand-logo">
        </div>
      </div>
    </div>
    
    <!-- Delivery Address Section -->
    <div class="col-lg-8 order-lg-1">
      <div class="delivery-card" data-aos="fade-right" data-aos-delay="200">
        <div class="card-header">
          <h5>Select Delivery Address</h5>
          <a href="/getaddAddress" class="btn-add-address">
            <i class="fas fa-plus"></i>
            Add New
          </a>
        </div>
        
        <div class="addresses-container">
          <% if (addresses.length === 0) { %>
            <div class="no-address" data-aos="fade-up" data-aos-delay="300">
              <div class="icon">
                <i class="fas fa-map-marker-alt"></i>
              </div>
              <p>You don't have any saved addresses</p>
              <a href="/getaddAddress" class="btn-primary">Add New Address</a>
            </div>
          <% } else { %>
            <div class="row g-3">
              <% addresses.forEach((addr, index) => { %>
                <div class="col-md-6" data-aos="fade-up" data-aos-delay="<%= 300 + (index * 100) %>">
                  <div class="address-card">
                    <div class="shimmer"></div>
                    <div class="address-header">
                      <h6><%= addr.name || addr.fullname %></h6>
                      <a href="/getaddress-edit/<%= addr._id %>" class="btn-edit">
                        <i class="fas fa-pencil-alt"></i>
                      </a>
                    </div>
                    <div class="address-content">
                      <p>
                        <%= addr.address || 'No address' %><br>
                        <% if (addr.landmark) { %><%= addr.landmark %>,<% } %>
                        <%= addr.city || 'N/A' %><br>
                        <%= addr.district || '' %>
                        <%= addr.pincode || 'N/A' %><br>
                        <%= addr.state || 'N/A' %>, <%= addr.country || '' %>
                      </p>
                      <div class="address-type">
                        <span class="badge <%= addr.type === 'home' ? 'bg-info' : 'bg-secondary' %>">
                          <%= addr.type === 'home' ? 'Home' : (addr.type === 'work' ? 'Work' : 'Other') %>
                        </span>
                      </div>
                    </div>
                    <button class="btn-deliver-here address-select-btn" data-address-id="<%= addr._id %>">
                      Deliver Here
                    </button>
                  </div>
                </div>
              <% }); %>
            </div>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Order Summary Sidebar -->
<div class="sidebar-overlay" id="overlay"></div>
<div class="order-summary-sidebar" id="orderSummarySidebar">
  <div class="sidebar-header">
    <h5>Order Summary</h5>
    <button class="btn-close" id="closeSidebar">
      <i class="fas fa-times"></i>
    </button>
  </div>
  
  <div class="sidebar-content">
    <div class="order-items-list">
      <% cartItems.forEach(item => { %>
        <div class="order-item">
          <div class="item-image">
            <% 
              let imageUrl = '/placeholder.svg?height=60&width=60&query=fashion+product';
              if (item && item.productId) {
                if (item.productId.images && item.productId.images.length > 0) {
                  imageUrl = item.productId.images[0].url;
                }
              }
            %>
            <img 
              src="<%= imageUrl %>" 
              alt="<%= item && item.productId ? item.productId.name : 'Product' %>"
              onerror="this.onerror=null; this.src='/placeholder.svg?height=60&width=60&query=fashion+product';"
            >
          </div>
          <div class="item-details">
            <div class="item-name"><%= item && item.productId ? item.productId.name : 'Product' %></div>
            <div class="item-meta">
              <span>Size: <%= item.size || 'N/A' %></span>
              <span>Qty: <%= item.quantity || 1 %></span>
            </div>
            
            <% 
              // Find the corresponding discounted item if available
              let discountedItem = null;
              if (discountedItems) {
                discountedItem = discountedItems.find(di => 
                  di.id && item.productId && di.id.toString() === item.productId._id.toString() && 
                  di.size === item.size
                );
              }
              
              // Get price information
              let originalPrice = 0;
              let discountedPrice = 0;
              let hasDiscount = false;
              
              if (item && item.productId && item.productId.variants) {
                const variant = item.productId.variants.find(v => v.size === item.size);
                if (variant && variant.salePrice) {
                  originalPrice = variant.salePrice;
                  
                  // If we have discount information, use it
                  if (discountedItem && discountedItem.discountAmount > 0) {
                    discountedPrice = discountedItem.finalPrice;
                    hasDiscount = true;
                  } else {
                    discountedPrice = originalPrice;
                  }
                }
              }
            %>
            
            <% if (hasDiscount) { %>
              <div class="item-price-container">
                <span class="item-original-price">₹<%= (originalPrice * item.quantity).toFixed(2) %></span>
                <span class="item-price">₹<%= (discountedPrice * item.quantity).toFixed(2) %></span>
                <span class="item-discount-badge">-<%= ((originalPrice - discountedPrice) / originalPrice * 100).toFixed(0) %>%</span>
              </div>
            <% } else { %>
              <div class="item-price">₹<%= (originalPrice * item.quantity).toFixed(2) %></div>
            <% } %>
          </div>
        </div>
      <% }); %>
    </div>
    
    <div class="price-summary">
      <div class="price-row">
        <span>Subtotal</span>
        <span>₹<%= totalPrice.toFixed(2) %></span>
      </div>
      <div class="price-row">
        <span>Delivery</span>
        <span><%= deliveryCharge === 0 ? 'FREE' : '₹' + deliveryCharge.toFixed(2) %></span>
      </div>
      
      <% if (discount > 0 && appliedCoupon) { %>
        <div class="price-row discount">
          <span>
            Discount (<%= appliedCoupon.code %>)
            <% if (appliedCoupon.percent) { %>
              <span class="discount-percent">-<%= appliedCoupon.percent %>%</span>
            <% } %>
          </span>
          <span>-₹<%= discount.toFixed(2) %></span>
        </div>
      <% } %>
      
      <div class="price-row total">
        <span>Total</span>
        <span>₹<%= grandTotal.toFixed(2) %></span>
      </div>
    </div>
  </div>
</div>

<!-- Coupon Sidebar -->
<div class="coupon-overlay" id="couponOverlay"></div>
<div class="coupon-sidebar" id="couponSidebar">
  <div class="sidebar-header">
    <h5>Apply Coupon</h5>
    <button class="btn-close" id="closeCouponSidebar">
      <i class="fas fa-times"></i>
    </button>
  </div>
  
  <div class="sidebar-content">
    <div class="coupon-input-group">
      <input type="text" placeholder="Enter coupon code" id="couponCodeInput">
      <button class="btn-apply" id="applyCouponBtn">Apply</button>
    </div>
    <div id="couponError" class="coupon-error"></div>
    
    <div class="coupon-categories">
      <div class="coupon-category">
        <h6>Available Coupons</h6>
        <div id="availableCoupons" class="coupon-list"></div>
      </div>
      
      <div class="coupon-category">
        <h6>Used Coupons</h6>
        <div id="usedCoupons" class="coupon-list"></div>
      </div>
      
      <div class="coupon-category">
        <h6>Expired Coupons</h6>
        <div id="expiredCoupons" class="coupon-list"></div>
      </div>
      
      <div class="coupon-category">
        <h6>Upcoming Coupons</h6>
        <div id="upcomingCoupons" class="coupon-list"></div>
      </div>
    </div>
  </div>
</div>

<!-- Toast Container -->
<div id="toastContainer"></div>

<%- include("../partials/user/footer") %>

<!-- Dark Mode Toggle -->
<button class="dark-mode-toggle" id="darkModeToggle">
  <i class="fas fa-moon"></i>
</button>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://unpkg.com/aos@next/dist/aos.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize AOS
    AOS.init({
      duration: 800,
      easing: 'ease-in-out',
      once: true
    });

    // Preloader
    const preloader = document.querySelector('.preloader');
    window.addEventListener('load', () => {
      setTimeout(() => {
        preloader.classList.add('fade-out');
      }, 500);
    });

    // Scroll Indicator
    const scrollIndicator = document.querySelector('.scroll-indicator');
    window.addEventListener('scroll', () => {
      const winScroll = document.body.scrollTop || document.documentElement.scrollTop;
      const height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
      const scrolled = (winScroll / height) * 100;
      scrollIndicator.style.width = scrolled + '%';
    });

    // Cursor Glow Effect
    const cursorGlow = document.querySelector('.cursor-glow');
    document.addEventListener('mousemove', (e) => {
      cursorGlow.style.left = e.clientX + 'px';
      cursorGlow.style.top = e.clientY + 'px';
    });

    document.addEventListener('mousedown', () => {
      cursorGlow.style.width = '30px';
      cursorGlow.style.height = '30px';
      cursorGlow.style.opacity = '0.8';
    });

    document.addEventListener('mouseup', () => {
      cursorGlow.style.width = '20px';
      cursorGlow.style.height = '20px';
      cursorGlow.style.opacity = '0.5';
    });

    // Dark mode toggle
    const darkModeToggle = document.getElementById('darkModeToggle');
    const prefersDarkScheme = window.matchMedia('(prefers-color-scheme: dark)');
    
    // Check for saved theme preference or use the system preference
    const savedTheme = localStorage.getItem('theme');
    
    if (savedTheme === 'dark' || (!savedTheme && prefersDarkScheme.matches)) {
      document.body.classList.add('dark-mode');
      darkModeToggle.innerHTML = '<i class="fas fa-sun"></i>';
    }
    
    darkModeToggle.addEventListener('click', () => {
      if (document.body.classList.contains('dark-mode')) {
        document.body.classList.remove('dark-mode');
        localStorage.setItem('theme', 'light');
        darkModeToggle.innerHTML = '<i class="fas fa-moon"></i>';
      } else {
        document.body.classList.add('dark-mode');
        localStorage.setItem('theme', 'dark');
        darkModeToggle.innerHTML = '<i class="fas fa-sun"></i>';
      }
    });

    // Navbar scroll effect
    window.addEventListener('scroll', function () {
      const navbar = document.querySelector('.navbar');
      if (navbar) {
        if (window.scrollY > 50) {
          navbar.classList.add('navbar-scrolled');
        } else {
          navbar.classList.remove('navbar-scrolled');
        }
      }
    });

    // Add shimmer effect to address cards
    document.querySelectorAll('.address-card').forEach(card => {
      card.addEventListener('mouseenter', () => {
        const shimmer = card.querySelector('.shimmer');
        if (shimmer) {
          shimmer.style.opacity = '1';
        }
      });

      card.addEventListener('mouseleave', () => {
        const shimmer = card.querySelector('.shimmer');
        if (shimmer) {
          shimmer.style.opacity = '0';
        }
      });
    });


    window.totalPrice = Number.parseFloat(
      document.querySelector(".price-row:first-child").lastElementChild.textContent.replace("₹", "")
    );

    // Order Summary Sidebar
    const openSidebar = document.getElementById("openSidebar");
    const closeSidebar = document.getElementById("closeSidebar");
    const sidebar = document.getElementById("orderSummarySidebar");
    const overlay = document.getElementById("overlay");

    if (openSidebar && sidebar && overlay) {
      openSidebar.addEventListener("click", () => {
        sidebar.classList.add("active");
        overlay.classList.add("active");
        document.body.style.overflow = "hidden";
      });
    }

    if (closeSidebar && sidebar && overlay) {
      closeSidebar.addEventListener("click", () => {
        sidebar.classList.remove("active");
        overlay.classList.remove("active");
        document.body.style.overflow = "auto";
      });
    }

    if (overlay && sidebar) {
      overlay.addEventListener("click", () => {
        sidebar.classList.remove("active");
        overlay.classList.remove("active");
        document.body.style.overflow = "auto";
      });
    }

    // Coupon Sidebar
    const openCouponSidebar = document.getElementById("openCouponSidebar");
    const closeCouponSidebar = document.getElementById("closeCouponSidebar");
    const couponSidebar = document.getElementById("couponSidebar");
    const couponOverlay = document.getElementById("couponOverlay");

    if (openCouponSidebar && couponSidebar && couponOverlay) {
      openCouponSidebar.addEventListener("click", () => {
        couponSidebar.classList.add("active");
        couponOverlay.classList.add("active");
        document.body.style.overflow = "hidden";
        fetchCoupons();
      });
    }

    if (closeCouponSidebar && couponSidebar && couponOverlay) {
      closeCouponSidebar.addEventListener("click", () => {
        couponSidebar.classList.remove("active");
        couponOverlay.classList.remove("active");
        document.body.style.overflow = "auto";
      });
    }

    if (couponOverlay && couponSidebar) {
      couponOverlay.addEventListener("click", () => {
        couponSidebar.classList.remove("active");
        couponOverlay.classList.remove("active");
        document.body.style.overflow = "auto";
      });
    }

    // Apply coupon button
    const applyCouponBtn = document.getElementById("applyCouponBtn");
    if (applyCouponBtn) {
      applyCouponBtn.addEventListener("click", () => {
        applyCoupon();
      });
    }

    // Remove coupon button
    const removeCouponBtn = document.getElementById("removeCouponBtn");
    if (removeCouponBtn) {
      removeCouponBtn.addEventListener("click", () => {
        removeCoupon();
      });
    }

    // Address selection buttons
    const addressButtons = document.querySelectorAll(".address-select-btn");
    addressButtons.forEach((button) => {
      button.addEventListener("click", function () {
        const addressId = this.getAttribute("data-address-id");
        selectAddress(addressId);
      });
    });

    // Initialize toast system
    window.toastSystem = {
      container: document.getElementById("toastContainer"),
      counter: 0,

      // Show a toast notification
      show: function (message, type = "success", duration = 3000) {
        try {
          // Create toast element
          const toastId = `toast-${++this.counter}`;
          const toast = document.createElement("div");
          toast.id = toastId;
          toast.className = `toast-notification ${type}`;

          // Set icon based on type
          let icon = "";
          if (type === "success") {
            icon = '<i class="fas fa-check-circle"></i>';
          } else if (type === "error") {
            icon = '<i class="fas fa-exclamation-circle"></i>';
          } else if (type === "info") {
            icon = '<i class="fas fa-info-circle"></i>';
          }

          // Create toast content
          toast.innerHTML = `
            <div class="toast-icon">${icon}</div>
            <div class="toast-message">${message}</div>
            <button class="toast-close" aria-label="Close">×</button>
            <div class="toast-progress"></div>
          `;

          // Add to container
          this.container.appendChild(toast);

          // Add close button functionality
          const closeBtn = toast.querySelector(".toast-close");
          closeBtn.addEventListener("click", () => {
            this.close(toastId);
          });

          // Auto close after duration
          setTimeout(() => {
            this.close(toastId);
          }, duration);

          return toastId;
        } catch (error) {
          console.error("Error showing toast:", error);
          // Fallback to alert if toast fails
          alert(message);
        }
      },

      // Close a toast notification
      close: (id) => {
        try {
          const toast = document.getElementById(id);
          if (toast) {
            toast.style.animation = "slideOut 0.3s forwards";
            setTimeout(() => {
              if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
              }
            }, 300);
          }
        } catch (error) {
          console.error("Error closing toast:", error);
        }
      },

      // Helper methods for different toast types
      success: function (message, duration) {
        return this.show(message, "success", duration);
      },

      error: function (message, duration) {
        return this.show(message, "error", duration);
      },

      info: function (message, duration) {
        return this.show(message, "info", duration);
      },
    };
  });

  // Fetch coupons function
  async function fetchCoupons() {
try {
  // Show loading indicator in each coupon container
  document.getElementById("availableCoupons").innerHTML = '<div class="text-center p-3"><i class="fas fa-spinner fa-spin"></i> Loading coupons...</div>';
  document.getElementById("usedCoupons").innerHTML = '<div class="text-center p-3"><i class="fas fa-spinner fa-spin"></i></div>';
  document.getElementById("expiredCoupons").innerHTML = '<div class="text-center p-3"><i class="fas fa-spinner fa-spin"></i></div>';
  document.getElementById("upcomingCoupons").innerHTML = '<div class="text-center p-3"><i class="fas fa-spinner fa-spin"></i></div>';
  
  // Use the correct endpoint from your router.js
  const response = await fetch("/coupons");
  
  if (!response.ok) {
    throw new Error(`Server responded with status: ${response.status}`);
  }
  
  const result = await response.json();
  console.log("Fetched coupons:", result);

  if (result.success && result.coupons && Array.isArray(result.coupons)) {
    renderCouponsByCategory(result.coupons);
    document.getElementById("couponError").style.display = "none";
  } else {
    throw new Error("Invalid coupon data format");
  }
} catch (error) {
  console.error("Error fetching coupons:", error);
  
  // Try to use server-rendered coupons if available
  if (window.serverCoupons && Array.isArray(window.serverCoupons) && window.serverCoupons.length > 0) {
    console.log("Using server-rendered coupons:", window.serverCoupons);
    renderCouponsByCategory(window.serverCoupons);
  } else {
    // Show error message
    const couponError = document.getElementById("couponError");
    couponError.textContent = "Unable to load coupons. Please try again later.";
    couponError.style.display = "block";
    
    // Show empty state in each container
    document.getElementById("availableCoupons").innerHTML = '<div class="empty-coupon-message">No coupons available</div>';
    document.getElementById("usedCoupons").innerHTML = '<div class="empty-coupon-message">No used coupons</div>';
    document.getElementById("expiredCoupons").innerHTML = '<div class="empty-coupon-message">No expired coupons</div>';
    document.getElementById("upcomingCoupons").innerHTML = '<div class="empty-coupon-message">No upcoming coupons</div>';
  }
}
}

// In the renderCouponsByCategory function, add validation to filter out dummy/invalid coupons
// Replace the existing renderCouponsByCategory function with this improved version:

function renderCouponsByCategory(coupons) {
  console.log("Rendering coupons:", coupons);
  
  // Get container elements for each category
  const availableContainer = document.getElementById("availableCoupons");
  const usedContainer = document.getElementById("usedCoupons");
  const expiredContainer = document.getElementById("expiredCoupons");
  const upcomingContainer = document.getElementById("upcomingCoupons");

  // Clear all containers
  availableContainer.innerHTML = "";
  usedContainer.innerHTML = "";
  expiredContainer.innerHTML = "";
  upcomingContainer.innerHTML = "";

  if (!coupons || coupons.length === 0) {
    availableContainer.innerHTML = '<div class="empty-coupon-message">No coupons available</div>';
    usedContainer.innerHTML = '<div class="empty-coupon-message">No used coupons</div>';
    expiredContainer.innerHTML = '<div class="empty-coupon-message">No expired coupons</div>';
    upcomingContainer.innerHTML = '<div class="empty-coupon-message">No upcoming coupons</div>';
    return;
  }

  // Sort coupons into categories
  const available = [];
  const used = [];
  const expired = [];
  const upcoming = [];

  const now = new Date();

  coupons.forEach((coupon) => {
    // Normalize coupon data structure
    const normalizedCoupon = {
      id: coupon._id || coupon.id,
      code: coupon.coupencode || coupon.code,
      percent: coupon.couponpercent || coupon.percent || coupon.discountPercent || 0,
      minimumPurchase: coupon.minimumPurchase || 0,
      startingDate: coupon.startingDate || coupon.startDate,
      expiryDate: coupon.expiryDate,
      limit: coupon.limit || 1,
      userUsageCount: coupon.userUsageCount || coupon.usedCount || 0,
      description: coupon.description || "",
      status: coupon.status || "available"
    };
    
    // Skip invalid or dummy coupons (those with 0% discount or missing essential data)
    if (!normalizedCoupon.code || normalizedCoupon.percent <= 0) {
      console.log("Skipping invalid coupon:", normalizedCoupon);
      return; // Skip this coupon
    }
    
    // If status is not explicitly set, determine it based on dates
    if (!coupon.status) {
      const startDate = new Date(normalizedCoupon.startingDate);
      const expiryDate = new Date(normalizedCoupon.expiryDate);
      
      if (now < startDate) {
        normalizedCoupon.status = "upcoming";
      } else if (now > expiryDate) {
        normalizedCoupon.status = "expired";
      } else if (normalizedCoupon.userUsageCount >= normalizedCoupon.limit) {
        normalizedCoupon.status = "used";
      } else {
        normalizedCoupon.status = "available";
      }
    }

    // Add to appropriate category
    if (normalizedCoupon.status === "used") {
      used.push(normalizedCoupon);
    } else if (normalizedCoupon.status === "expired") {
      expired.push(normalizedCoupon);
    } else if (normalizedCoupon.status === "upcoming") {
      upcoming.push(normalizedCoupon);
    } else {
      available.push(normalizedCoupon);
    }
  });

  console.log("Categorized coupons:", { available, used, expired, upcoming });

  // Render each category
  if (available.length > 0) {
    available.forEach((coupon) => {
      availableContainer.appendChild(createCouponElement(coupon));
    });
  } else {
    availableContainer.innerHTML = '<div class="empty-coupon-message">No available coupons</div>';
  }

  if (used.length > 0) {
    used.forEach((coupon) => {
      usedContainer.appendChild(createCouponElement(coupon));
    });
  } else {
    usedContainer.innerHTML = '<div class="empty-coupon-message">No used coupons</div>';
  }

  if (expired.length > 0) {
    expired.forEach((coupon) => {
      expiredContainer.appendChild(createCouponElement(coupon));
    });
  } else {
    expiredContainer.innerHTML = '<div class="empty-coupon-message">No expired coupons</div>';
  }

  if (upcoming.length > 0) {
    upcoming.forEach((coupon) => {
      upcomingContainer.appendChild(createCouponElement(coupon));
    });
  } else {
    upcomingContainer.innerHTML = '<div class="empty-coupon-message">No upcoming coupons</div>';
  }
}

// Also update the createCouponElement function to handle date formatting better
function createCouponElement(coupon) {
  console.log("Creating coupon element for:", coupon);
  
  const couponItem = document.createElement("div");
  couponItem.className = "coupon-item";

  // Format dates
  let startDate = "N/A";
  let expiryDate = "N/A";
  
  try {
    if (coupon.startingDate) {
      const date = new Date(coupon.startingDate);
      if (!isNaN(date.getTime())) {
        startDate = date.toLocaleDateString();
      }
    }
    if (coupon.expiryDate) {
      const date = new Date(coupon.expiryDate);
      if (!isNaN(date.getTime())) {
        expiryDate = date.toLocaleDateString();
      }
    }
  } catch (e) {
    console.error("Error formatting dates:", e);
  }

  // Determine if eligible based on minimum purchase
  const isEligible = (coupon.minimumPurchase || 0) <= window.totalPrice;

  // Create usage info
  let usageInfo = "";
  if (coupon.status === "used") {
    usageInfo = `<div class="coupon-usage">Used ${coupon.userUsageCount || 1}/${coupon.limit || 1} times</div>`;
  } else if (coupon.status === "available") {
    if ((coupon.limit || 1) > 1) {
      const remainingUses = (coupon.limit || 1) - (coupon.userUsageCount || 0);
      usageInfo = `<div class="coupon-usage">Can be used ${remainingUses} more time(s)</div>`;
    }
  }

  // Create tooltip for ineligible coupons
  let tooltipHtml = "";
  if (coupon.status === "available" && !isEligible) {
    const amountNeeded = ((coupon.minimumPurchase || 0) - window.totalPrice).toFixed(2);
    tooltipHtml = `
      <div class="coupon-tooltip">
        <i class="fas fa-info-circle"></i>
        <span class="tooltip-text">Add ₹${amountNeeded} more to your cart to use this coupon</span>
      </div>
    `;
  }

  // Get status text
  let statusText = "";
  if (coupon.status === "available") {
    statusText = "Available";
  } else if (coupon.status === "used") {
    statusText = "Used";
  } else if (coupon.status === "expired") {
    statusText = "Expired";
  } else if (coupon.status === "upcoming") {
    statusText = "Upcoming";
  }

  // Get coupon code and percent
  const couponCode = coupon.code || "";
  const couponPercent = coupon.percent || 0;

  couponItem.innerHTML = `
    <div class="coupon-code">${couponCode} ${tooltipHtml}</div>
    <div class="coupon-status status-${coupon.status}">${statusText}</div>
    <div class="coupon-offer">${couponPercent}% off entire order</div>
    <div class="coupon-min-purchase">Minimum purchase: ₹${(coupon.minimumPurchase || 0).toFixed(2)}</div>
    <div class="coupon-expiry">Valid: ${startDate} to ${expiryDate}</div>
    ${usageInfo}
    ${coupon.description ? `<div class="coupon-description">${coupon.description}</div>` : ""}
    ${
      coupon.status === "available"
        ? `<button class="coupon-apply-btn" onclick="applyCouponCode('${couponCode}')" 
            ${!isEligible ? "disabled" : ""}>
            ${isEligible ? "APPLY" : "NOT ELIGIBLE"}
        </button>`
        : ""
    }
  `;

  return couponItem;
}

  // Apply coupon from input field
  async function applyCoupon() {
    const couponCode = document.getElementById("couponCodeInput").value.trim();
    applyCouponCode(couponCode);
  }

  // Apply coupon with code
  async function applyCouponCode(couponCode) {
    try {
      if (!couponCode) {
        showToast("Please enter a coupon code", "error");
        return;
      }

      // Show loading state
      const applyBtn = document.querySelector(".btn-apply");
      if (applyBtn) {
        applyBtn.disabled = true;
        applyBtn.textContent = "Applying...";
      }

      const response = await fetch("/apply-coupon", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ couponCode }),
      });

      const result = await response.json();

      if (result.success) {
        // Create confetti animation
        createConfetti();
        
        showToast(`Coupon "${couponCode}" applied successfully!`, "success");

        // Close the coupon sidebar
        const couponSidebar = document.getElementById("couponSidebar");
        const couponOverlay = document.getElementById("couponOverlay");
        if (couponSidebar && couponOverlay) {
          couponSidebar.classList.remove("active");
          couponOverlay.classList.remove("active");
          document.body.style.overflow = "auto";
        }

        // Reload the page after a short delay to show the toast
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      } else {
        showToast(result.message || "Failed to apply coupon", "error");
      }
    } catch (error) {
      console.error("Error applying coupon:", error);
      showToast("Error applying coupon. Please try again.", "error");
    } finally {
      // Reset loading state
      const applyBtn = document.querySelector(".btn-apply");
      if (applyBtn) {
        applyBtn.disabled = false;
        applyBtn.textContent = "Apply";
      }
    }
  }

  // Create confetti animation
  function createConfetti() {
    const colors = ['#3b82f6', '#8b5cf6', '#ec4899', '#10b981', '#f59e0b'];
    const confettiCount = 100;
    
    for (let i = 0; i < confettiCount; i++) {
      const confetti = document.createElement('div');
      confetti.className = 'confetti';
      confetti.style.left = Math.random() * 100 + 'vw';
      confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
      confetti.style.width = Math.random() * 10 + 5 + 'px';
      confetti.style.height = Math.random() * 10 + 5 + 'px';
      confetti.style.opacity = Math.random();
      confetti.style.animationDuration = Math.random() * 3 + 2 + 's';
      document.body.appendChild(confetti);
      
      // Remove confetti after animation completes
      setTimeout(() => {
        confetti.remove();
      }, 5000);
    }
  }

  // Remove coupon
  async function removeCoupon() {
    try {
      // Add animation to the applied coupon element
      const appliedCoupon = document.getElementById('appliedCoupon');
      if (appliedCoupon) {
        appliedCoupon.style.animation = 'slideOut 0.3s forwards';
      }
      
      const response = await fetch("/remove-coupon", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
      });

      const result = await response.json();

      if (result.success) {
        showToast("Coupon removed successfully!", "info");

        // Reload the page after a short delay to show the toast
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      } else {
        showToast(result.message || "Failed to remove coupon", "error");
      }
    } catch (error) {
      console.error("Error removing coupon:", error);
      showToast("Server error while removing coupon", "error");
    }
  }

  // Select address
  function selectAddress(addressId) {
    // Show loading state on the button
    const button = document.querySelector(`.address-select-btn[data-address-id="${addressId}"]`);
    if (button) {
      button.disabled = true;
      button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
    }

    fetch("/select-delivery-address", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ addressId }),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          showToast("Address selected successfully!", "success");
          setTimeout(() => {
            window.location.href = "/checkout-payment";
          }, 1000);
        } else {
          showToast(data.message || "Failed to select address", "error");
          // Reset button state
          if (button) {
            button.disabled = false;
            button.textContent = "DELIVER HERE";
          }
        }
      })
      .catch((error) => {
        console.error("Error selecting address:", error);
        showToast("Server issue while selecting address", "error");
        // Reset button state
        if (button) {
          button.disabled = false;
          button.textContent = "DELIVER HERE";
        }
      });
  }

  // Helper function to show toast
  function showToast(message, type = "success", duration = 3000) {
    if (window.toastSystem) {
      return window.toastSystem.show(message, type, duration);
    } else {
      // Create a simple toast if the toast system is not available
      const toast = document.createElement("div");
      toast.className = `toast-notification ${type}`;
      toast.innerHTML = `
        <div class="toast-message">${message}</div>
      `;

      const container = document.getElementById("toastContainer");
      if (container) {
        container.appendChild(toast);
        setTimeout(() => {
          toast.remove();
        }, duration);
      } else {
        alert(message);
      }
    }
  }

  // Initialize coupons from EJS if available
  window.addEventListener('DOMContentLoaded', function() {
    // Store coupons from EJS template if available
    if (typeof coupons !== 'undefined' && Array.isArray(coupons)) {
      window.ejsCoupons = coupons;
    }
  });
</script>
// Add this script at the end of the file, just before the closing </body> tag
// Initialize server coupons data
window.serverCoupons = <%- JSON.stringify(coupons || []) %>;
console.log("Server coupons initialized:", window.serverCoupons);
</body>
</html>
