<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Create your ELITE WEAR account">
    <title>ELITE WEAR | Create Account</title>
    <link rel="stylesheet" href="/userStyle/signup.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Cormorant:wght@400;500;600;700&family=Montserrat:wght@300;400;500;600&display=swap" rel="stylesheet">
    <link rel="icon" type="image/png" href="/images/favicon.png">
</head>
<body>
    <div class="signup">
        <div class="signup__image-panel">
            <div class="signup__image-overlay"></div>
            <div class="signup__brand">
                <div class="signup__logo">
                    <span class="signup__logo-text">E</span>
                </div>
                <h1 class="signup__brand-name">ELITE WEAR</h1>
                <p class="signup__brand-tagline">Redefining Luxury Fashion</p>
            </div>
        </div>
        
        <div class="signup__form-panel">
            <div class="signup__form-container">
                <header class="signup__header">
                    <h2 class="signup__title">Create Account</h2>
                    <p class="signup__subtitle">Join the world of premium fashion</p>
                </header>

                <% if (typeof message !== 'undefined' && message) { %>
                    <div class="signup__alert">
                        <%= message %>
                    </div>
                <% } %>

                <form action="/signup" method="POST" id="signupForm" class="signup__form" novalidate>
                    <div class="form-field">
                        <label for="fullname" class="form-field__label">Full Name</label>
                        <div class="form-field__input-wrapper" data-state="default">
                            <input 
                                type="text" 
                                id="fullname" 
                                name="fullname" 
                                class="form-field__input" 
                                placeholder="Your full name"
                                value="<%= typeof formData !== 'undefined' && formData ? formData.fullname : '' %>"
                                autocomplete="name"
                            >
                            <div class="form-field__icon form-field__icon--success">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                                    <polyline points="22 4 12 14.01 9 11.01"></polyline>
                                </svg>
                            </div>
                            <div class="form-field__icon form-field__icon--error">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <circle cx="12" cy="12" r="10"></circle>
                                    <line x1="12" y1="8" x2="12" y2="12"></line>
                                    <line x1="12" y1="16" x2="12.01" y2="16"></line>
                                </svg>
                            </div>
                        </div>
                        <div class="form-field__message" id="error1"></div>
                    </div>

                    <div class="form-field">
                        <label for="email" class="form-field__label">Email Address</label>
                        <div class="form-field__input-wrapper" data-state="default">
                            <input 
                                type="email" 
                                id="email" 
                                name="email" 
                                class="form-field__input" 
                                placeholder="your@email.com"
                                value="<%= typeof formData !== 'undefined' && formData ? formData.email : '' %>"
                                autocomplete="email"
                            >
                            <div class="form-field__icon form-field__icon--success">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                                    <polyline points="22 4 12 14.01 9 11.01"></polyline>
                                </svg>
                            </div>
                            <div class="form-field__icon form-field__icon--error">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <circle cx="12" cy="12" r="10"></circle>
                                    <line x1="12" y1="8" x2="12" y2="12"></line>
                                    <line x1="12" y1="16" x2="12.01" y2="16"></line>
                                </svg>
                            </div>
                        </div>
                        <div class="form-field__message" id="error2"></div>
                    </div>

                    <div class="form-field">
                        <label for="mobile" class="form-field__label">Mobile Number</label>
                        <div class="form-field__input-wrapper" data-state="default">
                            <input 
                                type="tel" 
                                id="mobile" 
                                name="mobile" 
                                class="form-field__input" 
                                placeholder="Your mobile number"
                                value="<%= typeof formData !== 'undefined' && formData ? formData.mobile : '' %>"
                                autocomplete="tel"
                            >
                            <div class="form-field__icon form-field__icon--success">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                                    <polyline points="22 4 12 14.01 9 11.01"></polyline>
                                </svg>
                            </div>
                            <div class="form-field__icon form-field__icon--error">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <circle cx="12" cy="12" r="10"></circle>
                                    <line x1="12" y1="8" x2="12" y2="12"></line>
                                    <line x1="12" y1="16" x2="12.01" y2="16"></line>
                                </svg>
                            </div>
                        </div>
                        <div class="form-field__message" id="error3"></div>
                    </div>

                    <div class="form-field">
                        <label for="password" class="form-field__label">Password</label>
                        <div class="form-field__input-wrapper" data-state="default">
                            <input 
                                type="password" 
                                id="password" 
                                name="password" 
                                class="form-field__input" 
                                placeholder="••••••••"
                                autocomplete="new-password"
                            >
                            <button type="button" class="form-field__icon form-field__icon--toggle" id="passwordToggle" aria-label="Show password">
                                <svg class="form-field__icon--show" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                                    <circle cx="12" cy="12" r="3"></circle>
                                </svg>
                                <svg class="form-field__icon--hide" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: none;">
                                    <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path>
                                    <line x1="1" y1="1" x2="23" y2="23"></line>
                                </svg>
                            </button>
                            <div class="form-field__icon form-field__icon--success">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                                    <polyline points="22 4 12 14.01 9 11.01"></polyline>
                                </svg>
                            </div>
                            <div class="form-field__icon form-field__icon--error">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <circle cx="12" cy="12" r="10"></circle>
                                    <line x1="12" y1="8" x2="12" y2="12"></line>
                                    <line x1="12" y1="16" x2="12.01" y2="16"></line>
                                </svg>
                            </div>
                        </div>
                        <div class="form-field__message" id="error4"></div>
                        <div class="password-strength" id="passwordStrength">
                            <div class="strength-meter">
                                <div class="strength-segment" data-strength="1"></div>
                                <div class="strength-segment" data-strength="2"></div>
                                <div class="strength-segment" data-strength="3"></div>
                                <div class="strength-segment" data-strength="4"></div>
                            </div>
                            <span class="strength-text">Password strength</span>
                        </div>
                    </div>

                    <div class="form-field">
                        <label for="cpassword" class="form-field__label">Confirm Password</label>
                        <div class="form-field__input-wrapper" data-state="default">
                            <input 
                                type="password" 
                                id="cpassword" 
                                name="cpassword" 
                                class="form-field__input" 
                                placeholder="••••••••"
                                autocomplete="new-password"
                            >
                            <button type="button" class="form-field__icon form-field__icon--toggle" id="cpasswordToggle" aria-label="Show password">
                                <svg class="form-field__icon--show" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                                    <circle cx="12" cy="12" r="3"></circle>
                                </svg>
                                <svg class="form-field__icon--hide" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: none;">
                                    <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path>
                                    <line x1="1" y1="1" x2="23" y2="23"></line>
                                </svg>
                            </button>
                            <div class="form-field__icon form-field__icon--success">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                                    <polyline points="22 4 12 14.01 9 11.01"></polyline>
                                </svg>
                            </div>
                            <div class="form-field__icon form-field__icon--error">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <circle cx="12" cy="12" r="10"></circle>
                                    <line x1="12" y1="8" x2="12" y2="12"></line>
                                    <line x1="12" y1="16" x2="12.01" y2="16"></line>
                                </svg>
                            </div>
                        </div>
                        <div class="form-field__message" id="error5"></div>
                    </div>

                    <div class="signup__referral">
                        <p class="signup__referral-text">Have a referral code? Claim your reward!</p>
                        <button type="button" class="signup__referral-button" id="referralBtn">
                            <span>Enter Referral Code</span>
                        </button>
                        <input type="hidden" id="referralCode" name="referralCode" value="<%= typeof referralCode !== 'undefined' && referralCode ? referralCode : '' %>">
                        <% if (typeof referralCode !== 'undefined' && referralCode) { %>
                            <p class="signup__referral-applied">Referral code <%= referralCode %> applied!</p>
                        <% } %>
                    </div>

                    <div class="terms-privacy">
                        <label class="checkbox-container">
                            <input type="checkbox" name="agreeTerms" id="agreeTerms" required>
                            <span class="checkmark" aria-hidden="true"></span>
                            I agree to the <a href="/terms" class="terms-link">Terms of Service</a> and <a href="/privacy" class="terms-link">Privacy Policy</a>
                        </label>
                        <div class="form-field__message" id="error6"></div>
                    </div>

                    <button type="submit" class="signup__button">
                        <span class="signup__button-text">Create Account</span>
                        <span class="signup__button-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <line x1="5" y1="12" x2="19" y2="12"></line>
                                <polyline points="12 5 19 12 12 19"></polyline>
                            </svg>
                        </span>
                    </button>
                </form>

                <div class="signup__divider">
                    <span class="signup__divider-text">or</span>
                </div>

                <div class="signup__social">
                    <a href="/auth/google" class="signup__social-button signup__social-button--google">
                        <svg class="signup__social-icon" viewBox="0 0 24 24">
                            <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" fill="#4285F4"/>
                            <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" fill="#34A853"/>
                            <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" fill="#FBBC05"/>
                            <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" fill="#EA4335"/>
                        </svg>
                        <span>Continue with Google</span>
                    </a>
                </div>

                <footer class="signup__footer">
                    <p class="signup__login-text">
                        Already have an account? <a href="/login" class="signup__login-link">Sign in</a>
                    </p>
                </footer>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Elements
            const signupForm = document.getElementById('signupForm');
            const fullnameInput = document.getElementById('fullname');
            const emailInput = document.getElementById('email');
            const mobileInput = document.getElementById('mobile');
            const passwordInput = document.getElementById('password');
            const confirmPasswordInput = document.getElementById('cpassword');
            const agreeTermsCheckbox = document.getElementById('agreeTerms');
            const referralBtn = document.getElementById('referralBtn');
            const passwordToggle = document.getElementById('passwordToggle');
            const cpasswordToggle = document.getElementById('cpasswordToggle');
            
            const formInputs = [fullnameInput, emailInput, mobileInput, passwordInput, confirmPasswordInput];
            
            const errorElements = {
                name: document.getElementById('error1'),
                email: document.getElementById('error2'),
                mobile: document.getElementById('error3'),
                password: document.getElementById('error4'),
                confirm: document.getElementById('error5'),
                terms: document.getElementById('error6')
            };

            // Password strength elements
            const strengthMeter = document.querySelector('.strength-meter');
            const strengthSegments = document.querySelectorAll('.strength-segment');
            const strengthText = document.querySelector('.strength-text');
            
            // Add animation classes after page load
            setTimeout(() => {
                document.querySelector('.signup__image-panel').classList.add('signup__image-panel--animate');
                document.querySelector('.signup__form-container').classList.add('signup__form-container--animate');
            }, 100);
            
            // Fixed Password visibility toggle
            passwordToggle.addEventListener('click', function() {
                togglePasswordVisibility(passwordInput, this);
            });

            cpasswordToggle.addEventListener('click', function() {
                togglePasswordVisibility(confirmPasswordInput, this);
            });

            // Helper function for password visibility toggling
            function togglePasswordVisibility(inputElement, toggleElement) {
                const isPassword = inputElement.type === 'password';
                inputElement.type = isPassword ? 'text' : 'password';
                
                // Toggle the visibility of the eye icons
                const showIcon = toggleElement.querySelector('.form-field__icon--show');
                const hideIcon = toggleElement.querySelector('.form-field__icon--hide');
                
                if (isPassword) {
                    showIcon.style.display = 'none';
                    hideIcon.style.display = 'block';
                    toggleElement.setAttribute('aria-label', 'Hide password');
                } else {
                    showIcon.style.display = 'block';
                    hideIcon.style.display = 'none';
                    toggleElement.setAttribute('aria-label', 'Show password');
                }
                
                // Add focus back to input field for better UX
                inputElement.focus();
                
                // Position cursor at the end of the text
                const length = inputElement.value.length;
                inputElement.setSelectionRange(length, length);
            }

            // Password strength meter
            passwordInput.addEventListener('input', function() {
                updatePasswordStrength(this.value);
            });

            function updatePasswordStrength(password) {
                // Reset all segments
                strengthSegments.forEach(segment => {
                    segment.classList.remove('active', 'weak', 'fair', 'good', 'strong');
                });
                
                if (!password) {
                    strengthText.textContent = 'Password strength';
                    return;
                }

                // Calculate strength score (0-4)
                let score = 0;
                
                // Length check
                if (password.length >= 8) score++;
                if (password.length >= 12) score++;
                
                // Complexity checks
                if (/[A-Z]/.test(password)) score++;
                if (/[0-9]/.test(password)) score++;
                if (/[^A-Za-z0-9]/.test(password)) score++;
                
                // Cap at 4
                score = Math.min(score, 4);
                
                // Update UI
                let strengthClass = '';
                let strengthLabel = '';
                
                switch(score) {
                    case 1:
                        strengthClass = 'weak';
                        strengthLabel = 'Weak';
                        break;
                    case 2:
                        strengthClass = 'fair';
                        strengthLabel = 'Fair';
                        break;
                    case 3:
                        strengthClass = 'good';
                        strengthLabel = 'Good';
                        break;
                    case 4:
                        strengthClass = 'strong';
                        strengthLabel = 'Strong';
                        break;
                    default:
                        strengthClass = 'weak';
                        strengthLabel = 'Too weak';
                }
                
                // Update segments
                for (let i = 0; i < score; i++) {
                    strengthSegments[i].classList.add('active', strengthClass);
                }
                
                strengthText.textContent = strengthLabel;
            }
            
            // Form submission validation
            signupForm.addEventListener('submit', function(e) {
                if (!validateForm()) {
                    e.preventDefault();
                    // Scroll to the first error
                    const firstError = document.querySelector('.form-field__message[style*="display: block"]');
                    if (firstError) {
                        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                } else {
                    // Clear stored form data on successful submission
                    sessionStorage.removeItem('signupFormData');
                }
            });
            
            // Field validation on blur
            formInputs.forEach(input => {
                let modified = false;
                
                input.addEventListener('input', function() {
                    modified = true;
                    
                    // Reset validation state when user starts typing
                    const wrapper = this.closest('.form-field__input-wrapper');
                    wrapper.setAttribute('data-state', 'default');
                    
                    const errorId = this.id === 'cpassword' ? 'error5' : 
                                   this.id === 'password' ? 'error4' : 
                                   this.id === 'mobile' ? 'error3' : 
                                   this.id === 'email' ? 'error2' : 'error1';
                    
                    const errorElement = document.getElementById(errorId);
                    errorElement.style.display = 'none';
                });
                
                input.addEventListener('blur', function() {
                    if (modified) {
                        validateField(this);
                        modified = false;
                    }
                });
            });

            // Terms checkbox validation
            agreeTermsCheckbox.addEventListener('change', function() {
                if (this.checked) {
                    errorElements.terms.style.display = 'none';
                }
            });
            
            // Save form data and redirect to referral page
            referralBtn.addEventListener('click', function() {
                // Save form data to sessionStorage
                const formData = {
                    fullname: fullnameInput.value,
                    email: emailInput.value,
                    mobile: mobileInput.value,
                    password: passwordInput.value,
                    cpassword: confirmPasswordInput.value
                };
                
                // Store form data in sessionStorage
                sessionStorage.setItem('signupFormData', JSON.stringify(formData));
                
                // Redirect to referral page
                window.location.href = '/referralSpace';
            });
            
            // Check for stored form data when page loads
            const savedFormData = sessionStorage.getItem('signupFormData');
            if (savedFormData) {
                const formData = JSON.parse(savedFormData);
                
                // Populate form fields with saved data
                fullnameInput.value = formData.fullname || '';
                emailInput.value = formData.email || '';
                mobileInput.value = formData.mobile || '';
                passwordInput.value = formData.password || '';
                confirmPasswordInput.value = formData.cpassword || '';
                
                // Update password strength if password exists
                if (formData.password) {
                    updatePasswordStrength(formData.password);
                }
            }
            
            // Check for referral code in URL parameters
            const urlParams = new URLSearchParams(window.location.search);
            const referralParam = urlParams.get('referral');
            
            if (referralParam) {
                // Update the hidden referral code input
                document.getElementById('referralCode').value = referralParam;
                
                // Show the "referral applied" message if it doesn't already exist
                const referralSection = document.querySelector('.signup__referral');
                if (!referralSection.querySelector('.signup__referral-applied')) {
                    const appliedMsg = document.createElement('p');
                    appliedMsg.className = 'signup__referral-applied';
                    appliedMsg.textContent = `Referral code ${referralParam} applied!`;
                    referralSection.appendChild(appliedMsg);
                }
            }
            
            function validateField(field) {
                switch(field.id) {
                    case 'fullname':
                        validateName();
                        break;
                    case 'email':
                        validateEmail();
                        break;
                    case 'mobile':
                        validateMobile();
                        break;
                    case 'password':
                        validatePassword();
                        break;
                    case 'cpassword':
                        validatePasswordMatch();
                        break;
                }
            }
            
            function validateForm() {
                const isNameValid = validateName();
                const isEmailValid = validateEmail();
                const isMobileValid = validateMobile();
                const isPasswordValid = validatePassword();
                const isPasswordMatchValid = validatePasswordMatch();
                const isTermsValid = validateTerms();
                
                return isNameValid && isEmailValid && isMobileValid &&
                       isPasswordValid && isPasswordMatchValid && isTermsValid;
            }
            
            function validateName() {
                const nameValue = fullnameInput.value.trim();
                const namePattern = /^[A-Za-z\s]+$/;
                
                if (nameValue === "") {
                    showError(fullnameInput, errorElements.name, "Please enter your full name");
                    return false;
                } else if (!namePattern.test(nameValue)) {
                    showError(fullnameInput, errorElements.name, "Name can only contain alphabets and spaces");
                    return false;
                } else {
                    showSuccess(fullnameInput, errorElements.name);
                    return true;
                }
            }
            
            function validateEmail() {
                const emailValue = emailInput.value.trim();
                const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                
                if (emailValue === "") {
                    showError(emailInput, errorElements.email, "Please enter an email address");
                    return false;
                } else if (!emailPattern.test(emailValue)) {
                    showError(emailInput, errorElements.email, "Enter a valid email (example@mail.com)");
                    return false;
                } else {
                    showSuccess(emailInput, errorElements.email);
                    return true;
                }
            }
            
            function validateMobile() {
                const mobileValue = mobileInput.value.trim();
                const mobilePattern = /^[0-9]{10,12}$/;
                
                if (mobileValue === "") {
                    showError(mobileInput, errorElements.mobile, "Please enter a mobile number");
                    return false;
                } else if (!mobilePattern.test(mobileValue)) {
                    showError(mobileInput, errorElements.mobile, "Enter a valid mobile number (10-12 digits)");
                    return false;
                } else {
                    showSuccess(mobileInput, errorElements.mobile);
                    return true;
                }
            }
            
            function validatePassword() {
                const passwordValue = passwordInput.value;
                
                if (passwordValue === "") {
                    showError(passwordInput, errorElements.password, "Please enter a password");
                    return false;
                } else if (passwordValue.length < 8) {
                    showError(passwordInput, errorElements.password, "Password must be at least 8 characters");
                    return false;
                } else {
                    showSuccess(passwordInput, errorElements.password);
                    
                    if (confirmPasswordInput.value !== "") {
                        validatePasswordMatch();
                    }
                    return true;
                }
            }
            
            function validatePasswordMatch() {
                const passwordValue = passwordInput.value;
                const confirmValue = confirmPasswordInput.value;
                
                if (confirmValue === "") {
                    showError(confirmPasswordInput, errorElements.confirm, "Please confirm your password");
                    return false;
                } else if (passwordValue !== confirmValue) {
                    showError(confirmPasswordInput, errorElements.confirm, "Passwords do not match");
                    return false;
                } else {
                    showSuccess(confirmPasswordInput, errorElements.confirm);
                    return true;
                }
            }
            
            function validateTerms() {
                if (!agreeTermsCheckbox.checked) {
                    errorElements.terms.textContent = "You must agree to the Terms of Service and Privacy Policy";
                    errorElements.terms.style.display = 'block';
                    return false;
                } else {
                    errorElements.terms.style.display = 'none';
                    return true;
                }
            }
            
            function showError(inputElement, errorElement, message) {
                const wrapper = inputElement.closest('.form-field__input-wrapper');
                wrapper.setAttribute('data-state', 'error');
                errorElement.textContent = message;
                errorElement.style.display = 'block';
            }
            
            function showSuccess(inputElement, errorElement) {
                const wrapper = inputElement.closest('.form-field__input-wrapper');
                wrapper.setAttribute('data-state', 'success');
                errorElement.style.display = 'none';
            }
            
            function resetValidation(inputElement, errorElement) {
                const wrapper = inputElement.closest('.form-field__input-wrapper');
                wrapper.setAttribute('data-state', 'default');
                errorElement.style.display = 'none';
            }
        });
    </script>
</body>
</html>