<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Elite Wear Admin - Banner Management</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.5/font/bootstrap-icons.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/adminStyle/banner-management.css">
</head>
<body>
    <%- include("../partials/admin/header") %>  

    <div class="main-content">
        <div class="page-header">
            <div>
                <h2>Banner Management</h2>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/admin/">Dashboard</a></li>
                        <li class="breadcrumb-item active">Banners</li>
                    </ol>
                </nav>
            </div>
            <div class="user-profile">
                <img src="/api/placeholder/40/40" alt="User Avatar">
                <div>
                    <div>Aimad</div>
                    <small class="text-muted">Admin</small>
                </div>
            </div>
        </div>

        <!-- Toast Container -->
        <div class="toast-container" id="toastContainer"></div>

        <div class="search-sort-filter">
            <div class="search-container">
                <i class="bi bi-search"></i>
                <input type="text" class="form-control" id="searchBanner" placeholder="Search banner by title...">
            </div>
            
            <div class="date-filter">
                <i class="bi bi-calendar-range"></i>
                <input type="text" class="form-control" id="dateFilter" placeholder="Filter by date range" readonly>
            </div>
            
            <div class="dropdown sort-dropdown">
                <button class="btn dropdown-toggle" type="button" id="sortDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="bi bi-sort-down"></i> Sort By
                </button>
                <ul class="dropdown-menu" aria-labelledby="sortDropdown">
                    <li><a class="dropdown-item" href="#" data-sort="days-desc">More days left</a></li>
                    <li><a class="dropdown-item" href="#" data-sort="days-asc">Less days left</a></li>
                    <li><a class="dropdown-item" href="#" data-sort="date-desc">Newest first</a></li>
                    <li><a class="dropdown-item" href="#" data-sort="date-asc">Oldest first</a></li>
                    <li><a class="dropdown-item" href="#" data-sort="title-asc">Title (A-Z)</a></li>
                    <li><a class="dropdown-item" href="#" data-sort="title-desc">Title (Z-A)</a></li>
                </ul>
            </div>
            
            <div class="dropdown filter-dropdown d-md-none">
                <button class="btn dropdown-toggle" type="button" id="filterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="bi bi-funnel"></i> Filter
                </button>
                <ul class="dropdown-menu" aria-labelledby="filterDropdown">
                    <li><a class="dropdown-item" href="#" data-filter="all">All Banners</a></li>
                    <li><a class="dropdown-item" href="#" data-filter="active">Active</a></li>
                    <li><a class="dropdown-item" href="#" data-filter="upcoming">Upcoming</a></li>
                    <li><a class="dropdown-item" href="#" data-filter="expired">Expired</a></li>
                </ul>
            </div>
            
            <div class="filter-pills d-none d-md-flex">
                <button class="btn active" data-filter="all">All Banners</button>
                <button class="btn" data-filter="active">Active</button>
                <button class="btn" data-filter="upcoming">Upcoming</button>
                <button class="btn" data-filter="expired">Expired</button>
            </div>
        </div>

        <div class="banner-table">
            <!-- Bulk Actions Bar -->
            <div class="bulk-actions" id="bulkActions">
                <div class="bulk-actions-info">
                    <span id="selectedCount">0</span> banners selected
                </div>
                <div class="bulk-actions-buttons">
                    <button class="btn btn-sm btn-outline-danger" id="bulkDeleteBtn">
                        <i class="bi bi-trash"></i> Delete Selected
                    </button>
                    <div class="dropdown">
                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="bulkStatusDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="bi bi-tag"></i> Change Status
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="bulkStatusDropdown">
                            <li><a class="dropdown-item" href="#" data-status="active">Set as Active</a></li>
                            <li><a class="dropdown-item" href="#" data-status="upcoming">Set as Upcoming</a></li>
                            <li><a class="dropdown-item" href="#" data-status="expired">Set as Expired</a></li>
                        </ul>
                    </div>
                </div>
            </div>
            
            <table class="table table-hover mb-0">
                <thead>
                    <tr>
                        <th width="40">
                            <label class="custom-checkbox">
                                <input type="checkbox" id="selectAll">
                                <span class="checkmark"></span>
                            </label>
                        </th>
                        <th width="100">Image</th>
                        <th>Title</th>
                        <th width="150">Starting Date</th>
                        <th width="150">Ending Date</th>
                        <th width="120">Status</th>
                        <th width="120">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% if(data && data.length > 0) { %>
                        <% data.forEach(banner => { 
                            // Calculate days left
                            const today = new Date();
                            const endDate = new Date(banner.endingDate);
                            const startDate = new Date(banner.startingDate);
                            const daysLeft = Math.ceil((endDate - today) / (1000 * 60 * 60 * 24));
                            const daysUntilStart = Math.ceil((startDate - today) / (1000 * 60 * 60 * 24));
                            
                            let daysLeftClass = '';
                            if (daysLeft <= 3 && daysLeft > 0) {
                                daysLeftClass = 'urgent';
                            } else if (daysLeft <= 7 && daysLeft > 0) {
                                daysLeftClass = 'warning';
                            } else if (daysLeft > 0) {
                                daysLeftClass = 'good';
                            }
                            
                            const status = banner.status.toLowerCase().includes('upcoming') ? 'upcoming' : 
                                          banner.status.toLowerCase().includes('expired') ? 'expired' : 'active';
                        %>
                            <tr data-status="<%= status %>" data-id="<%= banner._id %>" data-title="<%= banner.title %>" data-image="<%= banner.image %>" data-start="<%= banner.startingDate.toISOString() %>" data-end="<%= banner.endingDate.toISOString() %>" data-link="<%= banner.link %>">
                                <td>
                                    <label class="custom-checkbox">
                                        <input type="checkbox" class="banner-checkbox" data-id="<%= banner._id %>">
                                        <span class="checkmark"></span>
                                    </label>
                                </td>
                                <td>
                                    <img src="<%= banner.image ? banner.image : 'https://via.placeholder.com/80x40' %>" alt="<%= banner.title %>" class="banner-image" data-bs-toggle="modal" data-bs-target="#previewModal" data-id="<%= banner._id %>">
                                </td>
                                <td>
                                    <%= banner.title %>
                                    <% if (status === 'active' && daysLeft > 0) { %>
                                        <div class="days-left <%= daysLeftClass %>">
                                            <i class="bi bi-clock"></i> <%= daysLeft %> days left
                                        </div>
                                    <% } else if (status === 'upcoming') { %>
                                        <div class="days-left">
                                            <i class="bi bi-calendar-event"></i> Starts in <%= daysUntilStart %> days
                                        </div>
                                    <% } %>
                                </td>
                                <td><%= banner.startingDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) %></td>
                                <td><%= banner.endingDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) %></td>
                                <td>
                                    <% if(status === 'upcoming') { %>
                                        <span class="status-badge status-upcoming"><i class="bi bi-clock me-1"></i>Upcoming</span>
                                    <% } else if(status === 'expired') { %>
                                        <span class="status-badge status-expired"><i class="bi bi-x-circle me-1"></i>Expired</span>
                                    <% } else { %>
                                        <span class="status-badge status-active"><i class="bi bi-check-circle me-1"></i>Active</span>
                                    <% } %>
                                </td>
                                <td class="action-buttons">
                                    <a class="preview" href="#" data-bs-toggle="modal" data-bs-target="#previewModal" data-id="<%= banner._id %>" title="Preview Banner">
                                        <i class="bi bi-eye"></i>
                                    </a>
                                    <a class="edit" href="/admin/editBaner?id=<%= banner._id %>" title="Edit Banner">
                                        <i class="bi bi-pencil"></i>
                                    </a>
                                    <a class="delete" href="#" data-bs-toggle="modal" data-bs-target="#deleteModal" data-id="<%= banner._id %>" data-title="<%= banner.title %>" title="Delete Banner">
                                        <i class="bi bi-trash"></i>
                                    </a>
                                </td>
                            </tr>
                        <% }) %>
                    <% } else { %>
                        <tr>
                            <td colspan="7" class="text-center py-4">
                                <div class="empty-state">
                                    <i class="bi bi-image"></i>
                                    <p>No banners found</p>
                                    <a href="/admin/addBanner" class="btn btn-primary">
                                        <i class="bi bi-plus-lg me-2"></i> Create Your First Banner
                                    </a>
                                </div>
                            </td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
            
            <% if(data && data.length > 0) { %>
                <div class="pagination-container">
                    <div class="pagination-info">
                        Showing <span id="startItem">1</span> to <span id="endItem"><%= Math.min(10, data.length) %></span> of <span id="totalItems"><%= data.length %></span> banners
                    </div>
                    
                    <nav aria-label="Banner pagination">
                        <ul class="pagination">
                            <li class="page-item disabled">
                                <a class="page-link" href="#" aria-label="Previous">
                                    <i class="bi bi-chevron-left"></i>
                                </a>
                            </li>
                            <li class="page-item active"><a class="page-link" href="#">1</a></li>
                            <% if(data.length > 10) { %>
                                <li class="page-item"><a class="page-link" href="#">2</a></li>
                            <% } %>
                            <% if(data.length > 20) { %>
                                <li class="page-item"><a class="page-link" href="#">3</a></li>
                            <% } %>
                            <% if(data.length > 30) { %>
                                <li class="page-item"><a class="page-link" href="#">...</a></li>
                                <li class="page-item"><a class="page-link" href="#"><%= Math.ceil(data.length / 10) %></a></li>
                            <% } %>
                            <li class="page-item <%= data.length <= 10 ? 'disabled' : '' %>">
                                <a class="page-link" href="#" aria-label="Next">
                                    <i class="bi bi-chevron-right"></i>
                                </a>
                            </li>
                        </ul>
                    </nav>
                </div>
            <% } %>
        </div>
        
        <a href="/admin/addBanner" class="add-banner-btn">
            <i class="bi bi-plus-lg"></i> ADD NEW BANNER
        </a>
    </div>

    <!-- Banner Preview Modal -->
    <div class="modal fade banner-preview-modal" id="previewModal" tabindex="-1" aria-labelledby="previewModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="previewModalLabel">
                        <i class="bi bi-eye me-2"></i>
                        Banner Preview
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <img src="/placeholder.svg" alt="Banner Preview" class="banner-preview-image" id="previewImage">
                    <div class="banner-preview-info">
                        <div class="banner-preview-title" id="previewTitle"></div>
                        <div class="banner-preview-dates">
                            <div class="banner-preview-date">
                                <div class="banner-preview-date-label">Start Date</div>
                                <div class="banner-preview-date-value" id="previewStartDate"></div>
                            </div>
                            <div class="banner-preview-date">
                                <div class="banner-preview-date-label">End Date</div>
                                <div class="banner-preview-date-value" id="previewEndDate"></div>
                            </div>
                        </div>
                        <div class="banner-preview-status">
                            <span class="status-badge" id="previewStatus"></span>
                        </div>
                        <div class="banner-preview-link" id="previewLinkContainer">
                            <a href="#" target="_blank" id="previewLink">
                                <i class="bi bi-link-45deg"></i>
                                <span id="previewLinkText"></span>
                            </a>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <a href="#" class="btn btn-outline-secondary" id="previewEditBtn">
                        <i class="bi bi-pencil me-1"></i>
                        Edit Banner
                    </a>
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">
                        <i class="bi bi-x me-1"></i>
                        Close
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade delete-modal" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        Delete Banner
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="delete-warning">
                        <div class="delete-warning-icon">
                            <i class="bi bi-exclamation-triangle-fill"></i>
                        </div>
                        <div class="delete-warning-text">
                            <h5>Are you sure you want to delete this banner?</h5>
                            <p>This action cannot be undone. The banner will be permanently removed from the system.</p>
                        </div>
                    </div>
                    
                    <div class="delete-banner-info">
                        <div class="delete-banner-title" id="deleteBannerTitle"></div>
                        <img src="/placeholder.svg" alt="Banner to delete" class="delete-banner-image" id="deleteBannerImage">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle me-1"></i>
                        Cancel
                    </button>
                    <a href="#" class="btn btn-danger" id="confirmDeleteBtn">
                        <i class="bi bi-trash me-1"></i>
                        Yes, Delete Banner
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Bulk Delete Confirmation Modal -->
    <div class="modal fade delete-modal" id="bulkDeleteModal" tabindex="-1" aria-labelledby="bulkDeleteModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="bulkDeleteModalLabel">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        Delete Multiple Banners
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="delete-warning">
                        <div class="delete-warning-icon">
                            <i class="bi bi-exclamation-triangle-fill"></i>
                        </div>
                        <div class="delete-warning-text">
                            <h5>Are you sure you want to delete <span id="bulkDeleteCount">0</span> banners?</h5>
                            <p>This action cannot be undone. All selected banners will be permanently removed from the system.</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle me-1"></i>
                        Cancel
                    </button>
                    <button type="button" class="btn btn-danger" id="confirmBulkDeleteBtn">
                        <i class="bi bi-trash me-1"></i>
                        Yes, Delete Banners
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize date range picker
            const dateFilter = flatpickr("#dateFilter", {
                mode: "range",
                dateFormat: "Y-m-d",
                placeholder: "Filter by date range",
                onChange: function(selectedDates, dateStr, instance) {
                    if (selectedDates.length === 2) {
                        filterByDateRange(selectedDates[0], selectedDates[1]);
                    }
                }
            });
            
            // Filter by date range
            function filterByDateRange(startDate, endDate) {
                const rows = document.querySelectorAll('tbody tr');
                
                rows.forEach(row => {
                    if (row.hasAttribute('data-start') && row.hasAttribute('data-end')) {
                        const bannerStart = new Date(row.getAttribute('data-start'));
                        const bannerEnd = new Date(row.getAttribute('data-end'));
                        
                        // Show if banner period overlaps with selected date range
                        if ((bannerStart <= endDate && bannerEnd >= startDate)) {
                            row.style.display = '';
                        } else {
                            row.style.display = 'none';
                        }
                    }
                });
                
                updatePaginationInfo();
            }
            
            // Search functionality
            document.getElementById('searchBanner').addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                const rows = document.querySelectorAll('tbody tr');
                
                rows.forEach(row => {
                    if (row.hasAttribute('data-title')) {
                        const title = row.getAttribute('data-title').toLowerCase();
                        if (title.includes(searchTerm)) {
                            row.style.display = '';
                        } else {
                            row.style.display = 'none';
                        }
                    }
                });
                
                updatePaginationInfo();
            });
            
            // Filter functionality
            const filterButtons = document.querySelectorAll('[data-filter]');
            filterButtons.forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    // Update active state
                    filterButtons.forEach(btn => {
                        btn.classList.remove('active');
                    });
                    this.classList.add('active');
                    
                    const filter = this.getAttribute('data-filter');
                    const rows = document.querySelectorAll('tbody tr');
                    
                    rows.forEach(row => {
                        if (filter === 'all') {
                            row.style.display = '';
                        } else {
                            const status = row.getAttribute('data-status');
                            if (status === filter) {
                                row.style.display = '';
                            } else {
                                row.style.display = 'none';
                            }
                        }
                    });
                    
                    updatePaginationInfo();
                });
            });
            
            // Sort functionality
            document.querySelectorAll('.dropdown-item[data-sort]').forEach(item => {
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    const sortType = this.getAttribute('data-sort');
                    const rows = Array.from(document.querySelectorAll('tbody tr'));
                    
                    rows.sort((a, b) => {
                        if (sortType === 'days-desc' || sortType === 'days-asc') {
                            // Sort by days left
                            const daysLeftA = a.querySelector('.days-left') ? 
                                parseInt(a.querySelector('.days-left').textContent.match(/\d+/) || [0]) : 0;
                            const daysLeftB = b.querySelector('.days-left') ? 
                                parseInt(b.querySelector('.days-left').textContent.match(/\d+/) || [0]) : 0;
                            
                            return sortType === 'days-desc' ? daysLeftB - daysLeftA : daysLeftA - daysLeftB;
                        } else if (sortType === 'date-desc' || sortType === 'date-asc') {
                            // Sort by start date
                            const dateA = new Date(a.getAttribute('data-start'));
                            const dateB = new Date(b.getAttribute('data-start'));
                            
                            return sortType === 'date-desc' ? dateB - dateA : dateA - dateB;
                        } else if (sortType === 'title-asc' || sortType === 'title-desc') {
                            // Sort by title
                            const titleA = a.getAttribute('data-title').toLowerCase();
                            const titleB = b.getAttribute('data-title').toLowerCase();
                            
                            if (sortType === 'title-asc') {
                                return titleA.localeCompare(titleB);
                            } else {
                                return titleB.localeCompare(titleA);
                            }
                        }
                        return 0;
                    });
                    
                    const tbody = document.querySelector('tbody');
                    rows.forEach(row => tbody.appendChild(row));
                    
                    // Update dropdown button text
                    document.getElementById('sortDropdown').innerHTML = `<i class="bi bi-sort-down me-2"></i> ${this.textContent}`;
                });
            });
            
            // Update pagination info
            function updatePaginationInfo() {
                const visibleRows = document.querySelectorAll('tbody tr:not([style*="display: none"])');
                const startItem = document.getElementById('startItem');
                const endItem = document.getElementById('endItem');
                const totalItems = document.getElementById('totalItems');
                
                if (startItem && endItem && totalItems) {
                    startItem.textContent = visibleRows.length > 0 ? '1' : '0';
                    endItem.textContent = visibleRows.length;
                    totalItems.textContent = visibleRows.length;
                }
            }
            
            // Banner Preview Modal
            const previewModal = document.getElementById('previewModal');
            previewModal.addEventListener('show.bs.modal', function(event) {
                const button = event.relatedTarget;
                const bannerId = button.getAttribute('data-id');
                const row = document.querySelector(`tr[data-id="${bannerId}"]`);
                
                if (row) {
                    const title = row.getAttribute('data-title');
                    const image = row.getAttribute('data-image');
                    const startDate = new Date(row.getAttribute('data-start'));
                    const endDate = new Date(row.getAttribute('data-end'));
                    const link = row.getAttribute('data-link');
                    const status = row.getAttribute('data-status');
                    
                    document.getElementById('previewTitle').textContent = title;
                    document.getElementById('previewImage').src = image || 'https://via.placeholder.com/800x400';
                    document.getElementById('previewStartDate').textContent = startDate.toLocaleDateString('en-US', { 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric' 
                    });
                    document.getElementById('previewEndDate').textContent = endDate.toLocaleDateString('en-US', { 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric' 
                    });
                    
                    const statusBadge = document.getElementById('previewStatus');
                    statusBadge.className = 'status-badge';
                    statusBadge.classList.add(`status-${status}`);
                    
                    if (status === 'active') {
                        statusBadge.innerHTML = '<i class="bi bi-check-circle me-1"></i>Active';
                    } else if (status === 'upcoming') {
                        statusBadge.innerHTML = '<i class="bi bi-clock me-1"></i>Upcoming';
                    } else {
                        statusBadge.innerHTML = '<i class="bi bi-x-circle me-1"></i>Expired';
                    }
                    
                    const linkContainer = document.getElementById('previewLinkContainer');
                    const previewLink = document.getElementById('previewLink');
                    const previewLinkText = document.getElementById('previewLinkText');
                    
                    if (link && link !== '#') {
                        linkContainer.style.display = '';
                        previewLink.href = link;
                        previewLinkText.textContent = link;
                    } else {
                        linkContainer.style.display = 'none';
                    }
                    
                    document.getElementById('previewEditBtn').href = `/admin/editBaner?id=${bannerId}`;
                }
            });
            
            // Delete Confirmation Modal
            const deleteModal = document.getElementById('deleteModal');
            deleteModal.addEventListener('show.bs.modal', function(event) {
                const button = event.relatedTarget;
                const bannerId = button.getAttribute('data-id');
                const title = button.getAttribute('data-title');
                const row = document.querySelector(`tr[data-id="${bannerId}"]`);
                
                if (row) {
                    const image = row.getAttribute('data-image');
                    
                    document.getElementById('deleteBannerTitle').textContent = title;
                    document.getElementById('deleteBannerImage').src = image || 'https://via.placeholder.com/400x200';
                    document.getElementById('confirmDeleteBtn').href = `/admin/deleteBaner?id=${bannerId}`;
                }
            });
            
            // Checkbox selection
            const selectAllCheckbox = document.getElementById('selectAll');
            const bannerCheckboxes = document.querySelectorAll('.banner-checkbox');
            const bulkActions = document.getElementById('bulkActions');
            const selectedCount = document.getElementById('selectedCount');
            
            selectAllCheckbox.addEventListener('change', function() {
                const isChecked = this.checked;
                
                bannerCheckboxes.forEach(checkbox => {
                    checkbox.checked = isChecked;
                });
                
                updateBulkActions();
            });
            
            bannerCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    updateBulkActions();
                    
                    // Update select all checkbox
                    const allChecked = Array.from(bannerCheckboxes).every(cb => cb.checked);
                    const someChecked = Array.from(bannerCheckboxes).some(cb => cb.checked);
                    
                    selectAllCheckbox.checked = allChecked;
                    selectAllCheckbox.indeterminate = someChecked && !allChecked;
                });
            });
            
            function updateBulkActions() {
                const checkedCount = document.querySelectorAll('.banner-checkbox:checked').length;
                
                if (checkedCount > 0) {
                    bulkActions.classList.add('show');
                    selectedCount.textContent = checkedCount;
                } else {
                    bulkActions.classList.remove('show');
                }
            }
            
            // Bulk delete
            const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
            const bulkDeleteModal = document.getElementById('bulkDeleteModal');
            const bulkDeleteCount = document.getElementById('bulkDeleteCount');
            const confirmBulkDeleteBtn = document.getElementById('confirmBulkDeleteBtn');
            
            bulkDeleteBtn.addEventListener('click', function() {
                const checkedCount = document.querySelectorAll('.banner-checkbox:checked').length;
                bulkDeleteCount.textContent = checkedCount;
                
                const bulkDeleteModalInstance = new bootstrap.Modal(bulkDeleteModal);
                bulkDeleteModalInstance.show();
            });
            
            confirmBulkDeleteBtn.addEventListener('click', function() {
                const selectedBanners = Array.from(document.querySelectorAll('.banner-checkbox:checked')).map(cb => cb.getAttribute('data-id'));
                
                // In a real application, you would send this to the server
                console.log('Deleting banners with IDs:', selectedBanners);
                
                // For demo purposes, let's show a success message and remove the rows
                selectedBanners.forEach(id => {
                    const row = document.querySelector(`tr[data-id="${id}"]`);
                    if (row) {
                        row.remove();
                    }
                });
                
                // Hide the modal
                const bulkDeleteModalInstance = bootstrap.Modal.getInstance(bulkDeleteModal);
                bulkDeleteModalInstance.hide();
                
                // Hide bulk actions
                bulkActions.classList.remove('show');
                
                // Uncheck select all
                selectAllCheckbox.checked = false;
                
                // Show success toast
                showToast('success', 'Banners Deleted', `${selectedBanners.length} banners have been successfully deleted.`);
                
                // Update pagination info
                updatePaginationInfo();
            });
            
            // Bulk status change
            document.querySelectorAll('.dropdown-item[data-status]').forEach(item => {
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    const status = this.getAttribute('data-status');
                    const selectedBanners = Array.from(document.querySelectorAll('.banner-checkbox:checked')).map(cb => cb.getAttribute('data-id'));
                    
                    // In a real application, you would send this to the server
                    console.log('Changing status to', status, 'for banners with IDs:', selectedBanners);
                    
                    // For demo purposes, let's update the UI
                    selectedBanners.forEach(id => {
                        const row = document.querySelector(`tr[data-id="${id}"]`);
                        if (row) {
                            // Update status attribute
                            row.setAttribute('data-status', status);
                            
                            // Update status badge
                            const statusCell = row.querySelector('td:nth-child(6)');
                            if (statusCell) {
                                let badgeHTML = '';
                                
                                if (status === 'active') {
                                    badgeHTML = '<span class="status-badge status-active"><i class="bi bi-check-circle me-1"></i>Active</span>';
                                } else if (status === 'upcoming') {
                                    badgeHTML = '<span class="status-badge status-upcoming"><i class="bi bi-clock me-1"></i>Upcoming</span>';
                                } else {
                                    badgeHTML = '<span class="status-badge status-expired"><i class="bi bi-x-circle me-1"></i>Expired</span>';
                                }
                                
                                statusCell.innerHTML = badgeHTML;
                            }
                        }
                    });
                    
                    // Hide bulk actions
                    bulkActions.classList.remove('show');
                    
                    // Uncheck all checkboxes
                    selectAllCheckbox.checked = false;
                    bannerCheckboxes.forEach(cb => {
                        cb.checked = false;
                    });
                    
                    // Show success toast
                    showToast('success', 'Status Updated', `${selectedBanners.length} banners have been updated to "${status}" status.`);
                });
            });
            
            // Toast notification system
            function showToast(type, title, message) {
                const toastContainer = document.getElementById('toastContainer');
                
                // Create toast element
                const toast = document.createElement('div');
                toast.className = `toast ${type}`;
                toast.setAttribute('role', 'alert');
                toast.setAttribute('aria-live', 'assertive');
                toast.setAttribute('aria-atomic', 'true');
                
                // Set toast content
                toast.innerHTML = `
                    <div class="toast-header">
                        <i class="toast-icon ${type} bi ${getIconClass(type)}"></i>
                        <strong class="toast-title">${title}</strong>
                        <button type="button" class="toast-close" aria-label="Close">&times;</button>
                    </div>
                    <div class="toast-body">
                        ${message}
                    </div>
                `;
                
                // Add toast to container
                toastContainer.appendChild(toast);
                
                // Show toast
                setTimeout(() => {
                    toast.classList.add('show');
                }, 10);
                
                // Add close button event
                const closeButton = toast.querySelector('.toast-close');
                closeButton.addEventListener('click', () => {
                    toast.classList.remove('show');
                    setTimeout(() => {
                        toast.remove();
                    }, 300);
                });
                
                // Auto-dismiss after 5 seconds
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.classList.remove('show');
                        setTimeout(() => {
                            if (toast.parentNode) {
                                toast.remove();
                            }
                        }, 300);
                    }
                }, 5000);
            }
            
            // Get icon class based on toast type
            function getIconClass(type) {
                switch (type) {
                    case 'success': return 'bi-check-circle-fill';
                    case 'error': return 'bi-exclamation-circle-fill';
                    case 'warning': return 'bi-exclamation-triangle-fill';
                    case 'info': return 'bi-info-circle-fill';
                    default: return 'bi-bell-fill';
                }
            }
            
            // Check for URL parameters for success/error messages
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.has('success')) {
                showToast('success', 'Success', urlParams.get('success'));
            }
            if (url  {
                showToast('success', 'Success', urlParams.get('success'));
            }
            if (urlParams.has('error')) {
                showToast('error', 'Error', urlParams.get('error'));
            }
            
            // Pagination functionality
            const paginationLinks = document.querySelectorAll('.pagination .page-link');
            paginationLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    // In a real application, this would navigate to a different page
                    // For demo purposes, we'll just update the active state
                    document.querySelectorAll('.pagination .page-item').forEach(item => {
                        item.classList.remove('active');
                    });
                    
                    this.closest('.page-item').classList.add('active');
                });
            });
            
            // Export functionality (for a real application)
            function exportData(format) {
                // In a real application, this would trigger a download
                showToast('info', 'Export Started', `Exporting banners as ${format.toUpperCase()}. The download will start shortly.`);
            }
        });
    </script>
</body>
</html>