<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Elite Wear - Category Management</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- SweetAlert2 -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.12/dist/sweetalert2.min.css">
    <link rel="stylesheet" href="/adminStyle/category.css">
</head>
<body>
    <!-- Pagination Loading Indicator -->
    <div class="pagination-loading" id="paginationLoading"></div>
    
    <div class="admin-layout">
        <!-- Sidebar -->
        <div class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <div class="logo">
                    <i class="fas fa-shopping-bag"></i>
                    <span>ELITE WEAR</span>
                </div>
            </div>
            <ul class="sidebar-menu">
                <li>
                    <a href="/admin/">
                        <i class="fas fa-tachometer-alt"></i>
                        <span>Dashboard</span>
                    </a>
                </li>
                <li>
                    <a href="/admin/productManagement">
                        <i class="fas fa-box"></i>
                        <span>Products</span>
                    </a>
                </li>
                <li>
                    <a href="/admin/adminorder">
                        <i class="fas fa-list"></i>
                        <span>Order List</span>
                    </a>
                </li>
                <li>
                    <a href="/admin/customers">
                        <i class="fas fa-users"></i>
                        <span>Customers</span>
                    </a>
                </li>
                <li>
                    <a href="/admin/sales">
                        <i class="fas fa-chart-line"></i>
                        <span>Sales</span>
                    </a>
                </li>
                <li>
                    <a href="/admin/categories" class="active">
                        <i class="fas fa-tag"></i>
                        <span>Category</span>
                    </a>
                </li>
                <li>
                    <a href="/admin/coupons">
                        <i class="fas fa-percent"></i>
                        <span>Coupons</span>
                    </a>
                </li>
                <li>
                    <a href="/admin/getbannerPage">
                        <i class="fas fa-image"></i>
                        <span>Banner</span>
                    </a>
                </li>
                <li>
                    <a href="/admin/wallet-transactions">
                        <i class="fas fa-wallet"></i>
                        <span>Wallet</span>
                    </a>
                </li>
                <li>
                    <a href="/admin/reviews">
                        <i class="fas fa-star"></i>
                        <span>Review Management</span>
                    </a>
                </li>
            </ul>
            <div class="sidebar-footer">
                <button class="btn btn-outline-primary">Account</button>
                <a href="/admin/logout" class="btn btn-logout">Logout</a>
            </div>
        </div>

        <button id="sidebar-toggle">
            <i class="fas fa-chevron-left"></i>
        </button>
        
        <!-- Main Content -->
        <div class="main-content" id="main-content">
            <div class="page-header">
                <div>
                    <h1 class="page-title">Category Management</h1>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a href="/admin/dashboard">Dashboard</a></li>
                            <li class="breadcrumb-item active" aria-current="page">Categories</li>
                        </ol>
                    </nav>
                </div>
                <div class="user-profile">
                    <div class="user-info">
                        <p class="user-name"><%= user?.fullname || 'Admin' %></p>
                        <p class="user-role">Administrator</p>
                    </div>
                    <img src="/api/placeholder/40/40?query=profile" alt="User Profile" class="user-avatar">
                </div>
            </div>
            
            <!-- Stats Cards -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-icon categories">
                        <i class="fas fa-tags"></i>
                    </div>
                    <div class="stat-info">
                        <h3><%= cat.length %></h3>
                        <p>Total Categories</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon listed">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="stat-info">
                        <h3><%= cat.filter(c => c.isListed).length %></h3>
                        <p>Listed Categories</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon unlisted">
                        <i class="fas fa-ban"></i>
                    </div>
                    <div class="stat-info">
                        <h3><%= cat.filter(c => !c.isListed).length %></h3>
                        <p>Unlisted Categories</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon sales">
                        <i class="fas fa-chart-line"></i>
                    </div>
                    <div class="stat-info">
                        <h3><%= cat.reduce((sum, c) => sum + c.sales, 0) %></h3>
                        <p>Total Sales</p>
                    </div>
                </div>
            </div>
            
            <!-- Alert Container -->
            <div id="alertContainer" class="mb-3" style="display: none;">
                <div id="statusAlert" class="alert" role="alert"></div>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Categories</h3>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCategoryModal">
                        <i class="fas fa-plus me-2"></i> Add Category
                    </button>
                </div>
                <div class="card-body p-0">
                    <div class="d-flex justify-content-between align-items-center p-3 table-actions">
                        <div class="search-bar">
                            <i class="fas fa-search"></i>
                            <input type="text" id="categorySearch" placeholder="Search categories...">
                        </div>
                        <div class="d-flex gap-2">
                            <select class="form-select form-select-sm" id="statusFilter">
                                <option value="all">All Status</option>
                                <option value="listed">Listed</option>
                                <option value="unlisted">Unlisted</option>
                            </select>
                            <select class="form-select form-select-sm" id="sortBy">
                                <option value="name">Sort by Name</option>
                                <option value="sales">Sort by Sales</option>
                                <option value="stock">Sort by Stock</option>
                                <option value="date">Sort by Date</option>
                            </select>
                        </div>
                    </div>
                    <div class="table-responsive content-fade" id="categoryTableContainer">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>#</th>
                                    <th>Category Name</th>
                                    <th>Description</th>
                                    <th>Sales</th>
                                    <th>Stock</th>
                                    <th>Offer</th>
                                    <th>Added Date</th>
                                    <th>Status</th>
                                    <th class="text-center">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% if (cat.length === 0) { %>
                                    <tr>
                                        <td colspan="9" class="empty-state">
                                            <i class="fas fa-tags"></i>
                                            <p>No categories available</p>
                                            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCategoryModal">
                                                <i class="fas fa-plus me-2"></i> Add Your First Category
                                            </button>
                                        </td>
                                    </tr>
                                <% } else { %>
                                    <% cat.forEach((category, index) => { %>
                                        <tr class="category-row" 
                                            data-name="<%= category.name.toLowerCase() %>" 
                                            data-status="<%= category.isListed ? 'listed' : 'unlisted' %>">
                                            <td><%= index + 1 %></td>
                                            <td>
                                                <div class="fw-medium"><%= category.name %></div>
                                            </td>
                                            <td>
                                                <div class="text-truncate" style="max-width: 200px;" title="<%= category.description %>">
                                                    <%= category.description %>
                                                </div>
                                            </td>
                                            <td>
                                                <span class="badge badge-info"><%= category.sales %></span>
                                            </td>
                                            <td>
                                                <span class="badge <%= category.stock > 0 ? 'badge-success' : 'badge-danger' %>">
                                                    <%= category.stock %>
                                                </span>
                                            </td>
                                            <td>
                                                <span class="badge badge-warning"><%= category.offer %>%</span>
                                            </td>
                                            <td><%= category.addedDate.toDateString() %></td>
                                            <td>
                                                <span class="status-badge <%= category.isListed ? 'active' : 'inactive' %>">
                                                    <i class="fas <%= category.isListed ? 'fa-check-circle' : 'fa-times-circle' %>"></i>
                                                    <%= category.isListed ? 'Listed' : 'Unlisted' %>
                                                </span>
                                            </td>
                                            <td>
                                                <div class="action-buttons">
                                                    <button class="action-btn view" title="View Category">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    <a href="/admin/editCategory?id=<%= category._id %>" class="action-btn edit" title="Edit Category">
                                                        <i class="fas fa-edit"></i>
                                                    </a>
                                                    <button class="action-btn delete delete-category" 
                                                            title="Delete Category"
                                                            data-id="<%= category._id %>" 
                                                            data-name="<%= category.name %>">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                    <button class="action-btn <%= category.isListed ? 'btn-outline-danger' : 'btn-outline-success' %> toggle-category"
                                                            data-id="<%= category._id %>"
                                                            title="<%= category.isListed ? 'Unlist Category' : 'List Category' %>">
                                                        <i class="fas <%= category.isListed ? 'fa-ban' : 'fa-check' %>"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    <% }); %>
                                <% } %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            
            <!-- Enhanced Pagination -->
            <div class="custom-pagination-container">
                <div class="pagination-info">
                    <% 
                    // Define all variables before using them
                    // Handle both camelCase and lowercase variable names with fallbacks
                    const totalItems = typeof totalCategory !== 'undefined' ? totalCategory : 
                                      (typeof totalcategory !== 'undefined' ? totalcategory : 0);
                    
                    const currentPageNum = typeof currentPage !== 'undefined' ? currentPage : 
                                          (typeof currentpage !== 'undefined' ? currentpage : 1);
                    
                    // Define itemsPerPage BEFORE using it in any calculations
                    const itemsPerPage = typeof limit !== 'undefined' ? limit : 4;
                    
                    // Ensure all values are valid numbers
                    const safeCurrentPage = isNaN(Number(currentPageNum)) ? 1 : Number(currentPageNum);
                    const safeTotalItems = isNaN(Number(totalItems)) ? 0 : Number(totalItems);
                    const safeItemsPerPage = isNaN(Number(itemsPerPage)) || Number(itemsPerPage) <= 0 ? 4 : Number(itemsPerPage);
                    
                    // Calculate start and end item numbers safely
                    const startItem = safeTotalItems === 0 ? 0 : ((safeCurrentPage - 1) * safeItemsPerPage) + 1;
                    const endItem = Math.min(safeCurrentPage * safeItemsPerPage, safeTotalItems);
                    %>
                    
                    <% if (safeTotalItems > 0) { %>
                      Showing <span class="fw-bold"><%= startItem %></span> to 
                      <span class="fw-bold"><%= endItem %></span> of 
                      <span class="fw-bold"><%= safeTotalItems %></span> categories
                    <% } else { %>
                      No categories to display
                    <% } %>
                </div>
                
                <% if (safeTotalItems > 0) { %>
                    <ul class="custom-pagination">
                      <% 
                      // Handle both camelCase and lowercase for total pages
                      const totalPagesNum = typeof totalPages !== 'undefined' ? totalPages : 
                                          (typeof totalpages !== 'undefined' ? totalpages : 
                                          (Math.ceil(safeTotalItems / safeItemsPerPage) || 1));
                      
                      // Ensure total pages is a valid number
                      const safeTotalPages = isNaN(Number(totalPagesNum)) || Number(totalPagesNum) <= 0 ? 1 : Number(totalPagesNum);
                      
                      // Calculate page range with proper bounds checking
                      let startPage = Math.max(1, safeCurrentPage - 2);
                      let endPage = Math.min(safeTotalPages, startPage + 4);
                      
                      if (endPage - startPage < 4 && safeTotalPages > 4) {
                        startPage = Math.max(1, endPage - 4);
                      }
                      
                      // Determine if prev/next buttons should be enabled
                      const hasPrevPage = safeCurrentPage > 1;
                      const hasNextPage = safeCurrentPage < safeTotalPages;
                      %>
                      
                      <!-- First Page Button -->
                      <li class="pagination-item <%= !hasPrevPage ? 'disabled' : '' %>">
                        <a href="<%= hasPrevPage ? '/admin/categories?page=1' : '#' %>" 
                           class="pagination-link" 
                           <%= !hasPrevPage ? 'tabindex="-1" aria-disabled="true"' : '' %>>
                          <i class="fas fa-angle-double-left"></i>
                        </a>
                      </li>
                      
                      <!-- Previous Button -->
                      <li class="pagination-item <%= !hasPrevPage ? 'disabled' : '' %>">
                        <a href="<%= hasPrevPage ? `/admin/categories?page=${safeCurrentPage - 1}` : '#' %>" 
                           class="pagination-link" 
                           <%= !hasPrevPage ? 'tabindex="-1" aria-disabled="true"' : '' %>>
                          <i class="fas fa-angle-left"></i>
                        </a>
                      </li>
                      
                      <!-- Page Numbers -->
                      <% for (let i = startPage; i <= endPage; i++) { %>
                        <li class="pagination-item <%= i === safeCurrentPage ? 'active' : '' %>">
                          <a href="/admin/categories?page=<%= i %>" class="pagination-link">
                            <%= i %>
                          </a>
                        </li>
                      <% } %>
                      
                      <!-- Next Button -->
                      <li class="pagination-item <%= !hasNextPage ? 'disabled' : '' %>">
                        <a href="<%= hasNextPage ? `/admin/categories?page=${safeCurrentPage + 1}` : '#' %>" 
                           class="pagination-link" 
                           <%= !hasNextPage ? 'tabindex="-1" aria-disabled="true"' : '' %>>
                          <i class="fas fa-angle-right"></i>
                        </a>
                      </li>
                      
                      <!-- Last Page Button -->
                      <li class="pagination-item <%= !hasNextPage ? 'disabled' : '' %>">
                        <a href="<%= hasNextPage ? `/admin/categories?page=${safeTotalPages}` : '#' %>" 
                           class="pagination-link" 
                           <%= !hasNextPage ? 'tabindex="-1" aria-disabled="true"' : '' %>>
                          <i class="fas fa-angle-double-right"></i>
                        </a>
                      </li>
                    </ul>
                    
                    <!-- Jump to Page -->
                    <div class="pagination-jump">
                      <span>Go to:</span>
                      <form action="/admin/categories" method="GET" class="jump-form">
                        <input type="number" name="page" min="1" max="<%= safeTotalPages %>" 
                               class="jump-input" value="<%= safeCurrentPage %>">
                        <button type="submit" class="jump-btn">
                          <i class="fas fa-arrow-right"></i>
                        </button>
                      </form>
                    </div>
                <% } %>
            </div>
            
            <!-- Page Size Selector -->
            <div class="page-size-selector">
              <span>Items per page:</span>
              <select id="pageSizeSelector" class="form-select form-select-sm" onchange="changePageSize(this.value)">
                <option value="4" <%= safeItemsPerPage === 4 ? 'selected' : '' %>>4</option>
                <option value="8" <%= safeItemsPerPage === 8 ? 'selected' : '' %>>8</option>
                <option value="12" <%= safeItemsPerPage === 12 ? 'selected' : '' %>>12</option>
                <option value="20" <%= safeItemsPerPage === 20 ? 'selected' : '' %>>20</option>
              </select>
            </div>
        </div>
    </div>

    <!-- Enhanced Add Category Modal -->
    <div class="modal fade" id="addCategoryModal" tabindex="-1" aria-labelledby="addCategoryModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-light">
                    <h5 class="modal-title" id="addCategoryModalLabel">
                        <i class="fas fa-tag me-2 text-primary"></i>
                        Add New Category
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="formFeedback" class="alert alert-danger mb-3" style="display: none;"></div>
                    
                    <form id="addCategoryForm">
                        <div class="mb-3">
                            <label for="categoryName" class="form-label">
                                Category Name <span class="required">*</span>
                                <span class="tooltip-trigger" data-tooltip="No spaces or numbers allowed. Must be unique.">
                                    <i class="fas fa-info"></i>
                                </span>
                                <span class="char-count">
                                    <span id="name-char-count">0</span>/20
                                </span>
                            </label>
                            <div class="input-wrapper">
                            <input 
                                type="text" 
                                class="form-control" 
                                id="categoryName" 
                                placeholder="Enter category name" 
                                minlength="4" 
                                maxlength="20" 
                                oninput="validateCategoryName()" 
                            />
                            <div class="validation-icon">
                                <i class="fas fa-check-circle valid-icon" style="display: none; color: green;"></i>
                                <i class="fas fa-times-circle invalid-icon" style="display: none; color: red;"></i>
                                <i class="fas fa-spinner fa-spin loading-icon" style="display: none;"></i>
                            </div>
                        </div>
                        <div id="nameError" class="error-message" style="color: red; display: none;"></div>
                        
                            <div id="name-validation" class="validation-message"></div>
                            <div class="character-counter">
                                <div class="counter-bar">
                                    <div class="counter-progress" id="name-progress"></div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="categoryDescription" class="form-label">
                                Description <span class="required">*</span>
                                <span class="tooltip-trigger" data-tooltip="Minimum 20 characters required">
                                    <i class="fas fa-info"></i>
                                </span>
                                <span class="char-count">
                                    <span id="desc-char-count">0</span>/20 min
                                </span>
                            </label>
                            <textarea class="form-control" id="categoryDescription" rows="3" placeholder="Enter category description"></textarea>
                            <div id="description-validation" class="validation-message"></div>
                            <div class="character-counter">
                                <div class="counter-bar">
                                    <div class="counter-progress" id="description-progress"></div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                        <div class="col-md-6">
                        <div class="mb-3">
                          <label for="categoryStock" class="form-label">
                            Initial Stock
                            <span class="tooltip-trigger" data-tooltip="Set the initial stock quantity between 0 and 1000">
                              <i class="fas fa-info-circle"></i>
                            </span>
                          </label>
                          <input 
                            type="number" 
                            class="form-control" 
                            id="categoryStock" 
                            name="categoryStock"
                            value="0" 
                            min="0" 
                            max="1000"
                            oninput="validateStock()"
                          />
                          <div class="form-text">Set the initial stock quantity for this category.</div>
                          <div id="stockError" class="text-danger mt-1" style="display: none;"></div>
                        </div>
                      </div>
                      
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="categoryOffer" class="form-label">
                                        Initial Offer (%)
                                        <span class="tooltip-trigger" data-tooltip="Set an initial discount percentage (0-100%)">
                                            <i class="fas fa-info"></i>
                                        </span>
                                    </label>
                                    <input type="number" class="form-control" id="categoryOffer" value="0" min="0" max="100">
                                    <div id="offer-validation" class="validation-message"></div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="categoryMaxRedeemable" class="form-label">
                                Max Redeemable Amount
                                <span class="tooltip-trigger" data-tooltip="Maximum amount that can be redeemed with this category's offer">
                                    <i class="fas fa-info"></i>
                                </span>
                            </label>
                            <div class="input-group">
                                <span class="input-group-text">₹</span>
                                <input type="number" class="form-control" id="categoryMaxRedeemable" value="0" min="0">
                            </div>
                            <div id="maxRedeemable-validation" class="validation-message"></div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-1"></i> Cancel
                    </button>
                    <button type="button" class="btn btn-primary" id="submitCategory">
                        <i class="fas fa-save me-1"></i> Add Category
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmTitle">Confirm Action</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p id="confirmMessage"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="confirmButton">Confirm</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.12/dist/sweetalert2.all.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Sidebar toggle functionality
            const sidebarToggle = document.getElementById("sidebar-toggle");
            const sidebar = document.getElementById("sidebar");
            const mainContent = document.getElementById("main-content");

            if (sidebarToggle && sidebar && mainContent) {
                sidebarToggle.addEventListener("click", () => {
                    sidebar.classList.toggle("sidebar-collapsed");
                    mainContent.classList.toggle("main-content-expanded");

                    const icon = sidebarToggle.querySelector("i");
                    if (icon) {
                        icon.classList.toggle("fa-chevron-left");
                        icon.classList.toggle("fa-chevron-right");
                    }
                });
            }

            function checkScreenSize() {
                if (window.innerWidth < 992 && sidebar && mainContent) {
                    sidebar.classList.add("sidebar-collapsed");
                    mainContent.classList.add("main-content-expanded");

                    const icon = sidebarToggle.querySelector("i");
                    if (icon && icon.classList.contains("fa-chevron-left")) {
                        icon.classList.remove("fa-chevron-left");
                        icon.classList.add("fa-chevron-right");
                    }
                }
            }

            checkScreenSize();
            window.addEventListener("resize", checkScreenSize);
            
            // Form elements
            const categoryName = document.getElementById('categoryName');
            const categoryDescription = document.getElementById('categoryDescription');
            const categoryStock = document.getElementById('categoryStock');
            const categoryOffer = document.getElementById('categoryOffer');
            const categoryMaxRedeemable = document.getElementById('categoryMaxRedeemable');
            
            // Validation elements
            const nameValidation = document.getElementById('name-validation');
            const descriptionValidation = document.getElementById('description-validation');
            const offerValidation = document.getElementById('offer-validation');
            const maxRedeemableValidation = document.getElementById('maxRedeemable-validation');
            
            // Character counters
            const nameCharCount = document.getElementById('name-char-count');
            const descCharCount = document.getElementById('desc-char-count');
            const nameProgress = document.getElementById('name-progress');
            const descriptionProgress = document.getElementById('description-progress');
            
            // Constants
            const MIN_DESCRIPTION_CHARS = 20;
            const MAX_NAME_CHARS = 20;
            
            let nameTimeout;
            
            // Show alert function
            function showAlert(message, type) {
                const alertContainer = document.getElementById('alertContainer');
                const statusAlert = document.getElementById('statusAlert');
                
                statusAlert.className = `alert alert-${type}`;
                statusAlert.textContent = message;
                alertContainer.style.display = 'block';
                
                setTimeout(() => {
                    alertContainer.style.display = 'none';
                }, 5000);
            }
            
            // Name validation and character counter
            categoryName.addEventListener('input', function() {
                clearTimeout(nameTimeout);
                
                const value = this.value.trim();
                const length = value.length;
                nameCharCount.textContent = length;
                
                // Update progress bar
                const percentage = Math.min(100, (length / MAX_NAME_CHARS) * 100);
                nameProgress.style.width = `${percentage}%`;
                
                if (length > 0.8 * MAX_NAME_CHARS) {
                    nameProgress.className = 'counter-progress warning';
                } else if (length > 0) {
                    nameProgress.className = 'counter-progress success';
                } else {
                    nameProgress.className = 'counter-progress';
                }
                
                // Basic validation
                if (!value) {
                    nameValidation.textContent = "Category name is required";
                    nameValidation.className = "validation-message invalid-feedback";
                    categoryName.classList.add('is-invalid');
                    categoryName.classList.remove('is-valid', 'is-loading');
                    return;
                }
                
                if (value.includes(" ")) {
                    nameValidation.textContent = "Category name cannot contain spaces";
                    nameValidation.className = "validation-message invalid-feedback";
                    categoryName.classList.add('is-invalid');
                    categoryName.classList.remove('is-valid', 'is-loading');
                    return;
                }
                
                if (/\d/.test(value)) {
                    nameValidation.textContent = "Category name cannot contain numbers";
                    nameValidation.className = "validation-message invalid-feedback";
                    categoryName.classList.add('is-invalid');
                    categoryName.classList.remove('is-valid', 'is-loading');
                    return;
                }
                
                // Show loading state
                categoryName.classList.add('is-loading');
                categoryName.classList.remove('is-valid', 'is-invalid');
                
                // Check uniqueness after a delay
                nameTimeout = setTimeout(() => {
                    fetch(`/admin/check-category-name?name=${encodeURIComponent(value)}`)
                        .then(response => response.json())
                        .then(data => {
                            categoryName.classList.remove('is-loading');
                            
                            if (data.exists) {
                                nameValidation.textContent = "Category name already exists";
                                nameValidation.className = "validation-message invalid-feedback";
                                categoryName.classList.add('is-invalid');
                                categoryName.classList.remove('is-valid');
                            } else {
                                nameValidation.textContent = "Category name is available";
                                nameValidation.className = "validation-message valid-feedback";
                                categoryName.classList.add('is-valid');
                                categoryName.classList.remove('is-invalid');
                            }
                        })
                        .catch(error => {
                            console.error("Error checking category name:", error);
                            categoryName.classList.remove('is-loading');
                            nameValidation.textContent = "Error checking category name";
                            nameValidation.className = "validation-message invalid-feedback";
                        });
                }, 500);
            });
            
            // Description validation and character counter
            categoryDescription.addEventListener('input', function() {
                const value = this.value.trim();
                const length = value.length;
                descCharCount.textContent = length;
                
                // Update progress bar
                const percentage = Math.min(100, (length / MIN_DESCRIPTION_CHARS) * 100);
                descriptionProgress.style.width = `${percentage}%`;
                
                if (length < MIN_DESCRIPTION_CHARS) {
                    descriptionProgress.className = 'counter-progress danger';
                    descriptionValidation.textContent = `Description must be at least ${MIN_DESCRIPTION_CHARS} characters (currently ${length})`;
                    descriptionValidation.className = "validation-message invalid-feedback";
                    categoryDescription.classList.add('is-invalid');
                    categoryDescription.classList.remove('is-valid');
                } else {
                    descriptionProgress.className = 'counter-progress success';
                    descriptionValidation.textContent = "Description length is good!";
                    descriptionValidation.className = "validation-message valid-feedback";
                    categoryDescription.classList.add('is-valid');
                    categoryDescription.classList.remove('is-invalid');
                }
            });
            
            // Offer validation
            categoryOffer.addEventListener('input', function() {
                const value = Number(this.value);
                
                if (isNaN(value) || value < 0 || value > 100) {
                    offerValidation.textContent = "Offer must be between 0 and 100%";
                    offerValidation.className = "validation-message invalid-feedback";
                    categoryOffer.classList.add('is-invalid');
                    categoryOffer.classList.remove('is-valid');
                } else {
                    offerValidation.textContent = "";
                    categoryOffer.classList.remove('is-invalid');
                    if (value > 0) {
                        categoryOffer.classList.add('is-valid');
                    }
                }
            });
            
            // Max Redeemable validation
            categoryMaxRedeemable.addEventListener('input', function() {
                const value = Number(this.value);
                
                if (isNaN(value) || value < 0) {
                    maxRedeemableValidation.textContent = "Max redeemable amount cannot be negative";
                    maxRedeemableValidation.className = "validation-message invalid-feedback";
                    categoryMaxRedeemable.classList.add('is-invalid');
                    categoryMaxRedeemable.classList.remove('is-valid');
                } else if (value > 500000) {
                    maxRedeemableValidation.textContent = "Max redeemable amount cannot exceed ₹500,000";
                    maxRedeemableValidation.className = "validation-message invalid-feedback";
                    categoryMaxRedeemable.classList.add('is-invalid');
                    categoryMaxRedeemable.classList.remove('is-valid');
                } else {
                    maxRedeemableValidation.textContent = "";
                    categoryMaxRedeemable.classList.remove('is-invalid');
                    if (value > 0) {
                        categoryMaxRedeemable.classList.add('is-valid');
                    }
                }
            });
            
            // Add Category Form Submission
            document.getElementById('submitCategory').addEventListener('click', function() {
                // Reset validation
                const formFeedback = document.getElementById('formFeedback');
                formFeedback.style.display = 'none';
                
                // Validate all fields
                let isValid = true;
                let errorMessage = '';
                
                // Name validation
                const nameValue = categoryName.value.trim();
                if (!nameValue) {
                    nameValidation.textContent = "Category name is required";
                    nameValidation.className = "validation-message invalid-feedback";
                    categoryName.classList.add('is-invalid');
                    isValid = false;
                    errorMessage = 'Category name is required';
                } else if (nameValue.includes(" ")) {
                    nameValidation.textContent = "Category name cannot contain spaces";
                    nameValidation.className = "validation-message invalid-feedback";
                    categoryName.classList.add('is-invalid');
                    isValid = false;
                    errorMessage = 'Category name cannot contain spaces';
                } else if (/\d/.test(nameValue)) {
                    nameValidation.textContent = "Category name cannot contain numbers";
                    nameValidation.className = "validation-message invalid-feedback";
                    categoryName.classList.add('is-invalid');
                    isValid = false;
                    errorMessage = 'Category name cannot contain numbers';
                }
                
                // Description validation
                const descValue = categoryDescription.value.trim();
                if (!descValue) {
                    descriptionValidation.textContent = "Description is required";
                    descriptionValidation.className = "validation-message invalid-feedback";
                    categoryDescription.classList.add('is-invalid');
                    isValid = false;
                    errorMessage = errorMessage ? 'Please fix all validation errors' : 'Description is required';
                } else if (descValue.length < MIN_DESCRIPTION_CHARS) {
                    descriptionValidation.textContent = `Description must be at least ${MIN_DESCRIPTION_CHARS} characters (currently ${descValue.length})`;
                    descriptionValidation.className = "validation-message invalid-feedback";
                    categoryDescription.classList.add('is-invalid');
                    isValid = false;
                    errorMessage = errorMessage ? 'Please fix all validation errors' : `Description must be at least ${MIN_DESCRIPTION_CHARS} characters`;
                }
                
                // Offer validation
                const offerValue = Number(categoryOffer.value);
                if (isNaN(offerValue) || offerValue < 0 || offerValue > 100) {
                    offerValidation.textContent = "Offer must be between 0 and 100%";
                    offerValidation.className = "validation-message invalid-feedback";
                    categoryOffer.classList.add('is-invalid');
                    isValid = false;
                    errorMessage = errorMessage ? 'Please fix all validation errors' : 'Offer must be between 0 and 100%';
                }
                
                // Max Redeemable validation
                const maxRedeemableValue = Number(categoryMaxRedeemable.value);
                if (isNaN(maxRedeemableValue) || maxRedeemableValue < 0) {
                    maxRedeemableValidation.textContent = "Max redeemable amount cannot be negative";
                    maxRedeemableValidation.className = "validation-message invalid-feedback";
                    categoryMaxRedeemable.classList.add('is-invalid');
                    isValid = false;
                    errorMessage = errorMessage ? 'Please fix all validation errors' : 'Max redeemable amount cannot be negative';
                } else if (maxRedeemableValue > 500000) {
                    maxRedeemableValidation.textContent = "Max redeemable amount cannot exceed ₹500,000";
                    maxRedeemableValidation.className = "validation-message invalid-feedback";
                    categoryMaxRedeemable.classList.add('is-invalid');
                    isValid = false;
                    errorMessage = errorMessage ? 'Please fix all validation errors' : 'Max redeemable amount cannot exceed ₹500,000';
                }
                
                if (!isValid) {
                    formFeedback.textContent = errorMessage;
                    formFeedback.style.display = 'block';
                    return;
                }

                // Show loading state
                const submitBtn = this;
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i> Adding...';
                
                // Submit the form
                fetch('/admin/addcategory', {
                    method: "POST",
                    headers: { 
                        "Content-Type": "application/json" 
                    },
                    body: JSON.stringify({
                        name: nameValue,
                        description: descValue,
                        stock: parseInt(categoryStock.value) || 0,
                        offer: parseInt(offerValue) || 0,
                        maxRedeemable: parseInt(maxRedeemableValue) || 0
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(data => {
                            throw new Error(data.message || 'Failed to add category');
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // Close modal
                        const modal = bootstrap.Modal.getInstance(document.getElementById('addCategoryModal'));
                        modal.hide();
                        
                        // Show success message with SweetAlert2
                        Swal.fire({
                            title: 'Success!',
                            text: data.message,
                            icon: 'success',
                            confirmButtonColor: '#4f46e5'
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        formFeedback.textContent = data.message;
                        formFeedback.style.display = 'block';
                        
                        // Reset button state
                        submitBtn.disabled = false;
                        submitBtn.innerHTML = '<i class="fas fa-save me-1"></i> Add Category';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    formFeedback.textContent = error.message || "Server issue!";
                    formFeedback.style.display = 'block';
                    
                    // Reset button state
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<i class="fas fa-save me-1"></i> Add Category';
                });
            });
            
            // Confirmation Modal Setup
            const confirmationModal = new bootstrap.Modal(document.getElementById('confirmationModal'));
            let pendingAction = null;
            
            document.getElementById('confirmButton').addEventListener('click', function() {
                if (!pendingAction) return;
                
                // Hide modal
                confirmationModal.hide();
                
                // Execute the pending action
                if (pendingAction.type === 'toggle') {
                    toggleCategory(pendingAction.id);
                } else if (pendingAction.type === 'delete') {
                    deleteCategory(pendingAction.id);
                }
                
                // Clear pending action
                pendingAction = null;
            });
            
            // Toggle Category Status
            document.querySelectorAll('.toggle-category').forEach(button => {
                button.addEventListener('click', function() {
                    const categoryId = this.getAttribute('data-id');
                    const isListed = this.classList.contains('btn-outline-danger'); // If danger, it's currently listed
                    const action = isListed ? "Unlist" : "List";
                    
                    // Set confirmation modal content
                    document.getElementById('confirmTitle').textContent = `${action} Category`;
                    document.getElementById('confirmMessage').textContent = `Are you sure you want to ${action.toLowerCase()} this category? ${isListed ? 'Products in this category will not be visible to customers.' : 'Products in this category will become visible to customers.'}`;
                    
                    // Set button style based on action
                    const confirmBtn = document.getElementById('confirmButton');
                    confirmBtn.className = `btn ${isListed ? 'btn-danger' : 'btn-success'}`;
                    confirmBtn.textContent = action;
                    
                    // Set pending action
                    pendingAction = {
                        type: 'toggle',
                        id: categoryId
                    };
                    
                    // Show confirmation modal
                    confirmationModal.show();
                });
            });
            
            // Toggle Category Function
            function toggleCategory(categoryId) {
                // Show loading overlay
                Swal.fire({
                    title: 'Processing...',
                    text: 'Please wait while we update the category status.',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                
                fetch('/admin/toggle-category', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ id: categoryId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: 'Success!',
                            text: data.message,
                            icon: 'success',
                            confirmButtonColor: '#4f46e5'
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: data.message,
                            icon: 'error',
                            confirmButtonColor: '#4f46e5'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: "Server issue! Please try again.",
                        icon: 'error',
                        confirmButtonColor: '#4f46e5'
                    });
                });
            }
            
            // Delete Category
            document.querySelectorAll('.delete-category').forEach(icon => {
                icon.addEventListener('click', function() {
                    const categoryId = this.getAttribute('data-id');
                    const categoryName = this.getAttribute('data-name');
                    
                    // Use SweetAlert2 for delete confirmation
                    Swal.fire({
                        title: 'Delete Category?',
                        html: `Are you sure you want to delete the category <strong>${categoryName}</strong>?<br><br>This action cannot be undone and may affect products in this category.`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#ef4444',
                        cancelButtonColor: '#64748b',
                        confirmButtonText: 'Yes, delete it!',
                        cancelButtonText: 'Cancel',
                        reverseButtons: true
                    }).then((result) => {
                        if (result.isConfirmed) {
                            deleteCategory(categoryId);
                        }
                    });
                });
            });
            
            // Delete Category Function
            function deleteCategory(categoryId) {
                // Show loading overlay
                Swal.fire({
                    title: 'Deleting...',
                    text: 'Please wait while we delete the category.',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                
                fetch('/admin/delete-category', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ id: categoryId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: 'Deleted!',
                            text: data.message,
                            icon: 'success',
                            confirmButtonColor: '#4f46e5'
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: data.message,
                            icon: 'error',
                            confirmButtonColor: '#4f46e5'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: "Server issue! Please try again.",
                        icon: 'error',
                        confirmButtonColor: '#4f46e5'
                    });
                });
            }
            
            // Search functionality
            const searchInput = document.getElementById('categorySearch');
            searchInput.addEventListener('input', filterCategories);
            
            // Status filter
            const statusFilter = document.getElementById('statusFilter');
            statusFilter.addEventListener('change', filterCategories);
            
            // Sort functionality
            const sortBy = document.getElementById('sortBy');
            sortBy.addEventListener('change', sortCategories);
            
            function filterCategories() {
                const searchTerm = searchInput.value.toLowerCase();
                const statusValue = statusFilter.value;
                
                document.querySelectorAll('.category-row').forEach(row => {
                    const name = row.getAttribute('data-name');
                    const status = row.getAttribute('data-status');
                    
                    const nameMatch = name.includes(searchTerm);
                    const statusMatch = statusValue === 'all' || status === statusValue;
                    
                    if (nameMatch && statusMatch) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            }
            
            function sortCategories() {
                const sortValue = sortBy.value;
                const tbody = document.querySelector('table tbody');
                const rows = Array.from(tbody.querySelectorAll('.category-row'));
                
                rows.sort((a, b) => {
                    let aValue, bValue;
                    
                    switch(sortValue) {
                        case 'name':
                            aValue = a.querySelector('td:nth-child(2)').textContent.trim().toLowerCase();
                            bValue = b.querySelector('td:nth-child(2)').textContent.trim().toLowerCase();
                            return aValue.localeCompare(bValue);
                        
                        case 'sales':
                            aValue = parseInt(a.querySelector('td:nth-child(4)').textContent.trim());
                            bValue = parseInt(b.querySelector('td:nth-child(4)').textContent.trim());
                            return bValue - aValue; // Descending order for sales
                        
                        case 'stock':
                            aValue = parseInt(a.querySelector('td:nth-child(5)').textContent.trim());
                            bValue = parseInt(b.querySelector('td:nth-child(5)').textContent.trim());
                            return bValue - aValue; // Descending order for stock
                        
                        case 'date':
                            aValue = new Date(a.querySelector('td:nth-child(7)').textContent.trim());
                            bValue = new Date(b.querySelector('td:nth-child(7)').textContent.trim());
                            return bValue - aValue; // Newest first
                    }
                });
                
                // Re-append rows in the new order
                rows.forEach(row => tbody.appendChild(row));
            }
                function validateStock() {
  const stockInput = document.getElementById('categoryStock');
  const stockError = document.getElementById('stockError');
  const stockValue = parseInt(stockInput.value, 10);

  if (isNaN(stockValue) || stockValue < 0 || stockValue > 1000) {
    stockError.style.display = 'block';
    stockError.innerHTML = `<i class="fas fa-exclamation-circle"></i> Stock must be between 0 and 1000`;
    stockInput.classList.add('input-invalid');
    return false;
  } else {
    stockError.style.display = 'none';
    stockInput.classList.remove('input-invalid');
    return true;
  }
}

            
            // Reset form when modal is closed
            document.getElementById('addCategoryModal').addEventListener('hidden.bs.modal', function () {
                document.getElementById('addCategoryForm').reset();
                document.getElementById('formFeedback').style.display = 'none';
                
                // Reset validation states
                categoryName.classList.remove('is-invalid', 'is-valid', 'is-loading');
                categoryDescription.classList.remove('is-invalid', 'is-valid');
                categoryOffer.classList.remove('is-invalid', 'is-valid');
                categoryMaxRedeemable.classList.remove('is-invalid', 'is-valid');
                
                // Reset validation messages
                nameValidation.textContent = '';
                descriptionValidation.textContent = '';
                offerValidation.textContent = '';
                maxRedeemableValidation.textContent = '';
                
                // Reset character counters
                nameCharCount.textContent = '0';
                descCharCount.textContent = '0';
                nameProgress.style.width = '0%';
                descriptionProgress.style.width = '0%';
                nameProgress.className = 'counter-progress';
                descriptionProgress.className = 'counter-progress';
                
                // Reset button
                document.getElementById('submitCategory').disabled = false;
                document.getElementById('submitCategory').innerHTML = '<i class="fas fa-save me-1"></i> Add Category';
            });
            
            // Pagination loading animation
            function showPaginationLoading() {
                const loadingIndicator = document.getElementById('paginationLoading');
                loadingIndicator.classList.add('active');
                
                // Add loading class to content
                document.getElementById('categoryTableContainer').classList.add('loading');
                
                // Remove loading after animation completes
                setTimeout(() => {
                    loadingIndicator.classList.remove('active');
                    document.getElementById('categoryTableContainer').classList.remove('loading');
                }, 500);
            }
            
            // Add loading animation when clicking pagination links
            document.addEventListener('click', function(e) {
                const paginationLink = e.target.closest('.pagination-link');
                if (paginationLink && !paginationLink.parentElement.classList.contains('disabled')) {
                    showPaginationLoading();
                }
            });
            
            // Change page size
            window.changePageSize = function(size) {
                const currentUrl = new URL(window.location.href);
                currentUrl.searchParams.set('limit', size);
                currentUrl.searchParams.set('page', '1'); // Reset to first page
                
                showPaginationLoading();
                window.location.href = currentUrl.toString();
            };
            
            // Add keyboard navigation for pagination
            document.addEventListener('keydown', function(e) {
                // Only if not in an input field
                if (document.activeElement.tagName !== 'INPUT' && document.activeElement.tagName !== 'TEXTAREA') {
                    if (e.key === 'ArrowLeft') {
                        // Previous page
                        const prevLink = document.querySelector('.pagination-item:nth-child(2):not(.disabled) .pagination-link');
                        if (prevLink) {
                            showPaginationLoading();
                            window.location.href = prevLink.getAttribute('href');
                        }
                    } else if (e.key === 'ArrowRight') {
                        // Next page
                        const nextLink = document.querySelector('.pagination-item:nth-last-child(2):not(.disabled) .pagination-link');
                        if (nextLink) {
                            showPaginationLoading();
                            window.location.href = nextLink.getAttribute('href');
                        }
                    }
                }
            });
        });
        function validateCategoryName() {
    const input = document.getElementById('categoryName');
    const value = input.value.trim();
    const error = document.getElementById('nameError');
    const validIcon = document.querySelector('.valid-icon');
    const invalidIcon = document.querySelector('.invalid-icon');
    const loadingIcon = document.querySelector('.loading-icon');

    // Start spinner while typing
    loadingIcon.style.display = 'inline-block';
    validIcon.style.display = 'none';
    invalidIcon.style.display = 'none';
    error.style.display = 'none';

    setTimeout(() => {
        loadingIcon.style.display = 'none';

        if (value.length < 4 || value.length > 20) {
            input.classList.add('input-invalid');
            validIcon.style.display = 'none';
            invalidIcon.style.display = 'inline-block';
            error.style.display = 'block';
            error.innerHTML = `<i class="fas fa-exclamation-circle"></i> Name must be between 4 and 20 characters`;
        } else {
            input.classList.remove('input-invalid');
            validIcon.style.display = 'inline-block';
            invalidIcon.style.display = 'none';
            error.style.display = 'none';
        }
    }, 500); // Simulated delay for real-time feel
}
function validateStock() {
  const stockInput = document.getElementById('categoryStock');
  const stockError = document.getElementById('stockError');
  const stockValue = parseInt(stockInput.value.trim(), 10);

  if (isNaN(stockValue) || stockValue < 0 || stockValue > 1000) {
    stockInput.classList.add('is-invalid');
    stockError.style.display = 'block';
    stockError.innerHTML = `<i class="fas fa-exclamation-circle"></i> Stock must be between 0 and 1000.`;
    return false;
  } else {
    stockInput.classList.remove('is-invalid');
    stockError.style.display = 'none';
    return true;
  }
}

    </script>
</body>
</html>