<!DOCTYPE html>
<html lang="en">
<head>
<<<<<<< Updated upstream
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pure Threads - Order Details</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/adminStyle/adminOrderdetails.css">
    <style>
        /* Custom Modal Styles */
        .custom-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
=======
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Elite Wear - Order Details</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.min.css">
    <style>
        :root {
            --primary-color: #6366F1;
            --primary-light: #818CF8;
            --primary-dark: #4F46E5;
            --secondary-color: #F9FAFB;
            --success-color: #10B981;
            --warning-color: #F59E0B;
            --danger-color: #EF4444;
            --info-color: #3B82F6;
            --light-color: #F9FAFB;
            --dark-color: #1F2937;
            --gray-50: #F9FAFB;
            --gray-100: #F3F4F6;
            --gray-200: #E5E7EB;
            --gray-300: #D1D5DB;
            --gray-400: #9CA3AF;
            --gray-500: #6B7280;
            --gray-600: #4B5563;
            --gray-700: #374151;
            --gray-800: #1F2937;
            --gray-900: #111827;
            --border-radius-sm: 0.25rem;
            --border-radius: 0.5rem;
            --border-radius-lg: 0.75rem;
            --border-radius-xl: 1rem;
            --border-radius-2xl: 1.5rem;
            --border-radius-full: 9999px;
            --box-shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --box-shadow-md: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --box-shadow-lg: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            --box-shadow-xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
            --transition-all: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--gray-50);
            color: var(--gray-800);
            line-height: 1.6;
            overflow-x: hidden;
        }

        /* Main Layout */
        .container-fluid {
            padding: 0;
        }

        .main-content {
            padding: 1.5rem;
            min-height: 100vh;
        }

        @media (min-width: 992px) {
            .main-content {
                padding: 2rem 2.5rem;
            }
        }

        /* Page Header */
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .page-header-content {
            display: flex;
            flex-direction: column;
        }

        .page-header h4 {
            font-weight: 700;
            color: var(--gray-900);
            margin: 0;
            font-size: 1.5rem;
            line-height: 1.2;
        }

        .breadcrumb {
            margin: 0.5rem 0 0;
            padding: 0;
            background: transparent;
            font-size: 0.875rem;
        }

        .breadcrumb-item a {
            color: var(--primary-color);
            text-decoration: none;
            transition: var(--transition-all);
        }

        .breadcrumb-item a:hover {
            color: var(--primary-dark);
        }

        .breadcrumb-item.active {
            color: var(--gray-500);
        }

        .page-header-actions {
            display: flex;
            gap: 0.75rem;
        }

        /* Cards */
        .card {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            margin-bottom: 1.5rem;
            overflow: hidden;
            transition: var(--transition-all);
            background-color: white;
        }

        .card:hover {
            box-shadow: var(--box-shadow-md);
        }

        .card-header {
            background-color: white;
            border-bottom: 1px solid var(--gray-200);
            padding: 1.25rem 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .card-header h5 {
            margin: 0;
            font-weight: 600;
            color: var(--gray-900);
            font-size: 1.125rem;
            line-height: 1.2;
        }

        .card-body {
            padding: 1.5rem;
        }

        .card-footer {
            background-color: white;
            border-top: 1px solid var(--gray-200);
            padding: 1.25rem 1.5rem;
        }

        /* Status Badges */
        .status-badge {
            padding: 0.375rem 0.75rem;
            border-radius: var(--border-radius-full);
            font-size: 0.75rem;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            gap: 0.375rem;
            text-transform: uppercase;
            letter-spacing: 0.025em;
        }

        .status-pending {
            background-color: #FEF3C7;
            color: #D97706;
        }

        .status-processing {
            background-color: #DBEAFE;
            color: #2563EB;
        }

        .status-confirmed {
            background-color: #D1FAE5;
            color: #059669;
        }

        .status-shipped {
            background-color: #E0E7FF;
            color: #4F46E5;
        }

        .status-delivered {
            background-color: #D1FAE5;
            color: #059669;
        }

        .status-cancelled {
            background-color: #FEE2E2;
            color: #DC2626;
        }

        .status-return-requested {
            background-color: #FEF3C7;
            color: #D97706;
        }

        .status-return-approved {
            background-color: #BFDBFE;
            color: #3B82F6;
        }

        .status-returned {
            background-color: #EDE9FE;
            color: #7C3AED;
        }

        .status-return-rejected {
            background-color: #FCE7F3;
            color: #DB2777;
        }

        .status-partially-cancelled,
        .status-partially-returned,
        .status-partially-delivered,
        .status-partially-shipped {
            background-color: #F3F4F6;
            color: #4B5563;
        }

        /* Final State Styling */
        .final-state {
            background-color: var(--gray-50);
>>>>>>> Stashed changes
        }
        
        .custom-modal.show {
            opacity: 1;
            visibility: visible;
        }
        
        .custom-modal .modal-content {
            background-color: #fff;
            border-radius: 8px;
            width: 90%;
            max-width: 400px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            position: relative;
            padding: 1.5rem;
            transform: translateY(-20px);
            transition: transform 0.3s ease;
            text-align: center;
        }
        
        .custom-modal.show .modal-content {
            transform: translateY(0);
        }
        
        .modal-close {
            position: absolute;
<<<<<<< Updated upstream
            right: 15px;
            top: 15px;
            font-size: 24px;
            color: #888;
            cursor: pointer;
            background: none;
            border: none;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 30px;
            height: 30px;
            transition: color 0.2s ease;
        }
        
        .modal-close:hover {
            color: #333;
        }
        
        .modal-title {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
            color: #333;
        }
        
        .modal-message {
            margin-bottom: 1.5rem;
            font-size: 1.1rem;
            color: #555;
        }
        
        .modal-buttons {
            display: flex;
            justify-content: center;
            gap: 1rem;
        }
        
        .btn-modal-cancel {
            background-color: #f8f9fa;
            color: #333;
            border: 1px solid #ddd;
            padding: 0.5rem 1.25rem;
            border-radius: 4px;
            font-weight: 500;
            transition: all 0.2s;
        }
        
        .btn-modal-cancel:hover {
            background-color: #e9ecef;
        }
        
        .btn-modal-confirm {
            background-color: #212529;
            color: white;
            border: none;
            padding: 0.5rem 1.25rem;
            border-radius: 4px;
            font-weight: 500;
            transition: all 0.2s;
        }
        
        .btn-modal-confirm:hover {
            background-color: #000;
        }
        
        /* Badge status colors */
        .badge-pending {
            background-color: #ffc107;
            color: #212529;
        }
        
        .badge-processing {
            background-color: #17a2b8;
            color: #fff;
        }
        
        .badge-confirmed {
            background-color: #28a745;
            color: #fff;
        }
        
        .badge-shipped {
            background-color: #007bff;
            color: #fff;
        }
        
        .badge-delivered {
            background-color: #20c997;
            color: #fff;
        }
        
        .badge-cancelled {
            background-color: #dc3545;
            color: #fff;
        }
        
        .badge-return-requested {
            background-color: #6c757d;
            color: #fff;
        }
        
        /* Order status tracker styles */
        .order-status-tracker {
            position: relative;
            padding: 20px 0;
        }
        
        .status-line {
            position: absolute;
            left: 15px;
            top: 40px;
            bottom: 40px;
            width: 2px;
            background-color: #e9ecef;
            z-index: 1;
        }
        
        .status-step {
            display: flex;
            margin-bottom: 1.5rem;
            position: relative;
            z-index: 2;
        }
        
        .status-icon {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            background-color: #f8f9fa;
            border: 2px solid #e9ecef;
            color: #adb5bd;
        }
        
        .status-icon.completed {
            background-color: #28a745;
            border-color: #28a745;
            color: white;
        }
        
        .status-icon.current {
            background-color: #007bff;
            border-color: #007bff;
            color: white;
        }
        
        .status-content {
            flex: 1;
        }
        
        .status-title {
            margin-bottom: 0.25rem;
            font-weight: 500;
        }
        
        .status-date {
            color: #6c757d;
            font-size: 0.875rem;
            margin-bottom: 0;
        }
        
        /* Order info styles */
        .order-info-item {
            display: flex;
            margin-bottom: 0.75rem;
        }
        
        .order-info-label {
            width: 40%;
            color: #6c757d;
            font-weight: 500;
        }
        
        .order-info-value {
            width: 60%;
            font-weight: 400;
        }
        
        /* Table styles */
        .order-list-table img {
            border-radius: 4px;
            object-fit: cover;
        }
        
        /* Button styles */
        .btn-go-back {
            border-radius: 4px;
            padding: 0.5rem 1.25rem;
        }
        
        .btn-cancel {
            border-radius: 4px;
            padding: 0.5rem 1.25rem;
        }
        
        /* Status select */
        .status-select {
            height: 32px;
            padding: 0 0.5rem;
=======
            top: -0.5rem;
            right: -0.5rem;
            font-size: 0.625rem;
            background-color: var(--gray-600);
            color: white;
            padding: 0.125rem 0.25rem;
            border-radius: var(--border-radius-sm);
            font-weight: 600;
        }

        /* Product Image */
        .product-image {
            width: 3rem;
            height: 3rem;
            border-radius: var(--border-radius);
            object-fit: cover;
            border: 1px solid var(--gray-200);
            background-color: white;
        }

        /* Tables */
        .table {
            margin-bottom: 0;
        }

        .table th {
            font-weight: 600;
            color: var(--gray-700);
            border-top: none;
            border-bottom: 1px solid var(--gray-200);
            padding: 0.75rem 1rem;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.025em;
        }

        .table td {
            padding: 1rem;
            vertical-align: middle;
            border-top: none;
            border-bottom: 1px solid var(--gray-200);
            color: var(--gray-700);
            font-size: 0.875rem;
        }

        .table tr:last-child td {
            border-bottom: none;
        }

        .table tr:hover {
            background-color: var(--gray-50);
        }

        .table-hover tbody tr {
            transition: var(--transition-all);
        }

        .table-hover tbody tr:hover {
            background-color: var(--gray-50);
        }

        /* Highlight animation for table rows */
        @keyframes highlight-row {
            0% { background-color: var(--primary-light); }
            100% { background-color: transparent; }
        }

        .highlight {
            animation: highlight-row 2s ease-out;
        }

        /* Buttons */
        .btn {
            border-radius: var(--border-radius);
            font-weight: 500;
            padding: 0.5rem 1rem;
            transition: var(--transition-all);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            font-size: 0.875rem;
        }

        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            color: white;
        }

        .btn-primary:hover, .btn-primary:focus {
            background-color: var(--primary-dark);
            border-color: var(--primary-dark);
            color: white;
        }

        .btn-outline-primary {
            color: var(--primary-color);
            border-color: var(--primary-color);
            background-color: transparent;
        }

        .btn-outline-primary:hover, .btn-outline-primary:focus {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-success {
            background-color: var(--success-color);
            border-color: var(--success-color);
            color: white;
        }

        .btn-success:hover, .btn-success:focus {
            background-color: #059669;
            border-color: #059669;
            color: white;
        }

        .btn-danger {
            background-color: var(--danger-color);
            border-color: var(--danger-color);
            color: white;
        }

        .btn-danger:hover, .btn-danger:focus {
            background-color: #DC2626;
            border-color: #DC2626;
            color: white;
        }

        .btn-secondary {
            background-color: var(--gray-500);
            border-color: var(--gray-500);
            color: white;
        }

        .btn-secondary:hover, .btn-secondary:focus {
            background-color: var(--gray-600);
            border-color: var(--gray-600);
            color: white;
        }

        .btn-outline-secondary {
            color: var(--gray-700);
            border-color: var(--gray-300);
            background-color: white;
        }

        .btn-outline-secondary:hover, .btn-outline-secondary:focus {
            background-color: var(--gray-100);
            color: var(--gray-900);
            border-color: var(--gray-400);
        }

        .btn-sm {
            padding: 0.375rem 0.75rem;
            font-size: 0.75rem;
        }

        .btn-lg {
            padding: 0.75rem 1.5rem;
            font-size: 1rem;
        }

        .btn-icon {
            width: 2.5rem;
            height: 2.5rem;
            padding: 0;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: var(--border-radius-full);
        }

        .btn-icon.btn-sm {
            width: 2rem;
            height: 2rem;
        }

        .btn-icon.btn-lg {
            width: 3rem;
            height: 3rem;
        }

        /* Dropdown */
        .dropdown-menu {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow-lg);
            padding: 0.5rem 0;
            min-width: 12rem;
        }

        .dropdown-item {
            padding: 0.5rem 1rem;
            color: var(--gray-700);
            transition: var(--transition-all);
            font-size: 0.875rem;
        }

        .dropdown-item:hover, .dropdown-item:focus {
            background-color: var(--gray-100);
            color: var(--primary-color);
        }

        .dropdown-item i, .dropdown-item svg {
            width: 1rem;
            margin-right: 0.5rem;
            color: var(--gray-500);
        }

        .dropdown-item:hover i, .dropdown-item:hover svg,
        .dropdown-item:focus i, .dropdown-item:focus svg {
            color: var(--primary-color);
        }

        .dropdown-item:disabled {
            color: var(--gray-400);
            background-color: transparent;
            cursor: not-allowed;
        }

        .dropdown-item:disabled i, .dropdown-item:disabled svg {
            color: var(--gray-400);
        }

        .dropdown-divider {
            margin: 0.5rem 0;
            border-top: 1px solid var(--gray-200);
        }

        /* Order Timeline */
        .order-timeline {
            position: relative;
            padding: 1rem 0;
        }

        .timeline-item {
            position: relative;
            padding-left: 2rem;
            margin-bottom: 1.5rem;
        }

        .timeline-item:last-child {
            margin-bottom: 0;
        }

        .timeline-item::before {
            content: '';
            position: absolute;
            left: 0.5rem;
            top: 1.5rem;
            bottom: -1.5rem;
            width: 2px;
            background-color: var(--gray-200);
        }

        .timeline-item:last-child::before {
            display: none;
        }

        .timeline-badge {
            position: absolute;
            left: 0;
            top: 0.25rem;
            width: 1rem;
            height: 1rem;
            border-radius: var(--border-radius-full);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1;
        }

        .timeline-badge i {
            font-size: 0.5rem;
            color: white;
        }

        .timeline-content {
            background-color: white;
            border-radius: var(--border-radius);
            padding: 1rem;
            box-shadow: var(--box-shadow-sm);
        }

        .timeline-content h6 {
            margin: 0 0 0.25rem;
            font-weight: 600;
            color: var(--gray-900);
            font-size: 0.875rem;
        }

        .timeline-content p {
            margin: 0;
            font-size: 0.875rem;
        }

        .timeline-content p.text-muted {
            font-size: 0.75rem;
            color: var(--gray-500);
        }

        /* Alerts */
        .alert {
            border-radius: var(--border-radius);
            border: none;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .alert-info {
            background-color: #EFF6FF;
            color: #1E40AF;
        }

        .alert-warning {
            background-color: #FFFBEB;
            color: #B45309;
        }

        .alert-success {
            background-color: #ECFDF5;
            color: #065F46;
        }

        .alert-danger {
            background-color: #FEF2F2;
            color: #B91C1C;
        }

        .alert-heading {
            font-weight: 600;
            margin-bottom: 0.5rem;
            font-size: 1rem;
        }

        /* Modals */
        .modal-content {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow-xl);
        }

        .modal-header {
            border-bottom: 1px solid var(--gray-200);
            padding: 1.25rem 1.5rem;
        }

        .modal-title {
            font-weight: 600;
            color: var(--gray-900);
            font-size: 1.125rem;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .modal-footer {
            border-top: 1px solid var(--gray-200);
            padding: 1.25rem 1.5rem;
        }

        /* Forms */
        .form-label {
            font-weight: 500;
            color: var(--gray-700);
            margin-bottom: 0.5rem;
            font-size: 0.875rem;
        }

        .form-control {
            border-radius: var(--border-radius);
            border: 1px solid var(--gray-300);
            padding: 0.625rem 0.875rem;
            transition: var(--transition-all);
            font-size: 0.875rem;
        }

        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(99, 102, 241, 0.25);
        }

        .form-select {
            border-radius: var(--border-radius);
            border: 1px solid var(--gray-300);
            padding: 0.625rem 2.25rem 0.625rem 0.875rem;
            transition: var(--transition-all);
            font-size: 0.875rem;
            background-position: right 0.875rem center;
        }

        .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(99, 102, 241, 0.25);
        }

        .form-text {
            font-size: 0.75rem;
            color: var(--gray-500);
            margin-top: 0.25rem;
        }

        /* Refund Badge */
        .refund-badge {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 1rem;
            height: 1rem;
            border-radius: var(--border-radius-full);
            background-color: var(--success-color);
            color: white;
            font-size: 0.5rem;
            margin-left: 0.25rem;
        }

        /* Returned Item */
        .returned-item {
            background-color: var(--gray-50);
        }

        .refund-amount {
            font-weight: 600;
            color: var(--success-color);
        }

        .refund-info {
            background-color: var(--gray-50);
            border-radius: var(--border-radius);
            padding: 1rem;
        }

        .refund-info h6 {
            font-weight: 600;
            color: var(--gray-900);
            margin-bottom: 0.5rem;
            font-size: 0.875rem;
        }

        .refund-info p {
            margin-bottom: 0.25rem;
            font-size: 0.875rem;
        }

        /* Action Buttons */
        .action-btn {
            width: 2rem;
            height: 2rem;
            border-radius: var(--border-radius-full);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border: none;
            background-color: var(--gray-100);
            color: var(--gray-600);
            font-size: 0.875rem;
            cursor: pointer;
            transition: var(--transition-all);
            margin-right: 0.25rem;
        }

        .action-btn:hover {
            background-color: var(--gray-200);
        }

        .action-btn.view {
            background-color: #DBEAFE;
            color: #2563EB;
        }

        .action-btn.view:hover {
            background-color: #BFDBFE;
        }

        .action-btn.edit {
            background-color: #D1FAE5;
            color: #059669;
        }

        .action-btn.edit:hover {
            background-color: #A7F3D0;
        }

        .action-btn.approve {
            background-color: #D1FAE5;
            color: #059669;
        }

        .action-btn.approve:hover {
            background-color: #A7F3D0;
        }

        .action-btn.reject {
            background-color: #FEE2E2;
            color: #DC2626;
        }

        .action-btn.reject:hover {
            background-color: #FECACA;
        }

        /* Item Action Button */
        .item-action-btn {
            border-radius: var(--border-radius-full);
            padding: 0.375rem 0.75rem;
            font-size: 0.75rem;
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
        }

        /* Address */
        address {
            margin-bottom: 0;
            font-style: normal;
            line-height: 1.8;
            font-size: 0.875rem;
        }

        /* Order Summary */
        .order-summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.75rem;
            font-size: 0.875rem;
        }

        .order-summary-row.total {
            font-weight: 600;
            font-size: 1rem;
            border-top: 1px solid var(--gray-200);
            padding-top: 0.75rem;
            margin-top: 0.75rem;
        }

        /* Responsive */
        @media (max-width: 992px) {
            .main-content {
                padding: 1rem;
            }
        }

        @media (max-width: 768px) {
            .page-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.75rem;
            }

            .card-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.75rem;
            }

            .table-responsive {
                border: none;
            }
        }

        @media (max-width: 576px) {
            .order-timeline {
                padding: 0.75rem;
            }

            .timeline-item {
                padding-left: 1.5rem;
            }

            .timeline-content {
                padding: 0.75rem;
            }
        }

        /* Tooltip */
        .tooltip-inner {
            max-width: 250px;
            text-align: left;
            padding: 0.75rem;
            background-color: var(--gray-900);
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow-lg);
            font-size: 0.75rem;
        }

        /* Toast */
        .toast-container {
            z-index: 1060;
        }

        .toast {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow-lg);
            border: none;
        }

        .toast-header {
            border-bottom: 1px solid var(--gray-200);
            padding: 0.75rem 1rem;
        }

        .toast-body {
            padding: 1rem;
        }

        /* Custom Scrollbar */
        ::-webkit-scrollbar {
            width: 0.5rem;
            height: 0.5rem;
        }

        ::-webkit-scrollbar-track {
            background: var(--gray-100);
            border-radius: var(--border-radius);
        }

        ::-webkit-scrollbar-thumb {
            background: var(--gray-400);
            border-radius: var(--border-radius);
        }

        ::-webkit-scrollbar-thumb:hover {
            background: var(--gray-500);
        }

        /* Print Styles */
        @media print {
            body {
                background-color: white;
            }

            .main-content {
                padding: 0;
            }

            .card {
                box-shadow: none;
                border: 1px solid var(--gray-200);
            }

            .no-print {
                display: none !important;
            }
        }

        /* Animation */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(0.5rem); }
            to { opacity: 1; transform: translateY(0); }
        }

        .animate-fade-in {
            animation: fadeIn 0.3s ease-out forwards;
        }

        @keyframes slideInRight {
            from { opacity: 0; transform: translateX(1rem); }
            to { opacity: 1; transform: translateX(0); }
        }

        .animate-slide-in-right {
            animation: slideInRight 0.3s ease-out forwards;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .animate-pulse {
            animation: pulse 2s infinite;
        }

        /* Order Items Gallery */
        .order-items-gallery {
            display: flex;
            flex-wrap: nowrap;
            overflow-x: auto;
            gap: 0.75rem;
            padding: 0.75rem 0;
            margin-bottom: 1.5rem;
            scrollbar-width: thin;
        }

        .gallery-item {
            flex: 0 0 auto;
            width: 4.5rem;
            height: 4.5rem;
            border-radius: var(--border-radius);
            overflow: hidden;
            border: 2px solid transparent;
            transition: var(--transition-all);
            cursor: pointer;
            position: relative;
            box-shadow: var(--box-shadow-sm);
        }

        .gallery-item.active {
            border-color: var(--primary-color);
            transform: scale(1.05);
            box-shadow: var(--box-shadow-md);
        }

        .gallery-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: var(--transition-all);
        }

        .gallery-item:hover img {
            transform: scale(1.1);
        }

        .gallery-item .item-badge {
            position: absolute;
            top: -0.25rem;
            right: -0.25rem;
            width: 1.25rem;
            height: 1.25rem;
            border-radius: var(--border-radius-full);
            background-color: var(--primary-color);
            color: white;
            font-size: 0.625rem;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            box-shadow: var(--box-shadow-sm);
        }

        /* Order Status Stepper */
        .order-status-stepper {
            display: flex;
            justify-content: space-between;
            margin: 2rem 0;
            position: relative;
        }

        .order-status-stepper::before {
            content: '';
            position: absolute;
            top: 1.25rem;
            left: 0;
            right: 0;
            height: 2px;
            background-color: var(--gray-200);
            z-index: 1;
        }

        .stepper-step {
            position: relative;
            z-index: 2;
            display: flex;
            flex-direction: column;
            align-items: center;
            flex: 1;
        }

        .stepper-icon {
            width: 2.5rem;
            height: 2.5rem;
            border-radius: var(--border-radius-full);
            background-color: white;
            border: 2px solid var(--gray-200);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 0.75rem;
            color: var(--gray-500);
            font-size: 1rem;
            transition: var(--transition-all);
            box-shadow: var(--box-shadow-sm);
        }

        .stepper-label {
            font-size: 0.75rem;
            font-weight: 500;
            color: var(--gray-500);
            text-align: center;
            transition: var(--transition-all);
            white-space: nowrap;
        }

        .stepper-step.active .stepper-icon {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            color: white;
            box-shadow: 0 0 0 4px rgba(99, 102, 241, 0.25);
        }

        .stepper-step.active .stepper-label {
            color: var(--primary-color);
            font-weight: 600;
        }

        .stepper-step.completed .stepper-icon {
            background-color: var(--success-color);
            border-color: var(--success-color);
            color: white;
        }

        .stepper-step.completed .stepper-label {
            color: var(--success-color);
        }

        .stepper-step.cancelled .stepper-icon {
            background-color: var(--danger-color);
            border-color: var(--danger-color);
            color: white;
        }

        .stepper-step.cancelled .stepper-label {
            color: var(--danger-color);
        }

        /* Progress Line */
        .progress-line {
            position: absolute;
            top: 1.25rem;
            left: 0;
            height: 2px;
            background-color: var(--primary-color);
            z-index: 1;
            transition: width 0.5s ease;
        }

        /* Customer Info Card */
        .avatar-circle {
            width: 3rem;
            height: 3rem;
            border-radius: var(--border-radius-full);
            background-color: var(--primary-light);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
        }

        .customer-info {
            margin-top: 1rem;
        }

        .info-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem 0;
            border-bottom: 1px solid var(--gray-200);
        }

        .info-item:last-child {
            border-bottom: none;
        }

        .info-label {
            color: var(--gray-600);
            font-size: 0.875rem;
            display: flex;
            align-items: center;
        }

        .info-value {
            font-weight: 500;
            color: var(--gray-900);
            font-size: 0.875rem;
        }

        /* Order Notes */
        .order-notes {
            margin-top: 1rem;
        }

        .note-item {
            background-color: var(--gray-50);
            border-radius: var(--border-radius);
            padding: 0.75rem;
            margin-bottom: 0.75rem;
        }

        .note-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
        }

        .note-author {
            font-weight: 500;
            color: var(--gray-900);
            font-size: 0.875rem;
        }

        .note-date {
            color: var(--gray-500);
            font-size: 0.75rem;
        }

        .note-content {
            color: var(--gray-700);
            font-size: 0.875rem;
        }

        /* Order Stats */
        .order-stats {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .stat-card {
            background-color: white;
            border-radius: var(--border-radius);
            padding: 1rem;
            box-shadow: var(--box-shadow-sm);
            transition: var(--transition-all);
        }

        .stat-card:hover {
            box-shadow: var(--box-shadow-md);
            transform: translateY(-2px);
        }

        .stat-icon {
            width: 2.5rem;
            height: 2.5rem;
            border-radius: var(--border-radius-full);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 0.75rem;
            font-size: 1rem;
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--gray-900);
            margin-bottom: 0.25rem;
        }

        .stat-label {
            font-size: 0.75rem;
            color: var(--gray-500);
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        /* Shipping Details */
        .shipping-details {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .shipping-method {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem;
            background-color: var(--gray-50);
            border-radius: var(--border-radius);
            margin-bottom: 0.5rem;
        }

        .shipping-method-icon {
            color: var(--primary-color);
            font-size: 1.25rem;
        }

        .shipping-method-details {
            flex: 1;
        }

        .shipping-method-name {
            font-weight: 500;
            color: var(--gray-900);
            font-size: 0.875rem;
        }

        .shipping-method-info {
            color: var(--gray-600);
            font-size: 0.75rem;
        }

        /* Payment Details */
        .payment-details {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .payment-method {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem;
            background-color: var(--gray-50);
            border-radius: var(--border-radius);
            margin-bottom: 0.5rem;
        }

        .payment-method-icon {
            color: var(--primary-color);
            font-size: 1.25rem;
        }

        .payment-method-details {
            flex: 1;
        }

        .payment-method-name {
            font-weight: 500;
            color: var(--gray-900);
            font-size: 0.875rem;
        }

        .payment-method-info {
            color: var(--gray-600);
            font-size: 0.75rem;
        }

        /* Return Request Status */
        .return-request-badge {
            position: relative;
        }
        
        .return-request-badge::after {
            content: "Action Required";
            position: absolute;
            top: -0.5rem;
            right: -0.5rem;
            font-size: 0.625rem;
            background-color: var(--warning-color);
            color: white;
            padding: 0.125rem 0.25rem;
            border-radius: var(--border-radius-sm);
            font-weight: 600;
        }

        /* Restricted Status Message */
        .restricted-status-message {
            background-color: #FEF3C7;
            border-left: 4px solid var(--warning-color);
            padding: 0.75rem;
            margin-top: 0.5rem;
            border-radius: var(--border-radius);
>>>>>>> Stashed changes
            font-size: 0.875rem;
        }
    </style>
</head>
<body>
<<<<<<< Updated upstream
    <%- include("../partials/admin/header") %>
    <div class="main-content p-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h4 class="mb-1">Order Details</h4>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb mb-0">
                        <li class="breadcrumb-item"><a href="/admin">Dashboard</a></li>
                        <li class="breadcrumb-item"><a href="/admin/adminorder">Order List</a></li>
                        <li class="breadcrumb-item active" aria-current="page">Order Details</li>
                    </ol>
                </nav>
            </div>
            <!-- <button class="btn btn-dark rounded" onclick="downloadInvoice('<%= order._id %>')">
                <i class="fa-solid fa-file-invoice me-2"></i>Invoice
            </button> -->
        </div>

        <div class="row">
            <div class="col-md-4">
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <div>
                            <span>Order #<%= order.orderId || 'N/A' %></span>
                            <span class="badge badge-<%= order.status.toLowerCase().replace(' ', '-') %> ms-2"><%= order.status %></span>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="order-info-item">
                            <div class="order-info-label">
                                <i class="fa-regular fa-calendar me-2"></i>Added
                            </div>
                            <div class="order-info-value">
                                <%= order.formattedDate || 'N/A' %>
                            </div>
                        </div>
                        <div class="order-info-item">
                            <div class="order-info-label">
                                <i class="fa-solid fa-credit-card me-2"></i>Payment Method
                            </div>
                            <div class="order-info-value"><%= order.payment || 'N/A' %></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card mb-4">
                    <div class="card-header">
                        <span>Customer</span>
                    </div>
                    <div class="card-body">
                        <div class="order-info-item">
                            <div class="order-info-label">
                                <i class="fa-solid fa-user me-2"></i>Customer
                            </div>
                            <div class="order-info-value"><%= order.customer?.fullname || 'Unknown' %></div>
                        </div>
                        <div class="order-info-item">
                            <div class="order-info-label">
                                <i class="fa-solid fa-envelope me-2"></i>Email
                            </div>
                            <div class="order-info-value"><%= order.customer?.email || 'N/A' %></div>
                        </div>
                        <div class="order-info-item">
                            <div class="order-info-label">
                                <i class="fa-solid fa-phone me-2"></i>Phone
                            </div>
                            <div class="order-info-value"><%= order.address?.mobile || 'N/A' %></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card mb-4">
                    <div class="card-header">
                        <span>Address</span>
                    </div>
                    <div class="card-body">
                        <div class="order-info-item">
                            <div class="order-info-label">
                                <i class="fa-solid fa-location-dot me-2"></i>Deliver to
                            </div>
                            <div class="order-info-value">
                                <%= order.address?.fullname || 'N/A' %>, <%= order.address?.address || '' %>, <%= order.address?.city || '' %>, <%= order.address?.state || '' %> <%= order.address?.pincode || '' %>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-8">
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <span>Order List</span>
                        <span class="badge bg-light text-dark"><%= order.products?.length || 0 %> Products</span>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table order-list-table">
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>ORDER ID</th>
                                        <th>QTY</th>
                                        <th>Price</th>
                                        <th>Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% order.products?.forEach(product => { %>
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <img src="<%= product.image || '/api/placeholder/50/50' %>" alt="<%= product.name || 'Product' %>" class="img-fluid me-2" style="width: 50px; height: 50px;" />
                                                    <%= product.name || 'Unknown Product' %>
                                                </div>
                                            </td>
                                            <td><%= order.orderId || 'N/A' %></td>
                                            <td><%= product.quantity || 0 %> pcs</td>
                                            <td>₹<%= product.price || '0.00' %></td>
                                            <td>₹<%= product.total || '0.00' %></td>
                                        </tr>
                                    <% }) %>
                                </tbody>
                            </table>
                        </div>

                        <div class="row mt-4">
                            <div class="col-md-6 offset-md-6">
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Subtotal</span>
                                    <span>₹<%= order.total || '0.00' %></span>
                                </div>
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Delivery charge</span>
                                    <span>₹0</span>
                                </div>
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Coupon<br><small class="text-muted">N/A</small></span>
                                    <span>₹0</span>
                                </div>
                                <hr>
                                <div class="d-flex justify-content-between fw-bold">
                                    <span>Grand Total</span>
                                    <span>₹<%= order.total || '0.00' %></span>
=======
    <div class="container-fluid p-0">
        <div class="row g-0">
            <%- include("../partials/admin/header") %>
            <div class="col">
                <div class="main-content">
                    <div class="page-header">
                        <div class="page-header-content">
                            <h4>Order Details</h4>
                            <nav aria-label="breadcrumb">
                                <ol class="breadcrumb">
                                    <li class="breadcrumb-item">
                                        <a href="/admin" class="text-decoration-none">Dashboard</a>
                                    </li>
                                    <li class="breadcrumb-item">
                                        <a href="/admin/adminorder" class="text-decoration-none">Orders</a>
                                    </li>
                                    <li class="breadcrumb-item active" aria-current="page">Order #<%= order.orderNumber %></li>
                                </ol>
                            </nav>
                        </div>
                        <div class="page-header-actions">
                            <button class="btn btn-outline-secondary btn-sm me-2" onclick="window.print()">
                                <i class="fas fa-print me-1"></i> Print
                            </button>
                            <a href="/admin/invoices/<%= order._id %>" class="btn btn-primary btn-sm">
                                <i class="fas fa-file-invoice me-1"></i> Download Invoice
                            </a>
                        </div>
                    </div>

                    <!-- Order Stats -->
                    <div class="order-stats">
                        <div class="stat-card">
                            <div class="stat-icon" style="background-color: #EFF6FF; color: #1E40AF;">
                                <i class="fas fa-calendar-alt"></i>
                            </div>
                            <div class="stat-value"><%= order.formattedDate.split(',')[0] %></div>
                            <div class="stat-label">Order Date</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-icon" style="background-color: #ECFDF5; color: #065F46;">
                                <i class="fas fa-rupee-sign"></i>
                            </div>
                            <div class="stat-value">₹<%= order.total.toFixed(2) %></div>
                            <div class="stat-label">Total Amount</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-icon" style="background-color: #EFF6FF; color: #1E40AF;">
                                <i class="fas fa-credit-card"></i>
                            </div>
                            <div class="stat-value"><%= order.paymentMethod %></div>
                            <div class="stat-label">Payment Method</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-icon" style="background-color: #FEF3C7; color: #B45309;">
                                <i class="fas fa-truck"></i>
                            </div>
                            <div class="stat-value"><%= order.status %></div>
                            <div class="stat-label">Order Status</div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-lg-8">
                            <!-- Order Status Card -->
                            <div class="card mb-4 animate-fade-in">
                                <div class="card-header">
                                    <h5 class="mb-0">Order Progress</h5>
                                </div>
                                <div class="card-body">
                                    <!-- Order Status Stepper -->
                                    <div class="order-status-stepper">
                                        <div class="progress-line" id="progressLine"></div>
                                        
                                        <div class="stepper-step <%= ['Pending', 'Processing', 'Confirmed', 'Shipped', 'Delivered'].includes(order.status) ? (order.status === 'Pending' ? 'active' : 'completed') : (order.status === 'Cancelled' ? 'cancelled' : '') %>">
                                            <div class="stepper-icon">
                                                <i class="fas fa-shopping-cart"></i>
                                            </div>
                                            <div class="stepper-label">Pending</div>
                                        </div>
                                        
                                        <div class="stepper-step <%= ['Processing', 'Confirmed', 'Shipped', 'Delivered'].includes(order.status) ? (order.status === 'Processing' ? 'active' : 'completed') : '' %>">
                                            <div class="stepper-icon">
                                                <i class="fas fa-cog"></i>
                                            </div>
                                            <div class="stepper-label">Processing</div>
                                        </div>
                                        
                                        <div class="stepper-step <%= ['Confirmed', 'Shipped', 'Delivered'].includes(order.status) ? (order.status === 'Confirmed' ? 'active' : 'completed') : '' %>">
                                            <div class="stepper-icon">
                                                <i class="fas fa-check"></i>
                                            </div>
                                            <div class="stepper-label">Confirmed</div>
                                        </div>
                                        
                                        <div class="stepper-step <%= ['Shipped', 'Delivered'].includes(order.status) ? (order.status === 'Shipped' ? 'active' : 'completed') : '' %>">
                                            <div class="stepper-icon">
                                                <i class="fas fa-truck"></i>
                                            </div>
                                            <div class="stepper-label">Shipped</div>
                                        </div>
                                        
                                        <div class="stepper-step <%= order.status === 'Delivered' ? 'active' : '' %>">
                                            <div class="stepper-icon">
                                                <i class="fas fa-box-open"></i>
                                            </div>
                                            <div class="stepper-label">Delivered</div>
                                        </div>
                                        
                                        <% if (order.status === 'Cancelled') { %>
                                        <div class="stepper-step cancelled">
                                            <div class="stepper-icon">
                                                <i class="fas fa-times"></i>
                                            </div>
                                            <div class="stepper-label">Cancelled</div>
                                        </div>
                                        <% } %>
                                        
                                        <% if (['Return Requested', 'Return Approved', 'Returned'].includes(order.status)) { %>
                                        <div class="stepper-step <%= order.status === 'Returned' ? 'completed' : 'active' %>">
                                            <div class="stepper-icon">
                                                <i class="fas fa-undo"></i>
                                            </div>
                                            <div class="stepper-label">Return <%= order.status === 'Returned' ? 'Completed' : 'In Progress' %></div>
                                        </div>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                            
                            <% if (order.status === 'Return Requested') { %>
                            <div class="card mb-4 animate-fade-in">
                                <div class="card-header">
                                    <h5 class="mb-0">Return Request Action Required</h5>
                                </div>
                                <div class="card-body">
                                    <div class="alert alert-warning mb-3">
                                        <div class="d-flex align-items-center">
                                            <div class="flex-shrink-0">
                                                <i class="fas fa-exclamation-triangle fa-2x me-3"></i>
                                            </div>
                                            <div class="flex-grow-1">
                                                <h6 class="alert-heading mb-1">Return Request Pending</h6>
                                                <p class="mb-2">This order has a pending return request. You must approve or reject this request before making any other changes to the order.</p>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="d-flex justify-content-center gap-3">
                                        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#approveReturnModal" onclick="document.getElementById('confirmApproveReturnBtn').setAttribute('data-order-id', '<%= order._id %>')">
                                            <i class="fas fa-check me-1"></i> Approve Return
                                        </button>
                                        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#rejectReturnModal" onclick="document.getElementById('confirmRejectReturnBtn').setAttribute('data-order-id', '<%= order._id %>')">
                                            <i class="fas fa-times me-1"></i> Reject Return
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <% } %>
                            
                            <!-- Order Items Gallery -->
                            <div class="card mb-4 animate-fade-in">
                                <div class="card-header">
                                    <h5 class="mb-0">Order Items</h5>
                                </div>
                                <div class="card-body">
                                    <div class="order-items-gallery">
                                        <% order.orderItems.forEach((item, index) => { %>
                                            <div class="gallery-item <%= index === 0 ? 'active' : '' %>" data-item-id="<%= item._id %>">
                                                <img src="<%= item.itemImage %>" alt="<%= item.product_name %>">
                                                <div class="item-badge"><%= item.quantity %></div>
                                            </div>
                                        <% }); %>
                                    </div>
                                    
                                    <div class="table-responsive">
                                        <table class="table table-hover mb-0">
                                            <thead>
                                                <tr>
                                                    <th>Product</th>
                                                    <th>Size</th>
                                                    <th>Price</th>
                                                    <th>Quantity</th>
                                                    <th>Total</th>
                                                    <th>Status</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <% order.orderItems.forEach(item => { %>
                                                <tr class="<%= item.refunded ? 'returned-item' : '' %> <%= ['Cancelled', 'Returned'].includes(item.status) ? 'final-state' : '' %>" 
                                                    data-item-id="<%= item._id %>" 
                                                    data-item-status="<%= item.status %>">
                                                    <td>
                                                        <div class="d-flex align-items-center">
                                                            <img src="<%= item.itemImage %>" alt="<%= item.product_name %>" class="product-image me-2">
                                                            <span><%= item.product_name %></span>
                                                        </div>
                                                    </td>
                                                    <td><%= item.size %></td>
                                                    <td>₹<%= item.price.toFixed(2) %></td>
                                                    <td><%= item.quantity %></td>
                                                    <td>₹<%= item.total_amount.toFixed(2) %></td>
                                                    <td>
                                                        <span class="status-badge status-<%= item.status.toLowerCase().replace(/\s+/g, '-') %> <%= ['Cancelled', 'Returned'].includes(item.status) ? 'final-state-badge' : (item.status === 'Return Requested' ? 'return-request-badge' : '') %>">
                                                            <%= item.status %>
                                                            <% if (item.refunded) { %>
                                                            <span class="refund-badge" title="Refunded to wallet">
                                                                <i class="fas fa-wallet"></i>
                                                            </span>
                                                            <% } %>
                                                        </span>
                                                        <% if (['Cancelled', 'Returned'].includes(item.status)) { %>
                                                            <i class="fas fa-lock ms-1 text-secondary" 
                                                               data-bs-toggle="tooltip" 
                                                               title="This item is in a final state and cannot be modified"></i>
                                                        <% } %>
                                                        <% if (item.statusHistory && item.statusHistory.length > 0) { %>
                                                            <button type="button" class="btn btn-sm btn-link p-0 ms-1" 
                                                                    data-bs-toggle="tooltip" data-placement="top" 
                                                                    title="View Status History"
                                                                    onclick="showStatusHistory('<%= JSON.stringify(item.statusHistory).replace(/'/g, '\\\'') %>', '<%= item.product_name %>')">
                                                                <i class="fas fa-history"></i>
                                                            </button>
                                                        <% } %>
                                                    </td>
                                                    <td>
                                                        <div class="dropdown">
                                                            <% if (order.status === 'Return Requested' && item.status !== 'Return Requested') { %>
                                                                <button class="btn btn-sm btn-outline-secondary item-action-btn" disabled>
                                                                    <i class="fas fa-lock me-1"></i> Locked
                                                                </button>
                                                            <% } else if (['Delivered', 'Cancelled', 'Returned'].includes(order.status) || ['Cancelled', 'Returned'].includes(item.status)) { %>
                                                                <button class="btn btn-sm btn-outline-secondary item-action-btn" disabled>
                                                                    <i class="fas fa-lock me-1"></i> Locked
                                                                </button>
                                                            <% } else if (item.status === 'Return Requested') { %>
                                                                <div class="btn-group">
                                                                    <button class="btn btn-sm btn-success me-1 btn-approve-item-return" data-item-id="<%= item._id %>">
                                                                        <i class="fas fa-check me-1"></i> Approve
                                                                    </button>
                                                                    <button class="btn btn-sm btn-danger btn-reject-item-return" data-item-id="<%= item._id %>">
                                                                        <i class="fas fa-times me-1"></i> Reject
                                                                    </button>
                                                                </div>
                                                            <% } else { %>
                                                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle item-action-btn" 
                                                                        type="button" 
                                                                        id="itemActionDropdown<%= item._id %>" 
                                                                        data-bs-toggle="dropdown" 
                                                                        aria-expanded="false">
                                                                    <i class="fas fa-ellipsis-h"></i>
                                                                </button>
                                                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="itemActionDropdown<%= item._id %>">
                                                                    <li>
                                                                        <button class="dropdown-item btn-update-item-status" 
                                                                                data-item-id="<%= item._id %>" 
                                                                                data-current-status="<%= item.status %>"
                                                                                data-product-name="<%= item.product_name %>">
                                                                            <i class="fas fa-edit me-1"></i> Update Status
                                                                        </button>
                                                                    </li>
                                                                    
                                                                    <% if (item.status === 'Return Approved') { %>
                                                                    <li>
                                                                        <button class="dropdown-item btn-complete-item-return" 
                                                                               data-item-id="<%= item._id %>"
                                                                               data-refund-amount="<%= item.total_amount %>">
                                                                            <i class="fas fa-check-circle me-1"></i> Complete Return
                                                                        </button>
                                                                    </li>
                                                                    <% } %>
                                                                    
                                                                    <% if (item.refunded) { %>
                                                                    <li>
                                                                        <button class="dropdown-item" disabled>
                                                                            <i class="fas fa-wallet me-1"></i> Refunded: ₹<%= item.refundAmount.toFixed(2) %>
                                                                        </button>
                                                                    </li>
                                                                    <% } %>
                                                                </ul>
                                                            <% } %>
                                                        </div>
                                                    </td>
                                                </tr>
                                                <% }); %>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            
                            <% if (order.orderItems.some(item => item.refunded)) { %>
                            <div class="card mb-4 animate-fade-in">
                                <div class="card-header">
                                    <h5 class="mb-0">Refund Summary</h5>
                                </div>
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-hover mb-0">
                                            <thead>
                                                <tr>
                                                    <th>Product</th>
                                                    <th>Refund Amount</th>
                                                    <th>Refund Date</th>
                                                    <th>Status</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <% order.orderItems.filter(item => item.refunded).forEach(item => { %>
                                                <tr>
                                                    <td>
                                                        <div class="d-flex align-items-center">
                                                            <img src="<%= item.itemImage %>" alt="<%= item.product_name %>" class="product-image me-2">
                                                            <span><%= item.product_name %></span>
                                                        </div>
                                                    </td>
                                                    <td class="refund-amount">₹<%= item.refundAmount.toFixed(2) %></td>
                                                    <td><%= new Date(item.refundDate).toLocaleString() %></td>
                                                    <td>
                                                        <span class="badge bg-success">
                                                            <i class="fas fa-check-circle me-1"></i> Refunded to Wallet
                                                        </span>
                                                    </td>
                                                </tr>
                                                <% }); %>
                                            </tbody>
                                        </table>
                                    </div>
                                    
                                    <div class="refund-info mt-3">
                                        <h6><i class="fas fa-info-circle me-2"></i>Refund Information</h6>
                                        <p>All refunds are processed to the customer's wallet balance and can be used for future purchases.</p>
                                        <p>The customer can view their wallet balance and transaction history in their account dashboard.</p>
                                    </div>
                                </div>
                            </div>
                            <% } %>
                            
                            <div class="card mb-4 animate-fade-in">
                                <div class="card-header">
                                    <h5 class="mb-0">Order Timeline</h5>
                                </div>
                                <div class="card-body">
                                    <div class="order-timeline">
                                        <% if (order.statusHistory && order.statusHistory.length > 0) { %>
                                            <% order.statusHistory.forEach((entry, index) => { %>
                                                <div class="timeline-item">
                                                    <div class="timeline-badge status-<%= entry.status.toLowerCase().replace(/\s+/g, '-') %>">
                                                        <i class="fas fa-circle"></i>
                                                    </div>
                                                    <div class="timeline-content">
                                                        <h6><%= entry.status %></h6>
                                                        <p class="text-muted"><%= new Date(entry.date).toLocaleString() %></p>
                                                        <% if (entry.note) { %>
                                                            <p><%= entry.note %></p>
                                                        <% } %>
                                                    </div>
                                                </div>
                                            <% }); %>
                                        <% } else { %>
                                            <p>No status history available</p>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-lg-4">
                            <div class="card mb-4 animate-slide-in-right">
                                <div class="card-header">
                                    <h5 class="mb-0">Customer Information</h5>
                                </div>
                                <div class="card-body">
                                    <div class="d-flex align-items-center mb-3">
                                        <div class="flex-shrink-0">
                                            <div class="avatar-circle">
                                                <i class="fas fa-user"></i>
                                            </div>
                                        </div>
                                        <div class="flex-grow-1 ms-3">
                                            <h6 class="mb-0"><%= order.customer.fullname %></h6>
                                            <p class="text-muted mb-0"><%= order.customer.email %></p>
                                        </div>
                                    </div>
                                    
                                    <div class="customer-info">
                                        <div class="info-item">
                                            <span class="info-label"><i class="fas fa-shopping-bag me-2"></i>Total Orders:</span>
                                            <span class="info-value">3</span>
                                        </div>
                                        <div class="info-item">
                                            <span class="info-label"><i class="fas fa-wallet me-2"></i>Payment Method:</span>
                                            <span class="info-value"><%= order.paymentMethod %></span>
                                        </div>
                                        <div class="info-item">
                                            <span class="info-label"><i class="fas fa-money-check-alt me-2"></i>Payment Status:</span>
                                            <span class="badge <%= order.paymentStatus === 'Paid' ? 'bg-success' : 'bg-warning' %>">
                                                <%= order.paymentStatus %>
                                            </span>
                                        </div>
                                        <div class="info-item">
                                            <span class="info-label"><i class="fas fa-calendar-alt me-2"></i>Customer Since:</span>
                                            <span class="info-value">Jan 2023</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-footer">
                                    <a href="#" class="btn btn-outline-primary btn-sm w-100">
                                        <i class="fas fa-user me-1"></i> View Customer Profile
                                    </a>
                                </div>
                            </div>
                            
                            <div class="card mb-4 animate-slide-in-right">
                                <div class="card-header">
                                    <h5 class="mb-0">Shipping Address</h5>
                                </div>
                                <div class="card-body">
                                    <div class="shipping-method mb-3">
                                        <div class="shipping-method-icon">
                                            <i class="fas fa-truck"></i>
                                        </div>
                                        <div class="shipping-method-details">
                                            <div class="shipping-method-name">Standard Shipping</div>
                                            <div class="shipping-method-info">Estimated delivery: 3-5 business days</div>
                                        </div>
                                    </div>
                                    
                                    <address>
                                        <strong><%= order.address.fullname || 'N/A' %></strong><br>
                                        <%= order.address.district || 'N/A' %><br>
                                        <%= order.address.city || 'N/A' %>, <%= order.address.state || 'N/A' %> <%= order.address.pincode || 'N/A' %><br>
                                        <%= order.address.landmark || 'N/A' %><br>
                                        <abbr title="Phone"> Phone:</abbr> <%= order.address.mobile || 'N/A' %>
                                    </address>
                                </div>
                                <div class="card-footer">
                                    <button class="btn btn-outline-secondary btn-sm w-100" onclick="copyToClipboard('shipping-address')">
                                        <i class="fas fa-copy me-1"></i> Copy Address
                                    </button>
                                </div>
                            </div>
                            
                            <div class="card mb-4 animate-slide-in-right">
                                <div class="card-header">
                                    <h5 class="mb-0">Payment Details</h5>
                                </div>
                                <div class="card-body">
                                    <div class="payment-method mb-3">
                                        <div class="payment-method-icon">
                                            <i class="fas fa-credit-card"></i>
                                        </div>
                                        <div class="payment-method-details">
                                            <div class="payment-method-name"><%= order.paymentMethod %></div>
                                            <div class="payment-method-info">
                                                Status: <span class="badge <%= order.paymentStatus === 'Paid' ? 'bg-success' : 'bg-warning' %>">
                                                    <%= order.paymentStatus %>
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="order-summary-row">
                                        <span>Subtotal:</span>
                                        <span>₹<%= order.total.toFixed(2) %></span>
                                    </div>
                                    <div class="order-summary-row">
                                        <span>Shipping:</span>
                                        <span>₹0.00</span>
                                    </div>
                                    <div class="order-summary-row">
                                        <span>Tax:</span>
                                        <span>₹0.00</span>
                                    </div>
                                    <div class="order-summary-row">
                                        <span>Discount:</span>
                                        <span>₹0.00</span>
                                    </div>
                                    <div class="order-summary-row total">
                                        <span>Total:</span>
                                        <span>₹<%= order.total.toFixed(2) %></span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="card mb-4 animate-slide-in-right">
                                <div class="card-header">
                                    <h5 class="mb-0">Order Actions</h5>
                                </div>
                                <div class="card-body">
                                    <% if (order.status === 'Return Requested') { %>
                                        <div class="alert alert-warning mb-3">
                                            <i class="fas fa-exclamation-triangle me-2"></i>
                                            <strong>Return Request Pending</strong>
                                            <p class="mb-0 mt-1">You must approve or reject the return request before making any other changes to this order.</p>
                                        </div>
                                        <div class="d-grid gap-2">
                                            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#approveReturnModal" onclick="document.getElementById('confirmApproveReturnBtn').setAttribute('data-order-id', '<%= order._id %>')">
                                                <i class="fas fa-check me-1"></i> Approve Return
                                            </button>
                                            <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#rejectReturnModal" onclick="document.getElementById('confirmRejectReturnBtn').setAttribute('data-order-id', '<%= order._id %>')">
                                                <i class="fas fa-times me-1"></i> Reject Return
                                            </button>
                                        </div>
                                    <% } else { %>
                                        <div class="mb-3">
                                            <label for="orderStatusSelect" class="form-label">Update Order Status</label>
                                            <select class="form-select" id="orderStatusSelect" <%= ['Delivered', 'Cancelled', 'Returned'].includes(order.status) ? 'disabled' : '' %>>
                                                <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                                                <option value="Processing" <%= order.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                                                <option value="Confirmed" <%= order.status === 'Confirmed' ? 'selected' : '' %>>Confirmed</option>
                                                <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                                <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                                <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                            </select>
                                            <% if (['Delivered', 'Cancelled', 'Returned'].includes(order.status)) { %>
                                                <div class="restricted-status-message mt-2">
                                                    <i class="fas fa-lock me-1"></i>
                                                    This order is in <strong><%= order.status %></strong> state and cannot be updated.
                                                </div>
                                            <% } %>
                                        </div>
                                        <button class="btn btn-primary w-100 mb-3" id="updateOrderStatusBtn" <%= ['Delivered', 'Cancelled', 'Returned'].includes(order.status) ? 'disabled' : '' %>>
                                            <i class="fas fa-save me-1"></i> Update Status
                                        </button>
                                    <% } %>
                                    
                                    <div class="d-flex gap-2 mt-3">
                                        <button class="btn btn-outline-secondary flex-grow-1 btn-sm">
                                            <i class="fas fa-envelope me-1"></i> Email Customer
                                        </button>
                                        <button class="btn btn-outline-secondary flex-grow-1 btn-sm">
                                            <i class="fas fa-comment me-1"></i> Add Note
                                        </button>
                                    </div>
>>>>>>> Stashed changes
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="d-flex gap-3 mt-4">
                    <a href="/admin/adminorder" class="btn btn-go-back btn-outline-secondary">Go Back</a>
                    <% if (order.status !== 'Cancelled' && order.status !== 'Delivered') { %>
                        <button class="btn btn-cancel btn-danger" onclick="updateOrderStatus('<%= order._id %>', 'Cancelled')">Cancel Order</button>
                    <% } %>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <span>Order Status</span>
                        <% if (order.status !== 'Cancelled') { %>
                            <select class="form-select status-select w-auto" data-order-id="<%= order._id %>">
                                <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                                <option value="Processing" <%= order.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                                <option value="Confirmed" <%= order.status === 'Confirmed' ? 'selected' : '' %>>Confirmed</option>
                                <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelle the Order</option>
                                <!-- <option value="Return Requested" <%= order.status === 'Return Requested' ? 'selected' : '' %>>Return Requested</option> -->
                            </select>
                        <% } else { %>
                            <span class="badge badge-cancelled">Cancelled</span>
                        <% } %>
                    </div>
                    <div class="card-body">
                        <div class="order-status-tracker">
                            <div class="status-line"></div>
                            <% 
                                const statusSteps = order.status === 'Cancelled' ? [
                                    { title: 'Cancelled', icon: 'fa-times', date: order.date, completed: true, current: false }
                                ] : [
                                    { title: 'Order Placed', icon: 'fa-check', date: order.date, completed: ['Pending', 'Processing', 'Confirmed', 'Shipped', 'Delivered', 'Cancelled', 'Return Requested'].includes(order.status) },
                                    { title: 'Processing', icon: 'fa-spinner', date: order.date, completed: ['Processing', 'Confirmed', 'Shipped', 'Delivered'].includes(order.status), current: order.status === 'Processing' },
                                    { title: 'Packed', icon: 'fa-box', date: null, completed: ['Confirmed', 'Shipped', 'Delivered'].includes(order.status), current: order.status === 'Confirmed' },
                                    { title: 'Shipping', icon: 'fa-truck', date: null, completed: ['Shipped', 'Delivered'].includes(order.status), current: order.status === 'Shipped' },
                                    { title: 'Delivered', icon: 'fa-check-double', date: null, completed: order.status === 'Delivered', current: order.status === 'Delivered' },
                                ];
                            %>
                            <% statusSteps.forEach(step => { %>
                                <div class="status-step">
                                    <div class="status-icon <%= step.completed ? 'completed' : step.current ? 'current' : 'pending' %>">
                                        <i class="fa-solid <%= step.icon %>"></i>
                                    </div>
                                    <div class="status-content">
                                        <h6 class="status-title"><%= step.title %></h6>
                                        <p class="status-date">
                                            <% if (step.completed && step.date) { %>
                                                <%= new Date(step.date).toLocaleString('en-IN', { day: 'numeric', month: 'short', year: 'numeric', hour: 'numeric', minute: 'numeric' }) %>
                                            <% } else if (step.current) { %>
                                                In progress
                                            <% } else { %>
                                                Pending
                                            <% } %>
                                        </p>
                                    </div>
                                </div>
                            <% }) %>
                        </div>
<<<<<<< Updated upstream
=======
                        <div class="alert alert-warning mt-3" id="statusWarning" style="display: none;">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <span>Warning: Setting an item to "Cancelled" or "Returned" status is final and cannot be undone.</span>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveItemStatusBtn">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Approve Return Modal -->
    <div class="modal fade" id="approveReturnModal" tabindex="-1" aria-labelledby="approveReturnModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="approveReturnModalLabel">Approve Return Request</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-info mb-3">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>Important Information</strong>
                        <p class="mb-0 mt-1">Approving this return request will change the order status to "Return Approved" and allow the customer to proceed with returning the items.</p>
                    </div>
                    <p>Are you sure you want to approve this return request?</p>
                    <p><strong>This action cannot be undone.</strong></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" id="confirmApproveReturnBtn">Approve Return</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Reject Return Modal -->
    <div class="modal fade" id="rejectReturnModal" tabindex="-1" aria-labelledby="rejectReturnModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="rejectReturnModalLabel">Reject Return Request</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning mb-3">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Important Information</strong>
                        <p class="mb-0 mt-1">Rejecting this return request will deny the customer's request to return the items and change the order status back to "Delivered".</p>
                    </div>
                    <p>Please provide a reason for rejecting the return request:</p>
                    <div class="mb-3">
                        <label for="itemRejectionReason" class="form-label">Reason for rejection (required)</label>
                        <textarea class="form-control" id="itemRejectionReason" rows="3" maxlength="500" required></textarea>
                        <div class="invalid-feedback">Please provide a reason for the rejection.</div>
                    </div>
                    <p><strong>This action cannot be undone.</strong></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmRejectReturnBtn">Reject Return</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Approve Item Return Modal -->
    <div class="modal fade" id="approveItemReturnModal" tabindex="-1" aria-labelledby="approveItemReturnModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="approveItemReturnModalLabel">Approve Item Return</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-info mb-3">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>Important Information</strong>
                        <p class="mb-0 mt-1">Approving this item return will change the item status to "Return Approved" and allow the customer to proceed with returning this specific item.</p>
                    </div>
                    <p>Are you sure you want to approve the return for this item?</p>
                    <p><strong>This action cannot be undone.</strong></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" id="confirmApproveItemReturnBtn">Approve Return</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Reject Item Return Modal -->
    <div class="modal fade" id="rejectItemReturnModal" tabindex="-1" aria-labelledby="rejectItemReturnModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="rejectItemReturnModalLabel">Reject Item Return</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning mb-3">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Important Information</strong>
                        <p class="mb-0 mt-1">Rejecting this item return will deny the customer's request to return this specific item and change its status back to "Delivered".</p>
                    </div>
                    <p>Please provide a reason for rejecting the return:</p>
                    <div class="mb-3">
                        <label for="itemRejectionReason" class="form-label">Reason for rejection (required)</label>
                        <textarea class="form-control" id="itemRejectionReason" rows="3" maxlength="500" required></textarea>
                        <div class="invalid-feedback">Please provide a reason for the rejection.</div>
>>>>>>> Stashed changes
                    </div>
                    <p><strong>This action cannot be undone.</strong></p>
                </div>
            </div>
        </div>
    </div>

<<<<<<< Updated upstream
=======
    <!-- Complete Item Return Modal -->
    <div class="modal fade" id="completeItemReturnModal" tabindex="-1" aria-labelledby="completeItemReturnModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="completeItemReturnModalLabel">Complete Return</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-info mb-3">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>Important Information</strong>
                    </div>
                    <p>Are you sure you want to complete the return for this item? This will:</p>
                    <ul>
                        <li>Change the item status to "Returned"</li>
                        <li>Restore the product stock</li>
                        <li>Process a refund of <span id="refundAmount" class="fw-bold text-success"></span> to the customer's wallet</li>
                    </ul>
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <span>Warning: This action is final and cannot be undone.</span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" id="confirmCompleteItemReturnBtn">Complete Return</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Status History Modal -->
    <div class="modal fade" id="statusHistoryModal" tabindex="-1" role="dialog" aria-labelledby="statusHistoryModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="statusHistoryModalLabel">Status History</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <h6 id="statusHistoryItemName"></h6>
                    <div class="status-timeline" id="statusTimeline"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Final State Confirmation Modal -->
    <div class="modal fade" id="finalStateConfirmModal" tabindex="-1" aria-labelledby="finalStateConfirmModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="finalStateConfirmModalLabel">Confirm Final Status</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Warning:</strong> You are about to set this item to a final status.
                    </div>
                    <p>Setting an item to <strong id="finalStatusName"></strong> status is <strong>permanent</strong> and cannot be changed later.</p>
                    <p>Are you sure you want to proceed?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmFinalStateBtn">Yes, Make Final</button>
                </div>
            </div>
        </div>
    </div>
>>>>>>> Stashed changes

    <div class="toast-container position-fixed top-0 end-0 p-3">
        <div id="orderToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="3000">
            <div class="toast-header">
                <strong class="me-auto">Order Action</strong>
                <small>Just now</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body"></div>
        </div>
    </div>


    <div class="custom-modal" id="confirmModal">
        <div class="modal-content">
            <button type="button" class="modal-close" onclick="closeConfirmModal()">×</button>
            <h2 class="modal-title">ARE YOU SURE!!</h2>
            <p class="modal-message" id="confirmMessage">Do you want to Cancel the order?</p>
            <div class="modal-buttons">
                <button class="btn btn-modal-cancel" onclick="closeConfirmModal()">Cancel</button>
                <button class="btn btn-modal-confirm" onclick="confirmAction()">Yes, cancel</button>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
<<<<<<< Updated upstream
    <script>

        let currentOrderId = null;
        let currentStatus = null;

        function showConfirmModal(orderId, status) {
            currentOrderId = orderId;
            currentStatus = status;
            
      
            const confirmMessage = document.getElementById('confirmMessage');
            if (status === 'Cancelled') {
                confirmMessage.textContent = "Do you want to Cancel the order?";
                document.querySelector('.btn-modal-confirm').textContent = "Yes, cancel";
            } else {
                confirmMessage.textContent = `Do you want to change the status to ${status}?`;
                document.querySelector('.btn-modal-confirm').textContent = "Yes, confirm";
            }
            
            document.getElementById('confirmModal').classList.add('show');
        }
        
 
        function closeConfirmModal() {
            document.getElementById('confirmModal').classList.remove('show');
            currentOrderId = null;
            currentStatus = null;
        }
        
      
        function confirmAction() {
            if (currentOrderId && currentStatus) {
  
                updateOrderStatusInternal(currentOrderId, currentStatus);
            }
            closeConfirmModal();
        }
        
 
        function updateOrderStatus(orderId, status) {
            showConfirmModal(orderId, status);
        }
        
   
        function updateOrderStatusInternal(orderId, status) {
            fetch("/admin/orders/update-status", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ orderId, status }),
            })
                .then((res) => {
                    return res.json();
                })
                .then((data) => {
                    if (data.success) {
                        showToast("Order status updated successfully");
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showToast(data.message || "Failed to update status", false);
                    }
                })
                .catch((err) => {
                    console.error("Error updating status:", err);
                    showToast("Error updating status", false);
                });
        }
        
        function showToast(message, isSuccess = true) {
            const toastEl = document.getElementById("orderToast");
            const toastBody = toastEl.querySelector(".toast-body");
            toastBody.innerHTML = `<i class="fas ${isSuccess ? 'fa-check-circle text-success' : 'fa-exclamation-triangle text-danger'} me-2"></i>${message}`;
            const toast = new bootstrap.Toast(toastEl);
            toast.show();
        }
        
        document.addEventListener("DOMContentLoaded", function () {
            const statusSelect = document.querySelector(".status-select");
            if (statusSelect) {
                statusSelect.addEventListener("change", function () {
                    const orderId = this.getAttribute("data-order-id");
                    const newStatus = this.value;
                    updateOrderStatus(orderId, newStatus);
                });
            }
        });
        
        function downloadInvoice(orderId) {
  fetch(`/admin/invoices/${orderId}`, {
    method: "GET",
    headers: {
      "Accept": "application/pdf",
    },
  })
    .then(response => {
      if (!response.ok) {
        return response.json().then(err => {
          throw new Error(err.error || "Failed to download invoice");
=======
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.all.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Initialize tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl, {
                    html: true
                });
            });

            // Set progress line width based on order status
            const setProgressLineWidth = () => {
                const progressLine = document.getElementById('progressLine');
                if (!progressLine) return;
                
                const status = '<%= order.status %>';
                let width = 0;
                
                switch(status) {
                    case 'Pending': width = 0; break;
                    case 'Processing': width = 25; break;
                    case 'Confirmed': width = 50; break;
                    case 'Shipped': width = 75; break;
                    case 'Delivered': width = 100; break;
                    case 'Cancelled': width = 0; break;
                    case 'Return Requested': 
                    case 'Return Approved': 
                    case 'Returned': width = 100; break;
                    default: width = 0;
                }
                
                progressLine.style.width = `${width}%`;
            };
            
            setProgressLineWidth();
            
            // Order Items Gallery
            const galleryItems = document.querySelectorAll('.gallery-item');
            galleryItems.forEach(item => {
                item.addEventListener('click', function() {
                    // Remove active class from all items
                    galleryItems.forEach(i => i.classList.remove('active'));
                    // Add active class to clicked item
                    this.classList.add('active');
                    
                    // Scroll to the corresponding table row
                    const itemId = this.getAttribute('data-item-id');
                    const tableRow = document.querySelector(`tr[data-item-id="${itemId}"]`);
                    if (tableRow) {
                        tableRow.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        tableRow.classList.add('highlight');
                        setTimeout(() => {
                            tableRow.classList.remove('highlight');
                        }, 2000);
                    }
                });
            });

            // Copy to clipboard function
            window.copyToClipboard = function(elementId) {
                const element = document.querySelector(`address`);
                const text = element.innerText;
                
                navigator.clipboard.writeText(text).then(() => {
                    showToast('Address copied to clipboard!', true);
                }).catch(err => {
                    console.error('Could not copy text: ', err);
                    showToast('Failed to copy address', false);
                });
            };

            function showToast(message, isSuccess = true) {
                const toastEl = document.getElementById("orderToast");
                const toastBody = toastEl.querySelector(".toast-body");
                toastBody.innerHTML = `<i class="fas ${isSuccess ? 'fa-check-circle text-success' : 'fa-exclamation-triangle text-danger'} me-2"></i>${message}`;
                const toast = new bootstrap.Toast(toastEl);
                toast.show();
            }

            // Function to display status history in a modal
            window.showStatusHistory = function(historyJson, productName) {
                try {
                    const history = JSON.parse(historyJson);
                    const timelineEl = document.getElementById('statusTimeline');
                    const itemNameEl = document.getElementById('statusHistoryItemName');
                    
                    itemNameEl.textContent = productName;
                    timelineEl.innerHTML = '';
                    
                    if (history && history.length > 0) {
                        const timeline = document.createElement('div');
                        timeline.className = 'timeline';
                        
                        history.forEach((entry, index) => {
                            const item = document.createElement('div');
                            item.className = 'timeline-item';
                            
                            const date = new Date(entry.date);
                            const formattedDate = date.toLocaleString();
                            
                            item.innerHTML = `
                                <div class="timeline-badge status-${entry.status.toLowerCase().replace(/\s+/g, '-')}">
                                    <i class="fas fa-circle"></i>
                                </div>
                                <div class="timeline-content">
                                    <h6>${entry.status}</h6>
                                    <p class="text-muted">${formattedDate}</p>
                                    ${entry.note ? `<p>${entry.note}</p>` : ''}
                                </div>
                            `;
                            
                            timeline.appendChild(item);
                        });
                        
                        timelineEl.appendChild(timeline);
                    } else {
                        timelineEl.innerHTML = '<p>No status history available</p>';
                    }
                    
                    const statusHistoryModal = new bootstrap.Modal(document.getElementById('statusHistoryModal'));
                    statusHistoryModal.show();
                } catch (error) {
                    console.error('Error parsing status history:', error);
                    showToast('Error displaying status history', false);
                }
            }

            // Check if order status is Return Requested
            const orderStatus = '<%= order.status %>';
            const isReturnRequested = orderStatus === 'Return Requested';
            const isOrderInFinalState = ['Delivered', 'Cancelled', 'Returned'].includes(orderStatus);

            // Disable item status updates if order is in Return Requested state or final state
            if (isReturnRequested || isOrderInFinalState) {
                document.querySelectorAll('.btn-update-item-status').forEach(btn => {
                    if (!btn.closest('tr').querySelector('.status-return-requested')) {
                        btn.disabled = true;
                        btn.title = isReturnRequested ? 
                            'Cannot update item status while order has a pending return request' : 
                            `Cannot update item status when order is in ${orderStatus} state`;
                    }
                });
            }

            function checkItemUpdateability(itemId) {
                return fetch(`/admin/orders/item/${itemId}/can-update`)
                    .then(res => res.json())
                    .then(data => {
                        return data.canUpdate;
                    })
                    .catch(err => {
                        console.error("Error checking item updateability:", err);
                        return false; // Default to not updatable on error
                    });
            }

            const itemStatusModal = new bootstrap.Modal(document.getElementById('itemStatusModal'));
            const approveReturnModal = new bootstrap.Modal(document.getElementById('approveReturnModal'));
            const rejectReturnModal = new bootstrap.Modal(document.getElementById('rejectReturnModal'));
            const approveItemReturnModal = new bootstrap.Modal(document.getElementById('approveItemReturnModal'));
            const rejectItemReturnModal = new bootstrap.Modal(document.getElementById('rejectItemReturnModal'));
            const completeItemReturnModal = new bootstrap.Modal(document.getElementById('completeItemReturnModal'));
            const finalStateConfirmModal = new bootstrap.Modal(document.getElementById('finalStateConfirmModal'));

            const itemIdInput = document.getElementById('itemIdInput');
            const productNameInput = document.getElementById('productNameInput');
            const itemStatusSelect = document.getElementById('itemStatusSelect');
            const saveItemStatusBtn = document.getElementById('saveItemStatusBtn');
            const confirmApproveReturnBtn = document.getElementById('confirmApproveReturnBtn');
            const confirmRejectReturnBtn = document.getElementById('confirmRejectReturnBtn');
            const confirmApproveItemReturnBtn = document.getElementById('confirmApproveItemReturnBtn');
            const confirmRejectItemReturnBtn = document.getElementById('confirmRejectItemReturnBtn');
            const confirmCompleteItemReturnBtn = document.getElementById('confirmCompleteItemReturnBtn');
            const confirmFinalStateBtn = document.getElementById('confirmFinalStateBtn');
            const itemRejectionReason = document.getElementById('itemRejectionReason');
            const refundAmountSpan = document.getElementById('refundAmount');
            const statusWarning = document.getElementById('statusWarning');
            const finalStatusName = document.getElementById('finalStatusName');

            itemStatusSelect.addEventListener('change', function() {
                const selectedStatus = this.value;
                if (['Cancelled', 'Returned'].includes(selectedStatus)) {
                    statusWarning.style.display = 'block';
                } else {
                    statusWarning.style.display = 'none';
                }
            });

            function showFinalStateAlert(productName, status) {
                Swal.fire({
                    title: 'Status Cannot Be Changed',
                    html: `<p>The product <strong>${productName}</strong> is already in <strong>${status}</strong> state.</p>
                           <p>Items that are cancelled or returned cannot have their status changed.</p>`,
                    icon: 'warning',
                    confirmButtonText: 'Understood',
                    confirmButtonColor: '#3085d6',
                    customClass: {
                        title: 'text-warning',
                        htmlContainer: 'text-left'
                    }
                });
            }

            const updateOrderStatusBtn = document.getElementById('updateOrderStatusBtn');
            updateOrderStatusBtn.addEventListener('click', function() {
                const orderId = '<%= order._id %>';
                const status = document.getElementById('orderStatusSelect').value;
                const currentStatus = '<%= order.status %>';
                
                if (['Delivered', 'Cancelled', 'Returned'].includes(currentStatus)) {
                    Swal.fire({
                        title: 'Cannot Update Order',
                        html: `<p>This order is already in <strong>${currentStatus}</strong> state.</p>
                               <p>Orders that are delivered, cancelled or returned cannot be updated.</p>`,
                        icon: 'error',
                        confirmButtonText: 'Understood',
                        confirmButtonColor: '#3085d6'
                    });
                    return;
                }

                if (['Cancelled', 'Returned'].includes(status)) {
                    finalStatusName.textContent = status;
                    
                    confirmFinalStateBtn.onclick = function() {
                        finalStateConfirmModal.hide();
                        updateOrderStatusRequest(orderId, status);
                    };
                    
                    finalStateConfirmModal.show();
                } else {
                    updateOrderStatusRequest(orderId, status);
                }
            });

            function updateOrderStatusRequest(orderId, status) {
                fetch("/admin/orders/update-status", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ orderId, status }),
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'Order status updated successfully',
                            icon: 'success',
                            confirmButtonText: 'OK',
                            timer: 1500
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        if (data.isFinalState) {
                            Swal.fire({
                                title: 'Cannot Update Order',
                                html: data.message,
                                icon: 'error',
                                confirmButtonText: 'Understood',
                                confirmButtonColor: '#3085d6'
                            });
                        } else {
                            showToast(data.message || "Failed to update status", false);
                        }
                    }
                })
                .catch(err => {
                    console.error("Error updating status:", err);
                    showToast("Error updating status: " + err.message, false);
                });
            }

            const updateItemStatusBtns = document.querySelectorAll('.btn-update-item-status');
            updateItemStatusBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const itemId = this.getAttribute('data-item-id');
                    const currentStatus = this.getAttribute('data-current-status');
                    const productName = this.getAttribute('data-product-name');
                    
                    // Check if order is in Return Requested state
                    if (isReturnRequested) {
                        Swal.fire({
                            title: 'Action Not Allowed',
                            html: `<p>Cannot update item status while order has a pending return request.</p>
                                   <p>You must first approve or reject the return request.</p>`,
                            icon: 'warning',
                            confirmButtonText: 'Understood',
                            confirmButtonColor: '#3085d6'
                        });
                        return;
                    }
                    
                    // Check if order is in final state
                    if (isOrderInFinalState) {
                        Swal.fire({
                            title: 'Action Not Allowed',
                            html: `<p>Cannot update item status when order is in <strong>${orderStatus}</strong> state.</p>`,
                            icon: 'warning',
                            confirmButtonText: 'Understood',
                            confirmButtonColor: '#3085d6'
                        });
                        return;
                    }
                    
                    if (['Cancelled', 'Returned'].includes(currentStatus)) {
                        showFinalStateAlert(productName, currentStatus);
                        return;
                    }
                    
                    checkItemUpdateability(itemId).then(canUpdate => {
                        if (!canUpdate) {
                            showFinalStateAlert(productName, currentStatus);
                            return;
                        }
                        
                        itemIdInput.value = itemId;
                        productNameInput.value = productName;
                        itemStatusSelect.value = currentStatus;
                        statusWarning.style.display = 'none';
                        itemStatusModal.show();
                    });
                });
            });

            saveItemStatusBtn.addEventListener('click', function() {
                const itemId = itemIdInput.value;
                const status = itemStatusSelect.value;
                const productName = productNameInput.value;

                if (['Cancelled', 'Returned'].includes(status)) {
                    finalStatusName.textContent = status;
                    
                    confirmFinalStateBtn.onclick = function() {
                        finalStateConfirmModal.hide();
                        updateItemStatusRequest(itemId, status, productName);
                    };
                    
                    finalStateConfirmModal.show();
                    itemStatusModal.hide();
                } else {
                    updateItemStatusRequest(itemId, status, productName);
                    itemStatusModal.hide();
                }
            });

            function updateItemStatusRequest(itemId, status, productName) {
                fetch(`/admin/orders/item/${itemId}/update-status`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ orderItemId: itemId, status }),
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'Item status updated successfully',
                            icon: 'success',
                            confirmButtonText: 'OK',
                            timer: 1500
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        if (data.isFinalState) {
                            showFinalStateAlert(productName, data.currentStatus || status);
                        } else {
                            showToast(data.message || "Failed to update item status", false);
                        }
                    }
                })
                .catch(err => {
                    console.error("Error updating item status:", err);
                    showToast("Error updating item status: " + err.message, false);
                });
            }

            // Approve Return Request (Order Level)
            confirmApproveReturnBtn.addEventListener('click', function() {
                const orderId = '<%= order._id %>';
                
                Swal.fire({
                    title: 'Processing...',
                    text: 'Approving return request',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                
                fetch(`/admin/orders/return/${orderId}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ action: 'approve' })
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: 'Return Approved!',
                            text: 'Return request approved successfully',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: data.message || "Failed to approve return",
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                })
                .catch(err => {
                    console.error("Error approving return:", err);
                    Swal.fire({
                        title: 'Error',
                        text: "Error approving return: " + err.message,
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                });
                
                approveReturnModal.hide();
            });

            // Reject Return Request (Order Level)
            confirmRejectReturnBtn.addEventListener('click', function() {
                const orderId = '<%= order._id %>';
                const rejectReason = document.getElementById('itemRejectionReason').value.trim();
                
                if (!rejectReason) {
                    document.getElementById('itemRejectionReason').classList.add('is-invalid');
                    return;
                }
                
                Swal.fire({
                    title: 'Processing...',
                    text: 'Rejecting return request',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                
                fetch(`/admin/orders/return/${orderId}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ action: 'reject', rejectionReason: rejectReason })
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: 'Return Rejected!',
                            text: 'Return request rejected successfully',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: data.message || "Failed to reject return",
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                })
                .catch(err => {
                    console.error("Error rejecting return:", err);
                    Swal.fire({
                        title: 'Error',
                        text: "Error rejecting return: " + err.message,
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                });
                
                rejectReturnModal.hide();
                document.getElementById('itemRejectionReason').value = '';
            });

            // Approve Item Return (Individual Item)
            const approveItemReturnBtns = document.querySelectorAll('.btn-approve-item-return');
            approveItemReturnBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const itemId = this.getAttribute('data-item-id');
                    
                    confirmApproveItemReturnBtn.setAttribute('data-item-id', itemId);
                    approveItemReturnModal.show();
                });
            });

            confirmApproveItemReturnBtn.addEventListener('click', function() {
                const itemId = this.getAttribute('data-item-id');
                
                Swal.fire({
                    title: 'Processing...',
                    text: 'Approving item return',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                
                fetch(`/admin/orders/item/${itemId}/approve-return`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" }
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: 'Return Approved!',
                            text: 'Item return approved successfully',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: data.message || "Failed to approve item return",
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                })
                .catch(err => {
                    console.error("Error approving item return:", err);
                    Swal.fire({
                        title: 'Error',
                        text: "Error approving item return: " + err.message,
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                });
                
                approveItemReturnModal.hide();
            });

            // Reject Item Return (Individual Item)
            const rejectItemReturnBtns = document.querySelectorAll('.btn-reject-item-return');
            rejectItemReturnBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const itemId = this.getAttribute('data-item-id');
                    
                    confirmRejectItemReturnBtn.setAttribute('data-item-id', itemId);
                    rejectItemReturnModal.show();
                });
            });

            confirmRejectItemReturnBtn.addEventListener('click', function() {
                const itemId = this.getAttribute('data-item-id');
                const rejectReason = document.getElementById('itemRejectionReason').value.trim();
                
                if (!rejectReason) {
                    document.getElementById('itemRejectionReason').classList.add('is-invalid');
                    return;
                }
                
                Swal.fire({
                    title: 'Processing...',
                    text: 'Rejecting item return',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                
                fetch(`/admin/orders/item/${itemId}/reject-return`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ rejectReason })
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: 'Return Rejected!',
                            text: 'Item return rejected successfully',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: data.message || "Failed to reject item return",
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                })
                .catch(err => {
                    console.error("Error rejecting item return:", err);
                    Swal.fire({
                        title: 'Error',
                        text: "Error rejecting item return: " + err.message,
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                });
                
                rejectItemReturnModal.hide();
                document.getElementById('itemRejectionReason').value = '';
            });

            const completeItemReturnBtns = document.querySelectorAll('.btn-complete-item-return');
            completeItemReturnBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const itemId = this.getAttribute('data-item-id');
                    const refundAmount = this.getAttribute('data-refund-amount');
                    
                    refundAmountSpan.textContent = `₹${parseFloat(refundAmount).toFixed(2)}`;
                    
                    confirmCompleteItemReturnBtn.setAttribute('data-item-id', itemId);
                    completeItemReturnModal.show();
                });
            });

            confirmCompleteItemReturnBtn.addEventListener('click', function() {
                const itemId = this.getAttribute('data-item-id');
                
                Swal.fire({
                    title: 'Processing...',
                    text: 'Completing return and processing refund',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                
                fetch(`/admin/orders/item/${itemId}/complete-return`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" }
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: 'Return Completed!',
                            html: `
                            <div class="text-left">
                                <p>Return completed successfully.</p>
                                <div class="alert alert-success mt-3">
                                    <h6 class="alert-heading">Refund Details:</h6>
                                    <p class="mb-1">Amount: <strong>₹${data.refundAmount.toFixed(2)}</strong></p>
                                    <p class="mb-1">Credited to: <strong>${data.userName}'s Wallet</strong></p>
                                    <p class="mb-0">New Wallet Balance: <strong>₹${data.walletBalance.toFixed(2)}</strong></p>
                                </div>
                            </div>
                            `,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: data.message || "Failed to complete return",
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                })
                .catch(err => {
                    console.error("Error completing return:", err);
                    Swal.fire({
                        title: 'Error',
                        text: "Error completing return: " + err.message,
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                });
                
                completeItemReturnModal.hide();
            });

            // Handle input validation
            document.querySelectorAll('textarea[required]').forEach(textarea => {
                textarea.addEventListener('input', function() {
                    this.classList.remove('is-invalid');
                });
            });

            // Add animation to newly loaded elements
            document.querySelectorAll('.animate-fade-in, .animate-slide-in-right').forEach(el => {
                el.classList.add('animate-fade-in');
            });
>>>>>>> Stashed changes
        });
      }
      return response.blob();
    })
    .then(blob => {
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `invoice-${orderId}.pdf`;
      document.body.appendChild(a);
      a.click();
      a.remove();
      window.URL.revokeObjectURL(url);
    })
    .catch(err => {
      console.error("Error downloading invoice:", err);
      showToast(err.message, false);
    });
}
    </script>
</body>
</html>