<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Elite Wear - Order Details</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="/adminStyle/adminOrderdetails.css">
    <!-- Add SweetAlert2 CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.min.css">
    <style>
        /* Additional styles for final state items */
        .final-state {
            background-color: #f8f9fa;
            color: #6c757d;
        }
        
        .final-state-badge {
            position: relative;
        }
        
        .final-state-badge::after {
            content: "Final";
            position: absolute;
            top: -8px;
            right: -8px;
            font-size: 9px;
           
            color: white;
            padding: 1px 4px;
            border-radius: 3px;
            font-weight: bold;
        }
        
        .tooltip-inner {
            max-width: 250px;
            text-align: left;
        }
    </style>
</head>
<body>
    <div class="container-fluid p-0">
        <div class="row g-0">
            <%- include("../partials/admin/header") %>
            <div class="col">
                <div class="main-content">
                    <div class="page-header">
                        <h4>Order Details</h4>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item">
                                    <a href="/admin" class="text-decoration-none">Dashboard</a>
                                </li>
                                <li class="breadcrumb-item">
                                    <a href="/admin/adminorder" class="text-decoration-none">Orders</a>
                                </li>
                                <li class="breadcrumb-item active" aria-current="page">Order #<%= order.orderNumber %></li>
                            </ol>
                        </nav>
                    </div>

                    <div class="order-details-container">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="card mb-4">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h5 class="mb-0">Order Information</h5>
                                        <div>
                                            <a href="/admin/invoices/<%= order._id %>" class="btn btn-sm btn-outline-primary">
                                                <i class="fas fa-file-invoice me-1"></i> Download Invoice
                                            </a>
                                        </div>
                                    </div>
                                    <div class="card-body">
                                        <div class="row mb-3">
                                            <div class="col-md-6">
                                                <p><strong>Order ID:</strong> <%= order.orderNumber %></p>
                                                <p><strong>Date:</strong> <%= order.formattedDate %></p>
                                                <p><strong>Payment Method:</strong> <%= order.paymentMethod %></p>
                                                <p><strong>Payment Status:</strong> 
                                                    <span class="badge <%= order.paymentStatus === 'Paid' ? 'bg-success' : 'bg-warning' %>">
                                                        <%= order.paymentStatus %>
                                                    </span>
                                                </p>
                                            </div>
                                            <div class="col-md-6">
                                                <p><strong>Customer:</strong> <%= order.customer.fullname %></p>
                                                <p><strong>Email:</strong> <%= order.customer.email %></p>
                                                <p><strong>Order Status:</strong> 
                                                    <span class="badge status-badge status-<%= order.status.toLowerCase().replace(/\s+/g, '-') %> <%= ['Cancelled', 'Returned'].includes(order.status) ? 'final-state-badge' : '' %>">
                                                        <%= order.status %>
                                                    </span>
                                                    <% if (['Cancelled', 'Returned'].includes(order.status)) { %>
                                                        <i class="fas fa-lock ms-1 text-secondary" 
                                                           data-bs-toggle="tooltip" 
                                                           title="This order is in a final state and cannot be modified"></i>
                                                    <% } %>
                                                </p>
                                                <p><strong>Total Amount:</strong> ₹<%= order.total.toFixed(2) %></p>
                                            </div>
                                        </div>
                                        
                                        <% if (order.status === 'Return Requested') { %>
                                        <div class="alert alert-info">
                                            <h6 class="alert-heading">Return Request</h6>
                                            <p>This order has a pending return request. Please review and take action.</p>
                                            <div class="mt-2">
                                                <button class="btn btn-success btn-sm me-2" data-bs-toggle="modal" data-bs-target="#approveReturnModal" data-order-id="<%= order._id %>">
                                                    <i class="fas fa-check me-1"></i> Approve Return
                                                </button>
                                                <button class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#rejectReturnModal" data-order-id="<%= order._id %>">
                                                    <i class="fas fa-times me-1"></i> Reject Return
                                                </button>
                                            </div>
                                        </div>
                                        <% } %>
                                    </div>
                                </div>
                                
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h5 class="mb-0">Order Items</h5>
                                    </div>
                                    <div class="card-body p-0">
                                        <div class="table-responsive">
                                            <table class="table mb-0">
                                                <thead>
                                                    <tr>
                                                        <th>Product</th>
                                                        <th>Size</th>
                                                        <th>Price</th>
                                                        <th>Quantity</th>
                                                        <th>Total</th>
                                                        <th>Status</th>
                                                        <th>Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <% order.orderItems.forEach(item => { %>
                                                    <tr class="<%= item.refunded ? 'returned-item' : '' %> <%= ['Cancelled', 'Returned'].includes(item.status) ? 'final-state' : '' %>" 
                                                        data-item-id="<%= item._id %>" 
                                                        data-item-status="<%= item.status %>">
                                                        <td>
                                                            <div class="d-flex align-items-center">
                                                                <img src="<%= item.itemImage %>" alt="<%= item.product_name %>" class="product-image me-2">
                                                                <span><%= item.product_name %></span>
                                                            </div>
                                                        </td>
                                                        <td><%= item.size %></td>
                                                        <td>₹<%= item.price.toFixed(2) %></td>
                                                        <td><%= item.quantity %></td>
                                                        <td>₹<%= item.total_amount.toFixed(2) %></td>
                                                        <td>
                                                            <span class="badge status-badge status-<%= item.status.toLowerCase().replace(/\s+/g, '-') %> <%= ['Cancelled', 'Returned'].includes(item.status) ? 'final-state-badge' : '' %>">
                                                                <%= item.status %>
                                                                <% if (item.refunded) { %>
                                                                <span class="refund-badge" title="Refunded to wallet">
                                                                    <i class="fas fa-wallet"></i>
                                                                </span>
                                                                <% } %>
                                                            </span>
                                                            <% if (['Cancelled', 'Returned'].includes(item.status)) { %>
                                                                <i class="fas fa-lock ms-1 text-secondary" 
                                                                   data-bs-toggle="tooltip" 
                                                                   title="This item is in a final state and cannot be modified"></i>
                                                            <% } %>
                                                            <% if (item.statusHistory && item.statusHistory.length > 0) { %>
                                                                <button type="button" class="btn btn-sm btn-link p-0 ms-1" 
                                                                        data-bs-toggle="tooltip" data-placement="top" 
                                                                        title="View Status History"
                                                                        onclick="showStatusHistory('<%= JSON.stringify(item.statusHistory).replace(/'/g, '\\\'') %>', '<%= item.product_name %>')">
                                                                    <i class="fas fa-history"></i>
                                                                </button>
                                                            <% } %>
                                                        </td>
                                                        <td>
                                                            <div class="dropdown">
                                                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle item-action-btn" 
                                                                        type="button" 
                                                                        id="itemActionDropdown<%= item._id %>" 
                                                                        data-bs-toggle="dropdown" 
                                                                        aria-expanded="false"
                                                                        <%= ['Cancelled', 'Returned'].includes(item.status) ? 'disabled' : '' %>>
                                                                    Actions
                                                                </button>
                                                                <ul class="dropdown-menu" aria-labelledby="itemActionDropdown<%= item._id %>">
                                                                    <li>
                                                                        <button class="dropdown-item btn-update-item-status" 
                                                                                data-item-id="<%= item._id %>" 
                                                                                data-current-status="<%= item.status %>"
                                                                                data-product-name="<%= item.product_name %>"
                                                                                <%= ['Cancelled', 'Returned'].includes(item.status) ? 'disabled' : '' %>>
                                                                            <i class="fas fa-edit me-1"></i> Update Status
                                                                        </button>
                                                                    </li>
                                                                    
                                                                    <% if (item.status === 'Return Requested') { %>
                                                                    <li>
                                                                        <button class="dropdown-item btn-approve-item-return" data-item-id="<%= item._id %>">
                                                                            <i class="fas fa-check me-1"></i> Approve Return
                                                                        </button>
                                                                    </li>
                                                                    <li>
                                                                        <button class="dropdown-item btn-reject-item-return" data-item-id="<%= item._id %>">
                                                                            <i class="fas fa-times me-1"></i> Reject Return
                                                                        </button>
                                                                    </li>
                                                                    <% } %>
                                                                    
                                                                    <% if (item.status === 'Return Approved') { %>
                                                                    <li>
                                                                        <button class="dropdown-item btn-complete-item-return" 
                                                                               data-item-id="<%= item._id %>"
                                                                               data-refund-amount="<%= item.total_amount %>">
                                                                            <i class="fas fa-check-circle me-1"></i> Complete Return
                                                                        </button>
                                                                    </li>
                                                                    <% } %>
                                                                    
                                                                    <% if (item.refunded) { %>
                                                                    <li>
                                                                        <button class="dropdown-item" disabled>
                                                                            <i class="fas fa-wallet me-1"></i> Refunded: ₹<%= item.refundAmount.toFixed(2) %>
                                                                        </button>
                                                                    </li>
                                                                    <% } %>
                                                                    
                                                                    <% if (['Cancelled', 'Returned'].includes(item.status)) { %>
                                                                    <li>
                                                                        <button class="dropdown-item" disabled>
                                                                            <i class="fas fa-lock me-1"></i> Status Locked
                                                                        </button>
                                                                    </li>
                                                                    <% } %>
                                                                </ul>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    <% }); %>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                                
                                <% if (order.orderItems.some(item => item.refunded)) { %>
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h5 class="mb-0">Refund Summary</h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="table-responsive">
                                            <table class="table mb-0">
                                                <thead>
                                                    <tr>
                                                        <th>Product</th>
                                                        <th>Refund Amount</th>
                                                        <th>Refund Date</th>
                                                        <th>Status</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <% order.orderItems.filter(item => item.refunded).forEach(item => { %>
                                                    <tr>
                                                        <td>
                                                            <div class="d-flex align-items-center">
                                                                <img src="<%= item.itemImage %>" alt="<%= item.product_name %>" class="product-image me-2">
                                                                <span><%= item.product_name %></span>
                                                            </div>
                                                        </td>
                                                        <td class="refund-amount">₹<%= item.refundAmount.toFixed(2) %></td>
                                                        <td><%= new Date(item.refundDate).toLocaleString() %></td>
                                                        <td>
                                                            <span class="badge bg-success">
                                                                <i class="fas fa-check-circle me-1"></i> Refunded to Wallet
                                                            </span>
                                                        </td>
                                                    </tr>
                                                    <% }); %>
                                                </tbody>
                                            </table>
                                        </div>
                                        
                                        <div class="refund-info mt-3">
                                            <h6><i class="fas fa-info-circle me-2"></i>Refund Information</h6>
                                            <p>All refunds are processed to the customer's wallet balance and can be used for future purchases.</p>
                                            <p>The customer can view their wallet balance and transaction history in their account dashboard.</p>
                                        </div>
                                    </div>
                                </div>
                                <% } %>
                                
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h5 class="mb-0">Order Timeline</h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="order-timeline">
                                            <% if (order.statusHistory && order.statusHistory.length > 0) { %>
                                                <% order.statusHistory.forEach((entry, index) => { %>
                                                    <div class="timeline-item">
                                                        <div class="timeline-badge status-<%= entry.status.toLowerCase().replace(/\s+/g, '-') %>">
                                                            <i class="fas fa-circle"></i>
                                                        </div>
                                                        <div class="timeline-content">
                                                            <h6><%= entry.status %></h6>
                                                            <p class="text-muted"><%= new Date(entry.date).toLocaleString() %></p>
                                                            <% if (entry.note) { %>
                                                                <p><%= entry.note %></p>
                                                            <% } %>
                                                        </div>
                                                    </div>
                                                <% }); %>
                                            <% } else { %>
                                                <p>No status history available</p>
                                            <% } %>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-md-4">
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h5 class="mb-0">Shipping Address</h5>
                                    </div>
                                    <div class="card-body">
                                        <address>
                                            <strong><%= order.address.fullname || 'N/A' %></strong><br>
                                            <%= order.address.district || 'N/A' %><br>
                                            <%= order.address.city || 'N/A' %>, <%= order.address.state || 'N/A' %> <%= order.address.pincode || 'N/A' %><br>
                                            <%= order.address.landmark || 'N/A' %><br>
                                            <abbr title="Phone"> Phone :</abbr> <%= order.address.mobile || 'N/A' %>
                                        </address>
                                    </div>
                                </div>
                                
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h5 class="mb-0">Order Summary</h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between mb-2">
                                            <span>Subtotal:</span>
                                            <span>₹<%= order.total.toFixed(2) %></span>
                                        </div>
                                        <div class="d-flex justify-content-between mb-2">
                                            <span>Shipping:</span>
                                            <span>₹0.00</span>
                                        </div>
                                        <div class="d-flex justify-content-between mb-2">
                                            <span>Tax:</span>
                                            <span>₹0.00</span>
                                        </div>
                                        <hr>
                                        <div class="d-flex justify-content-between fw-bold">
                                            <span>Total:</span>
                                            <span>₹<%= order.total.toFixed(2) %></span>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h5 class="mb-0">Order Actions</h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="mb-3">
                                            <label for="orderStatusSelect" class="form-label">Update Order Status</label>
                                            <select class="form-select" id="orderStatusSelect" <%= ['Cancelled', 'Returned'].includes(order.status) ? 'disabled' : '' %>>
                                                <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                                                <option value="Processing" <%= order.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                                                <option value="Confirmed" <%= order.status === 'Confirmed' ? 'selected' : '' %>>Confirmed</option>
                                                <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                                <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                                <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                            </select>
                                            <% if (['Cancelled', 'Returned'].includes(order.status)) { %>
                                                <div class="form-text text-danger">
                                                    <i class="fas fa-exclamation-circle me-1"></i>
                                                    This order is in <%= order.status %> state and cannot be updated.
                                                </div>
                                            <% } %>
                                        </div>
                                        <button class="btn btn-primary w-100" id="updateOrderStatusBtn" <%= ['Cancelled', 'Returned'].includes(order.status) ? 'disabled' : '' %>>
                                            Update Status
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Item Status Update Modal -->
    <div class="modal fade" id="itemStatusModal" tabindex="-1" aria-labelledby="itemStatusModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="itemStatusModalLabel">Update Item Status</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="itemStatusUpdateForm">
                        <input type="hidden" id="itemIdInput">
                        <input type="hidden" id="productNameInput">
                        <div class="mb-3">
                            <label for="itemStatusSelect" class="form-label">Select new status</label>
                            <select class="form-select" id="itemStatusSelect">
                                <option value="Pending">Pending</option>
                                <option value="Processing">Processing</option>
                                <option value="Confirmed">Confirmed</option>
                                <option value="Shipped">Shipped</option>
                                <option value="Delivered">Delivered</option>
                                <option value="Cancelled">Cancelled</option>
                            </select>
                        </div>
                        <div class="alert alert-warning mt-3" id="statusWarning" style="display: none;">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <span>Warning: Setting an item to "Cancelled" or "Returned" status is final and cannot be undone.</span>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveItemStatusBtn">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Approve Item Return Modal -->
    <div class="modal fade" id="approveItemReturnModal" tabindex="-1" aria-labelledby="approveItemReturnModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="approveItemReturnModalLabel">Approve Return</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to approve the return for this item? This will change the item status to "Return Approved".</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" id="confirmApproveItemReturnBtn">Approve Return</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Reject Item Return Modal -->
    <div class="modal fade" id="rejectItemReturnModal" tabindex="-1" aria-labelledby="rejectItemReturnModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="rejectItemReturnModalLabel">Reject Return</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Please provide a reason for rejecting the return.</p>
                    <div class="mb-3">
                        <label for="itemRejectionReason" class="form-label">Reason for rejection (required)</label>
                        <textarea class="form-control" id="itemRejectionReason" rows="3" maxlength="500" required></textarea>
                        <div class="invalid-feedback">Please provide a reason for the rejection.</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmRejectItemReturnBtn">Reject Return</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Update the Complete Item Return Modal to show the refund amount -->
    <div class="modal fade" id="completeItemReturnModal" tabindex="-1" aria-labelledby="completeItemReturnModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="completeItemReturnModalLabel">Complete Return</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to complete the return for this item? This will:</p>
                    <ul>
                        <li>Change the item status to "Returned"</li>
                        <li>Restore the product stock</li>
                        <li>Process a refund of <span id="refundAmount" class="fw-bold text-success"></span> to the customer's wallet</li>
                    </ul>
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        <span>Note: The refund amount will be added to the customer's existing wallet balance.</span>
                    </div>
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <span>Warning: This action is final and cannot be undone.</span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" id="confirmCompleteItemReturnBtn">Complete Return</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Status History Modal -->
    <div class="modal fade" id="statusHistoryModal" tabindex="-1" role="dialog" aria-labelledby="statusHistoryModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="statusHistoryModalLabel">Status History</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <h6 id="statusHistoryItemName"></h6>
                    <div class="status-timeline" id="statusTimeline"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Final State Confirmation Modal -->
    <div class="modal fade" id="finalStateConfirmModal" tabindex="-1" aria-labelledby="finalStateConfirmModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="finalStateConfirmModalLabel">Confirm Final Status</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Warning:</strong> You are about to set this item to a final status.
                    </div>
                    <p>Setting an item to <strong id="finalStatusName"></strong> status is <strong>permanent</strong> and cannot be changed later.</p>
                    <p>Are you sure you want to proceed?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmFinalStateBtn">Yes, Make Final</button>
                </div>
            </div>
        </div>
    </div>

    <div class="toast-container position-fixed top-0 end-0 p-3">
        <div id="orderToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="5000">
            <div class="toast-header">
                <strong class="me-auto">Order Action</strong>
                <small>Just now</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body"></div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <!-- Add SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.all.min.js"></script>
    <script>
        function showToast(message, isSuccess = true) {
            const toastEl = document.getElementById("orderToast");
            const toastBody = toastEl.querySelector(".toast-body");
            toastBody.innerHTML = `<i class="fas ${isSuccess ? 'fa-check-circle text-success' : 'fa-exclamation-triangle text-danger'} me-2"></i>${message}`;
            const toast = new bootstrap.Toast(toastEl);
            toast.show();
        }

        // Function to display status history in a modal
        function showStatusHistory(historyJson, productName) {
            try {
                const history = JSON.parse(historyJson);
                const timelineEl = document.getElementById('statusTimeline');
                const itemNameEl = document.getElementById('statusHistoryItemName');
                
                itemNameEl.textContent = productName;
                timelineEl.innerHTML = '';
                
                if (history && history.length > 0) {
                    const timeline = document.createElement('div');
                    timeline.className = 'timeline';
                    
                    history.forEach((entry, index) => {
                        const item = document.createElement('div');
                        item.className = 'timeline-item';
                        
                        const date = new Date(entry.date);
                        const formattedDate = date.toLocaleString();
                        
                        item.innerHTML = `
                            <div class="timeline-badge status-${entry.status.toLowerCase().replace(/\s+/g, '-')}">
                                <i class="fas fa-circle"></i>
                            </div>
                            <div class="timeline-content">
                                <h6>${entry.status}</h6>
                                <p class="text-muted">${formattedDate}</p>
                                ${entry.note ? `<p>${entry.note}</p>` : ''}
                            </div>
                        `;
                        
                        timeline.appendChild(item);
                    });
                    
                    timelineEl.appendChild(timeline);
                } else {
                    timelineEl.innerHTML = '<p>No status history available</p>';
                }
                
                const statusHistoryModal = new bootstrap.Modal(document.getElementById('statusHistoryModal'));
                statusHistoryModal.show();
            } catch (error) {
                console.error('Error parsing status history:', error);
                showToast('Error displaying status history', false);
            }
        }

        // Function to check if an item can be updated
        function checkItemUpdateability(itemId) {
            return fetch(`/admin/orders/item/${itemId}/can-update`)
                .then(res => res.json())
                .then(data => {
                    return data.canUpdate;
                })
                .catch(err => {
                    console.error("Error checking item updateability:", err);
                    return false; // Default to not updatable on error
                });
        }

        document.addEventListener("DOMContentLoaded", function () {
            // Initialize modals
            const itemStatusModal = new bootstrap.Modal(document.getElementById('itemStatusModal'));
            const approveItemReturnModal = new bootstrap.Modal(document.getElementById('approveItemReturnModal'));
            const rejectItemReturnModal = new bootstrap.Modal(document.getElementById('rejectItemReturnModal'));
            const completeItemReturnModal = new bootstrap.Modal(document.getElementById('completeItemReturnModal'));
            const finalStateConfirmModal = new bootstrap.Modal(document.getElementById('finalStateConfirmModal'));

            // Get form elements
            const itemIdInput = document.getElementById('itemIdInput');
            const productNameInput = document.getElementById('productNameInput');
            const itemStatusSelect = document.getElementById('itemStatusSelect');
            const saveItemStatusBtn = document.getElementById('saveItemStatusBtn');
            const confirmApproveItemReturnBtn = document.getElementById('confirmApproveItemReturnBtn');
            const confirmRejectItemReturnBtn = document.getElementById('confirmRejectItemReturnBtn');
            const confirmCompleteItemReturnBtn = document.getElementById('confirmCompleteItemReturnBtn');
            const confirmFinalStateBtn = document.getElementById('confirmFinalStateBtn');
            const itemRejectionReason = document.getElementById('itemRejectionReason');
            const refundAmountSpan = document.getElementById('refundAmount');
            const statusWarning = document.getElementById('statusWarning');
            const finalStatusName = document.getElementById('finalStatusName');

            // Show warning when selecting final states
            itemStatusSelect.addEventListener('change', function() {
                const selectedStatus = this.value;
                if (['Cancelled', 'Returned'].includes(selectedStatus)) {
                    statusWarning.style.display = 'block';
                } else {
                    statusWarning.style.display = 'none';
                }
            });

            // Function to show SweetAlert for final state items
            function showFinalStateAlert(productName, status) {
                Swal.fire({
                    title: 'Status Cannot Be Changed',
                    html: `<p>The product <strong>${productName}</strong> is already in <strong>${status}</strong> state.</p>
                           <p>Items that are cancelled or returned cannot have their status changed.</p>`,
                    icon: 'warning',
                    confirmButtonText: 'Understood',
                    confirmButtonColor: '#3085d6',
                    customClass: {
                        title: 'text-warning',
                        htmlContainer: 'text-left'
                    }
                });
            }

            // Update order status
            const updateOrderStatusBtn = document.getElementById('updateOrderStatusBtn');
            updateOrderStatusBtn.addEventListener('click', function() {
                const orderId = '<%= order._id %>';
                const status = document.getElementById('orderStatusSelect').value;
                const currentStatus = '<%= order.status %>';
                
                // Check if order is in a final state
                if (['Cancelled', 'Returned'].includes(currentStatus)) {
                    Swal.fire({
                        title: 'Cannot Update Order',
                        html: `<p>This order is already in <strong>${currentStatus}</strong> state.</p>
                               <p>Orders that are cancelled or returned cannot be updated.</p>`,
                        icon: 'error',
                        confirmButtonText: 'Understood',
                        confirmButtonColor: '#3085d6'
                    });
                    return;
                }

                // If setting to a final state, show confirmation
                if (['Cancelled', 'Returned'].includes(status)) {
                    finalStatusName.textContent = status;
                    
                    // Set up the confirmation button
                    confirmFinalStateBtn.onclick = function() {
                        finalStateConfirmModal.hide();
                        updateOrderStatusRequest(orderId, status);
                    };
                    
                    finalStateConfirmModal.show();
                } else {
                    updateOrderStatusRequest(orderId, status);
                }
            });

            function updateOrderStatusRequest(orderId, status) {
                fetch("/admin/orders/update-status", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ orderId, status }),
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'Order status updated successfully',
                            icon: 'success',
                            confirmButtonText: 'OK',
                            timer: 1500
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        if (data.isFinalState) {
                            Swal.fire({
                                title: 'Cannot Update Order',
                                html: data.message,
                                icon: 'error',
                                confirmButtonText: 'Understood',
                                confirmButtonColor: '#3085d6'
                            });
                        } else {
                            showToast(data.message || "Failed to update status", false);
                        }
                    }
                })
                .catch(err => {
                    console.error("Error updating status:", err);
                    showToast("Error updating status: " + err.message, false);
                });
            }

            // Update item status
            const updateItemStatusBtns = document.querySelectorAll('.btn-update-item-status');
            updateItemStatusBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const itemId = this.getAttribute('data-item-id');
                    const currentStatus = this.getAttribute('data-current-status');
                    const productName = this.getAttribute('data-product-name');
                    
                    // Check if item is in a final state
                    if (['Cancelled', 'Returned'].includes(currentStatus)) {
                        showFinalStateAlert(productName, currentStatus);
                        return;
                    }
                    
                    // Check updateability via API
                    checkItemUpdateability(itemId).then(canUpdate => {
                        if (!canUpdate) {
                            showFinalStateAlert(productName, currentStatus);
                            return;
                        }
                        
                        itemIdInput.value = itemId;
                        productNameInput.value = productName;
                        itemStatusSelect.value = currentStatus;
                        statusWarning.style.display = 'none';
                        itemStatusModal.show();
                    });
                });
            });

            saveItemStatusBtn.addEventListener('click', function() {
                const itemId = itemIdInput.value;
                const status = itemStatusSelect.value;
                const productName = productNameInput.value;

                // If setting to a final state, show confirmation
                if (['Cancelled', 'Returned'].includes(status)) {
                    finalStatusName.textContent = status;
                    
                    // Set up the confirmation button
                    confirmFinalStateBtn.onclick = function() {
                        finalStateConfirmModal.hide();
                        updateItemStatusRequest(itemId, status, productName);
                    };
                    
                    finalStateConfirmModal.show();
                    itemStatusModal.hide();
                } else {
                    updateItemStatusRequest(itemId, status, productName);
                    itemStatusModal.hide();
                }
            });

            function updateItemStatusRequest(itemId, status, productName) {
                fetch(`/admin/orders/item/${itemId}/update-status`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ orderItemId: itemId, status }),
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'Item status updated successfully',
                            icon: 'success',
                            confirmButtonText: 'OK',
                            timer: 1500
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        if (data.isFinalState) {
                            showFinalStateAlert(productName, data.currentStatus || status);
                        } else {
                            showToast(data.message || "Failed to update item status", false);
                        }
                    }
                })
                .catch(err => {
                    console.error("Error updating item status:", err);
                    showToast("Error updating item status: " + err.message, false);
                });
            }

            // Approve item return
            const approveItemReturnBtns = document.querySelectorAll('.btn-approve-item-return');
            approveItemReturnBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const itemId = this.getAttribute('data-item-id');
                    
                    // Check updateability via API
                    checkItemUpdateability(itemId).then(canUpdate => {
                        if (!canUpdate) {
                            showFinalStateAlert("this item", "a final");
                            return;
                        }
                        
                        confirmApproveItemReturnBtn.setAttribute('data-item-id', itemId);
                        approveItemReturnModal.show();
                    });
                });
            });

            confirmApproveItemReturnBtn.addEventListener('click', function() {
                const itemId = this.getAttribute('data-item-id');
                fetch(`/admin/orders/item/${itemId}/approve-return`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" }
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: 'Return Approved!',
                            text: 'Return request approved successfully',
                            icon: 'success',
                            confirmButtonText: 'OK',
                            timer: 1500
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        if (data.isFinalState) {
                            showFinalStateAlert("this item", data.currentStatus || "a final");
                        } else {
                            showToast(data.message || "Failed to approve return", false);
                        }
                    }
                })
                .catch(err => {
                    console.error("Error approving return:", err);
                    showToast("Error approving return: " + err.message, false);
                });
                approveItemReturnModal.hide();
            });

            // Reject item return
            const rejectItemReturnBtns = document.querySelectorAll('.btn-reject-item-return');
            rejectItemReturnBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const itemId = this.getAttribute('data-item-id');
                    
                    // Check updateability via API
                    checkItemUpdateability(itemId).then(canUpdate => {
                        if (!canUpdate) {
                            showFinalStateAlert("this item", "a final");
                            return;
                        }
                        
                        confirmRejectItemReturnBtn.setAttribute('data-item-id', itemId);
                        rejectItemReturnModal.show();
                    });
                });
            });

            confirmRejectItemReturnBtn.addEventListener('click', function() {
                const itemId = this.getAttribute('data-item-id');
                const rejectReason = itemRejectionReason.value.trim();
                
                if (!rejectReason) {
                    itemRejectionReason.classList.add('is-invalid');
                    return;
                }
                
                fetch(`/admin/orders/item/${itemId}/reject-return`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ rejectReason })
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: 'Return Rejected!',
                            text: 'Return request rejected successfully',
                            icon: 'success',
                            confirmButtonText: 'OK',
                            timer: 1500
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        if (data.isFinalState) {
                            showFinalStateAlert("this item", data.currentStatus || "a final");
                        } else {
                            showToast(data.message || "Failed to reject return", false);
                        }
                    }
                })
                .catch(err => {
                    console.error("Error rejecting return:", err);
                    showToast("Error rejecting return: " + err.message, false);
                });
                rejectItemReturnModal.hide();
                itemRejectionReason.value = '';
            });

            // Complete item return
            const completeItemReturnBtns = document.querySelectorAll('.btn-complete-item-return');
            completeItemReturnBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const itemId = this.getAttribute('data-item-id');
                    const itemRow = this.closest('tr');
                    const itemPrice = parseFloat(itemRow.querySelector('td:nth-child(5)').textContent.replace('₹', '').trim());
                    
                    // Check updateability via API
                    checkItemUpdateability(itemId).then(canUpdate => {
                        if (!canUpdate) {
                            showFinalStateAlert("this item", "a final");
                            return;
                        }
                        
                        // Set the refund amount in the modal
                        refundAmountSpan.textContent = `₹${itemPrice.toFixed(2)}`;
                        
                        confirmCompleteItemReturnBtn.setAttribute('data-item-id', itemId);
                        completeItemReturnModal.show();
                    });
                });
            });

            confirmCompleteItemReturnBtn.addEventListener('click', function() {
                const itemId = this.getAttribute('data-item-id');
                fetch(`/admin/orders/item/${itemId}/complete-return`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" }
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: 'Return Completed!',
                            html: `
                            <div class="text-left">
                                <p>Return completed successfully.</p>
                                <div class="alert alert-success mt-3">
                                    <h6 class="alert-heading">Refund Details:</h6>
                                    <p class="mb-1">Amount: <strong>₹${data.refundAmount.toFixed(2)}</strong></p>
                                    <p class="mb-1">Credited to: <strong>${data.userName}'s Wallet</strong></p>
                                    <p class="mb-0">New Wallet Balance: <strong>₹${data.walletBalance.toFixed(2)}</strong></p>
                                </div>
                            </div>
                        `,
                        icon: 'success',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    if (data.isFinalState) {
                        showFinalStateAlert("this item", data.currentStatus || "a final");
                    } else {
                        showToast(data.message || "Failed to complete return", false);
                    }
                }
            })
            .catch(err => {
                console.error("Error completing return:", err);
                showToast("Error completing return: " + err.message, false);
            });
            completeItemReturnModal.hide();
        });

        // Disable action buttons for items in final states
        document.querySelectorAll('tr[data-item-status]').forEach(row => {
            const status = row.getAttribute('data-item-status');
            if (['Cancelled', 'Returned'].includes(status)) {
                const actionBtn = row.querySelector('.item-action-btn');
                if (actionBtn) {
                    actionBtn.disabled = true;
                    actionBtn.setAttribute('title', 'This item is in a final state and cannot be modified');
                }
            }
        });

            // Form validation
            itemRejectionReason?.addEventListener('input', function() {
                this.classList.remove('is-invalid');
            });

            // Initialize tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl, {
                    html: true
                });
            });
        });
    </script>
</body>
</html>
