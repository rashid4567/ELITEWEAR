<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Management - Elite Wear Admin</title>
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Font Awesome Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/adminStyle/userManagement.css">
</head>

<body>
    <!-- Sidebar -->
    <nav class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <div class="logo">
                <i class="fas fa-shopping-bag"></i>
                <span>ELITE WEAR</span>
            </div>
        </div>
        <ul class="sidebar-menu">
            <li>
                <a href="/admin/">
                    <i class="fas fa-tachometer-alt"></i>
                    <span>Dashboard</span>
                </a>
            </li>
            <li>
                <a href="/admin/productManagement">
                    <i class="fas fa-box"></i>
                    <span>Products</span>
                </a>
            </li>
            <li>
                <a href="/admin/adminorder">
                    <i class="fas fa-list"></i>
                    <span>Order List</span>
                </a>
            </li>
            <li>
                <a href="/admin/customers" class="active">
                    <i class="fas fa-users"></i>
                    <span>Customers</span>
                </a>
            </li>
            <li>
                <a href="/admin/sales">
                    <i class="fas fa-chart-line"></i>
                    <span>Sales</span>
                </a>
            </li>
            <li>
                <a href="/admin/categories">
                    <i class="fas fa-tag"></i>
                    <span>Category</span>
                </a>
            </li>
            <li>
                <a href="/admin/coupons">
                    <i class="fas fa-percent"></i>
                    <span>Coupons</span>
                </a>
            </li>
            <li>
                <a href="/admin/getbannerPage">
                    <i class="fas fa-image"></i>
                    <span>Banner</span>
                </a>
            </li>
            <li>
                <a href="/admin/wallet-transactions">
                    <i class="fas fa-wallet"></i>
                    <span>Wallet</span>
                </a>
            </li>
        </ul>
        <div class="sidebar-footer">
            <button class="btn btn-outline-primary">Account</button>
            <a href="/admin/logout" class="btn btn-logout">Logout</a>
        </div>
    </nav>

    <!-- Sidebar Toggle Button -->
    <button id="sidebar-toggle">
        <i class="fas fa-chevron-left"></i>
    </button>

    <!-- Main Content -->
    <div class="main-content" id="main-content">
        <div class="container-fluid p-0">
            <div class="page-header mb-4">
                <div>
                    <h1 class="h3">Customer Management</h1>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a href="/admin/">Dashboard</a></li>
                            <li class="breadcrumb-item active">Customers</li>
                        </ol>
                    </nav>
                </div>
                <div>
                    <button class="btn btn-primary">
                        <i class="fas fa-plus me-2"></i> Add New Customer
                    </button>
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-md-6 mb-3 mb-md-0">
                    <form method="GET" action="/admin/customers" class="search-container">
                        <input type="text" id="searchInput" name="search" class="form-control search-input"
                               placeholder="Search customer..." value="<%= search || '' %>" oninput="toggleClearButton()">
                        
                        <button type="submit" class="search-btn">
                            <i class="fas fa-search me-1"></i> Search
                        </button>
                        
                        <button type="button" id="clearBtn" class="clear-btn" onclick="clearSearch()">❌</button>
                        
                        <button type="button" class="btn btn-outline-secondary reset-btn" onclick="resetFilters()">
                            <i class="fas fa-redo-alt"></i> Reset
                        </button>
                    </form>
                </div>
                
                <div class="col-md-6 d-flex justify-content-md-end align-items-center mt-3 mt-md-0">
                      
                </div>
            </div>

            <div class="card shadow-sm mb-4">
                <div class="table-responsive">
                    <table class="table table-hover mb-0 customer-table">
                        <thead>
                            <tr>
                                <th>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="selectAll">
                                    </div>
                                </th>
                                <th>Customer</th>
                                <th>Email</th>
                                <th>Phone</th>
                                <th>Orders</th>
                                <th>Wallet Balance</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% if (users && users.length === 0) { %>
                                <tr>
                                    <td colspan="8" class="text-center py-4 text-muted">
                                        <i class="fas fa-users fa-3x mb-3"></i>
                                        <p>No customers found</p>
                                    </td>
                                </tr>
                            <% } else if (users) { %>
                                <% users.forEach(user => { %>
                                <tr>
                                    <td>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" value="<%= user._id %>">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="avatar">
                                                <%= user.fullname ? user.fullname.charAt(0).toUpperCase() : 'U' %>
                                            </div>
                                            <div>
                                                <div class="fw-medium"><%= user.fullname %></div>
                                                <div class="text-muted small">Joined: <%= new Date(user.createdAt).toLocaleDateString() %></div>
                                            </div>
                                        </div>
                                    </td>
                                    <td><%= user.email %></td>
                                    <td><%= user.mobile || 'N/A' %></td>
                                    <td>
                                        <span class="badge bg-light text-dark">
                                            <%= user.orderCount || 0 %>
                                        </span>
                                    </td>
                                    <td>
                                        <span class="fw-medium">₹<%= user.walletBalance ? user.walletBalance.toFixed(2) : '0.00' %></span>
                                    </td>
                                    <td>
                                        <% if (user.isBlocked) { %>
                                            <span class="badge bg-danger">Blocked</span>
                                        <% } else { %>
                                            <span class="badge bg-success">Active</span>
                                        <% } %>
                                    </td>
                                    <td>
                                        <div class="d-flex gap-1">
                                            <button class="btn btn-sm btn-light rounded-circle" title="View Details" 
                                                    onclick="viewCustomerDetails('<%= user._id %>')">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            
                                            <button class="btn btn-sm <%= user.isBlocked ? 'btn-light text-success' : 'btn-danger text-white' %> rounded-circle toggle-button" 
                                                    title="<%= user.isBlocked ? 'Unblock User' : 'Block User' %>"
                                                    data-user-id="<%= user._id %>"
                                                    data-action="<%= user.isBlocked ? 'unblock' : 'block' %>">
                                                <i class="fas <%= user.isBlocked ? 'fa-unlock' : 'fa-ban' %>"></i>
                                            </button>
                                            
                                            <div class="dropdown">
                                                <button class="btn btn-sm btn-light rounded-circle" type="button" 
                                                        data-bs-toggle="dropdown" aria-expanded="false">
                                                    <i class="fas fa-ellipsis-v"></i>
                                                </button>
                                                <ul class="dropdown-menu dropdown-menu-end">
                                                    <li><a class="dropdown-item" href="#" onclick="openEditProfileModal('<%= user._id %>')"><i class="fas fa-edit me-2"></i>Edit</a></li>
                                                    <li><a class="dropdown-item" href="#"><i class="fas fa-history me-2"></i>Order History</a></li>
                                                    <li><a class="dropdown-item" href="#"><i class="fas fa-wallet me-2"></i>Wallet History</a></li>
                                                    <li><hr class="dropdown-divider"></li>
                                                    <li><a class="dropdown-item text-danger" href="#"><i class="fas fa-trash-alt me-2"></i>Delete</a></li>
                                                </ul>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                                <% }); %>
                            <% } %>
                        </tbody>
                    </table>
                </div>
            </div>

            <% if (pagination && pagination.totalPages > 1) { %>
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center">
                    <% if (pagination.hasPrevPage) { %>
                        <li class="page-item">
                            <a class="page-link" href="?page=<%= pagination.currentPage - 1 %>&search=<%= search || '' %>" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                    <% } else { %>
                        <li class="page-item disabled">
                            <a class="page-link" href="#" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                    <% } %>

                    <% 
                    let startPage = Math.max(1, pagination.currentPage - 2);
                    let endPage = Math.min(pagination.totalPages, pagination.currentPage + 2);
                    
                    if (startPage > 1) { %>
                        <li class="page-item">
                            <a class="page-link" href="?page=1&search=<%= search || '' %>">1</a>
                        </li>
                        <% if (startPage > 2) { %>
                            <li class="page-item disabled">
                                <a class="page-link" href="#">...</a>
                            </li>
                        <% } %>
                    <% } %>

                    <% for (let i = startPage; i <= endPage; i++) { %>
                        <li class="page-item <%= i === pagination.currentPage ? 'active' : '' %>">
                            <a class="page-link" href="?page=<%= i %>&search=<%= search || '' %>"><%= i %></a>
                        </li>
                    <% } %>

                    <% if (endPage < pagination.totalPages) { %>
                        <% if (endPage < pagination.totalPages - 1) { %>
                            <li class="page-item disabled">
                                <a class="page-link" href="#">...</a>
                            </li>
                        <% } %>
                        <li class="page-item">
                            <a class="page-link" href="?page=<%= pagination.totalPages %>&search=<%= search || '' %>"><%= pagination.totalPages %></a>
                        </li>
                    <% } %>

                    <% if (pagination.hasNextPage) { %>
                        <li class="page-item">
                            <a class="page-link" href="?page=<%= pagination.currentPage + 1 %>&search=<%= search || '' %>" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    <% } else { %>
                        <li class="page-item disabled">
                            <a class="page-link" href="#" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    <% } %>
                </ul>
            </nav>
            <% } %>
        </div>
    </div>

    <!-- Customer Details Modal -->
    <div class="modal fade" id="customerDetailsModal" tabindex="-1" aria-labelledby="customerDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="customerDetailsModalLabel">Customer Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="customerDetailsContent">
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading customer details...</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Profile Modal -->
    <div class="modal fade" id="editProfileModal" tabindex="-1" aria-labelledby="editProfileModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editProfileModalLabel">Edit Customer Profile</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editProfileForm" novalidate>
                        <input type="hidden" id="editUserId" name="userId">
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editFullname" class="form-label">Full Name*</label>
                                <input type="text" class="form-control" id="editFullname" name="fullname" required minlength="2" maxlength="50">
                                <div class="invalid-feedback">Please enter a valid name (2-50 characters)</div>
                            </div>
                            <div class="col-md-6">
                                <label for="editEmail" class="form-label">Email Address*</label>
                                <input type="email" class="form-control" id="editEmail" name="email" required>
                                <div class="invalid-feedback">Please enter a valid email address</div>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editMobile" class="form-label">Mobile Number*</label>
                                <input type="tel" class="form-control" id="editMobile" name="mobile" required pattern="[0-9]{10}">
                                <div class="invalid-feedback">Please enter a valid 10-digit mobile number</div>
                            </div>
                            <div class="col-md-6">
                                <label for="editStatus" class="form-label">Account Status</label>
                                <select class="form-select" id="editStatus" name="status">
                                    <option value="active">Active</option>
                                    <option value="blocked">Blocked</option>
                                </select>
                            </div>
                        </div>
                        
                        <hr class="my-4">
                        <h6 class="mb-3">Default Address</h6>
                        
                        <div class="row mb-3">
                            <div class="col-md-12">
                                <label for="editAddress" class="form-label">Address Line*</label>
                                <input type="text" class="form-control" id="editAddress" name="address" required>
                                <div class="invalid-feedback">Please enter an address</div>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editCity" class="form-label">City*</label>
                                <input type="text" class="form-control" id="editCity" name="city" required>
                                <div class="invalid-feedback">Please enter a city</div>
                            </div>
                            <div class="col-md-6">
                                <label for="editDistrict" class="form-label">District*</label>
                                <input type="text" class="form-control" id="editDistrict" name="district" required>
                                <div class="invalid-feedback">Please enter a district</div>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editState" class="form-label">State*</label>
                                <input type="text" class="form-control" id="editState" name="state" required>
                                <div class="invalid-feedback">Please enter a state</div>
                            </div>
                            <div class="col-md-6">
                                <label for="editPincode" class="form-label">Pincode*</label>
                                <input type="text" class="form-control" id="editPincode" name="pincode" required pattern="[0-9]{6}">
                                <div class="invalid-feedback">Please enter a valid 6-digit pincode</div>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editLandmark" class="form-label">Landmark</label>
                                <input type="text" class="form-control" id="editLandmark" name="landmark">
                            </div>
                            <div class="col-md-6">
                                <label for="editAddressType" class="form-label">Address Type</label>
                                <select class="form-select" id="editAddressType" name="addressType">
                                    <option value="Home">Home</option>
                                    <option value="Office">Office</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" id="editIsDefault" name="isDefault" checked>
                            <label class="form-check-label" for="editIsDefault">
                                Set as default address
                            </label>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveProfileBtn">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bulk Actions Modal -->
    <div class="modal fade" id="bulkActionsModal" tabindex="-1" aria-labelledby="bulkActionsModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="bulkActionsModalLabel">Bulk Actions</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Select an action to perform on <span id="selectedCount">0</span> selected customers:</p>
                    <div class="list-group">
                        <button type="button" class="list-group-item list-group-item-action" onclick="bulkAction('block')">
                            <i class="fas fa-ban me-2 text-danger"></i> Block Selected Customers
                        </button>
                        <button type="button" class="list-group-item list-group-item-action" onclick="bulkAction('unblock')">
                            <i class="fas fa-unlock me-2 text-success"></i> Unblock Selected Customers
                        </button>
                        <button type="button" class="list-group-item list-group-item-action" onclick="bulkAction('export')">
                            <i class="fas fa-download me-2 text-primary"></i> Export Selected Customers
                        </button>
                        <button type="button" class="list-group-item list-group-item-action" onclick="bulkAction('delete')">
                            <i class="fas fa-trash-alt me-2 text-danger"></i> Delete Selected Customers
                        </button>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!-- Custom Script -->
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            // Sidebar Toggle
            const sidebarToggle = document.getElementById("sidebar-toggle");
            const sidebar = document.getElementById("sidebar");
            const mainContent = document.getElementById("main-content");

            if (sidebarToggle && sidebar && mainContent) {
                sidebarToggle.addEventListener("click", () => {
                    sidebar.classList.toggle("sidebar-collapsed");
                    mainContent.classList.toggle("main-content-expanded");
                    
                    // Change the icon direction
                    const icon = sidebarToggle.querySelector("i");
                    if (icon) {
                        icon.classList.toggle("fa-chevron-left");
                        icon.classList.toggle("fa-chevron-right");
                    }
                });
            }

            // Check screen size on load and resize
            function checkScreenSize() {
                if (window.innerWidth < 992 && sidebar && mainContent) {
                    sidebar.classList.add("sidebar-collapsed");
                    mainContent.classList.add("main-content-expanded");
                    
                    // Update toggle icon
                    const icon = sidebarToggle.querySelector("i");
                    if (icon && icon.classList.contains("fa-chevron-left")) {
                        icon.classList.remove("fa-chevron-left");
                        icon.classList.add("fa-chevron-right");
                    }
                }
            }

            checkScreenSize();
            window.addEventListener("resize", checkScreenSize);

            // Active menu item
            const currentPath = window.location.pathname;
            const menuItems = document.querySelectorAll('.sidebar-menu a');
            
            menuItems.forEach(item => {
                if (item.getAttribute('href') === currentPath) {
                    // Remove active class from all menu items
                    menuItems.forEach(menuItem => {
                        menuItem.classList.remove('active');
                    });
                    // Add active class to current menu item
                    item.classList.add('active');
                }
            });

            // Select All Checkbox
            const selectAllCheckbox = document.getElementById('selectAll');
            if (selectAllCheckbox) {
                selectAllCheckbox.addEventListener('change', function() {
                    const checkboxes = document.querySelectorAll('tbody .form-check-input');
                    checkboxes.forEach(checkbox => {
                        checkbox.checked = this.checked;
                    });
                    updateBulkActionButton();
                });
            }

            // Individual checkboxes
            const checkboxes = document.querySelectorAll('tbody .form-check-input');
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', updateBulkActionButton);
            });

            // Toggle Block/Unblock
            document.querySelectorAll('.toggle-button').forEach(button => {
                button.addEventListener('click', function() {
                    const userId = this.getAttribute('data-user-id');
                    const action = this.getAttribute('data-action');
                    toggleUserStatus(userId, action);
                });
            });

            // Initialize
            toggleClearButton();
            updateBulkActionButton();
            
            // Save Profile Button Event Listener
            document.getElementById('saveProfileBtn').addEventListener('click', function() {
                const form = document.getElementById('editProfileForm');
                
                // Form validation
                if (!form.checkValidity()) {
                    form.classList.add('was-validated');
                    return;
                }
                
                const userId = document.getElementById('editUserId').value;
                const formData = {
                    fullname: document.getElementById('editFullname').value,
                    email: document.getElementById('editEmail').value,
                    mobile: document.getElementById('editMobile').value,
                    isBlocked: document.getElementById('editStatus').value === 'blocked',
                    address: {
                        address: document.getElementById('editAddress').value,
                        city: document.getElementById('editCity').value,
                        district: document.getElementById('editDistrict').value,
                        state: document.getElementById('editState').value,
                        pincode: document.getElementById('editPincode').value,
                        landmark: document.getElementById('editLandmark').value,
                        type: document.getElementById('editAddressType').value,
                        isDefault: document.getElementById('editIsDefault').checked
                    }
                };
                
                // Send update request
                fetch(`/admin/customers/${userId}/update`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Close the modal
                        const editModal = bootstrap.Modal.getInstance(document.getElementById('editProfileModal'));
                        if (editModal) {
                            editModal.hide();
                        }
                        
                        // Show success message
                        Swal.fire({
                            title: 'Success!',
                            text: 'Customer profile updated successfully',
                            icon: 'success',
                            timer: 1500,
                            showConfirmButton: false
                        }).then(() => {
                            // Reload the page or refresh the data
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: data.message || 'Failed to update profile',
                            icon: 'error'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: 'An error occurred while updating the profile',
                        icon: 'error'
                    });
                });
            });
        });

        // Toggle Clear Button
        function toggleClearButton() {
            const searchInput = document.getElementById("searchInput");
            const clearBtn = document.getElementById("clearBtn");
            
            if (searchInput && clearBtn) {
                if (searchInput.value.length > 0) {
                    clearBtn.style.display = "inline";
                } else {
                    clearBtn.style.display = "none";
                }
            }
        }

        // Clear Search
        function clearSearch() {
            const searchInput = document.getElementById("searchInput");
            const clearBtn = document.getElementById("clearBtn");
            
            if (searchInput && clearBtn) {
                searchInput.value = "";
                clearBtn.style.display = "none";
            }
            
            window.location.href = "/admin/customers";
        }

        // Reset Filters
        function resetFilters() {
            window.location.href = "/admin/customers";
        }

        // Update Bulk Action Button
        function updateBulkActionButton() {
            const checkboxes = document.querySelectorAll('tbody .form-check-input:checked');
            const selectedCount = checkboxes.length;
            
            // Update the count in the modal
            const countElement = document.getElementById('selectedCount');
            if (countElement) {
                countElement.textContent = selectedCount;
            }
            
            // Add a bulk action button if it doesn't exist and there are selected items
            let bulkActionBtn = document.getElementById('bulkActionBtn');
            
            if (selectedCount > 0) {
                if (!bulkActionBtn) {
                    bulkActionBtn = document.createElement('button');
                    bulkActionBtn.id = 'bulkActionBtn';
                    bulkActionBtn.className = 'btn btn-primary position-fixed';
                    bulkActionBtn.style.bottom = '20px';
                    bulkActionBtn.style.right = '20px';
                    bulkActionBtn.style.zIndex = '999';
                    bulkActionBtn.style.borderRadius = '50%';
                    bulkActionBtn.style.width = '60px';
                    bulkActionBtn.style.height = '60px';
                    bulkActionBtn.style.boxShadow = '0 4px 10px rgba(0, 0, 0, 0.1)';
                    bulkActionBtn.innerHTML = '<i class="fas fa-cog"></i>';
                    bulkActionBtn.setAttribute('data-bs-toggle', 'modal');
                    bulkActionBtn.setAttribute('data-bs-target', '#bulkActionsModal');
                    bulkActionBtn.title = 'Bulk Actions';
                    
                    document.body.appendChild(bulkActionBtn);
                }
                
                // Update the button text with the count
                bulkActionBtn.setAttribute('data-count', selectedCount);
                
                // Add a badge with the count
                let badge = bulkActionBtn.querySelector('.badge');
                if (!badge) {
                    badge = document.createElement('span');
                    badge.className = 'position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger';
                    bulkActionBtn.appendChild(badge);
                }
                
                badge.textContent = selectedCount;
            } else if (bulkActionBtn) {
                // Remove the button if no items are selected
                bulkActionBtn.remove();
            }
        }

        // Toggle User Status (Block/Unblock)
        function toggleUserStatus(userId, action) {
            const title = action === 'block' ? 'Block User' : 'Unblock User';
            const text = action === 'block' 
                ? 'Are you sure you want to block this user? They will not be able to access their account.'
                : 'Are you sure you want to unblock this user? They will regain access to their account.';
            const confirmButtonText = action === 'block' ? 'Yes, Block User' : 'Yes, Unblock User';
            const confirmButtonColor = action === 'block' ? '#ef4444' : '#10b981';
            
            Swal.fire({
                title: title,
                text: text,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: confirmButtonColor,
                cancelButtonColor: '#64748b',
                confirmButtonText: confirmButtonText,
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Send request to server
                    const endpoint = action === 'block' ? '/admin/blockCustomer' : '/admin/unblockCustomer';
                    
                    fetch(`${endpoint}?id=${userId}`, { method: 'POST' })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire({
                                    title: 'Success!',
                                    text: `User has been ${action === 'block' ? 'blocked' : 'unblocked'} successfully.`,
                                    icon: 'success',
                                    timer: 1500,
                                    showConfirmButton: false
                                }).then(() => {
                                    // Reload the page to reflect changes
                                    window.location.reload();
                                });
                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: data.message || 'Something went wrong.',
                                    icon: 'error'
                                });
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            Swal.fire({
                                title: 'Error!',
                                text: 'Something went wrong. Please try again.',
                                icon: 'error'
                            });
                        });
                }
            });
        }

        // Bulk Action
        function bulkAction(action) {
            const checkboxes = document.querySelectorAll('tbody .form-check-input:checked');
            const selectedIds = Array.from(checkboxes).map(checkbox => checkbox.value);
            
            if (selectedIds.length === 0) {
                Swal.fire({
                    title: 'No Selection',
                    text: 'Please select at least one customer.',
                    icon: 'info'
                });
                return;
            }
            
            let title, text, confirmButtonText, confirmButtonColor;
            
            switch (action) {
                case 'block':
                    title = 'Block Selected Customers';
                    text = `Are you sure you want to block ${selectedIds.length} customer(s)? They will not be able to access their accounts.`;
                    confirmButtonText = 'Yes, Block Them';
                    confirmButtonColor = '#ef4444';
                    break;
                case 'unblock':
                    title = 'Unblock Selected Customers';
                    text = `Are you sure you want to unblock ${selectedIds.length} customer(s)? They will regain access to their accounts.`;
                    confirmButtonText = 'Yes, Unblock Them';
                    confirmButtonColor = '#10b981';
                    break;
                case 'export':
                    // Handle export directly without confirmation
                    console.log('Exporting customers:', selectedIds);
                    // Implement export functionality
                    Swal.fire({
                        title: 'Export Started',
                        text: `Exporting data for ${selectedIds.length} customer(s).`,
                        icon: 'info',
                        timer: 1500,
                        showConfirmButton: false
                    });
                    return;
                case 'delete':
                    title = 'Delete Selected Customers';
                    text = `Are you sure you want to delete ${selectedIds.length} customer(s)? This action cannot be undone.`;
                    confirmButtonText = 'Yes, Delete Them';
                    confirmButtonColor = '#ef4444';
                    break;
                default:
                    return;
            }
            
            // Close the modal
            const bulkActionsModal = bootstrap.Modal.getInstance(document.getElementById('bulkActionsModal'));
            if (bulkActionsModal) {
                bulkActionsModal.hide();
            }
            
            Swal.fire({
                title: title,
                text: text,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: confirmButtonColor,
                cancelButtonColor: '#64748b',
                confirmButtonText: confirmButtonText,
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Send request to server
                    let endpoint;
                    switch (action) {
                        case 'block':
                            endpoint = '/admin/blockCustomers';
                            break;
                        case 'unblock':
                            endpoint = '/admin/unblockCustomers';
                            break;
                        case 'delete':
                            endpoint = '/admin/deleteCustomers';
                            break;
                        default:
                            return;
                    }
                    
                    fetch(endpoint, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ ids: selectedIds })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: 'Success!',
                                text: data.message || `Operation completed successfully.`,
                                icon: 'success',
                                timer: 1500,
                                showConfirmButton: false
                            }).then(() => {
                                // Reload the page to reflect changes
                                window.location.reload();
                            });
                        } else {
                            Swal.fire({
                                title: 'Error!',
                                text: data.message || 'Something went wrong.',
                                icon: 'error'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            title: 'Error!',
                            text: 'Something went wrong. Please try again.',
                            icon: 'error'
                        });
                    });
                }
            });
        }

        // View Customer Details with enhanced error handling and address support
        function viewCustomerDetails(userId) {
            const modal = new bootstrap.Modal(document.getElementById('customerDetailsModal'));
            modal.show();
            
            // Show loading state
            document.getElementById('customerDetailsContent').innerHTML = `
                <div class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading customer details...</p>
                </div>
            `;
            
            // Fetch customer details from the server
            fetch(`/admin/customers/${userId}/details`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        const user = data.user || {};
                        const wallet = data.wallet || { amount: 0, transactions: [] };
                        const orders = data.orders || { total: 0, recent: [] };
                        const reviews = data.reviews || [];
                        const stats = data.stats || { totalSpent: 0, totalReviews: 0 };
                        
                        // Format date
                        const joinDate = new Date(user.createdAt).toLocaleDateString('en-US', {
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric'
                        });
                        
                        // Get default address information
                        let addressHtml = '<p class="text-muted">No address information available</p>';
                        
                        // First check for default address in user profile
                        if (user.defaultAddress) {
                            const address = user.defaultAddress;
                            addressHtml = createAddressHtml(address, user.fullname);
                        } 
                        // If no default address in profile, check addresses array
                        else if (user.addresses && user.addresses.length > 0) {
                            // Find default address or use first one
                            const address = user.addresses.find(addr => addr.isDefault) || user.addresses[0];
                            addressHtml = createAddressHtml(address, user.fullname);
                        } 
                        // If no address in profile, check recent orders
                        else if (orders.recent && orders.recent.length > 0 && orders.recent[0].address) {
                            const address = orders.recent[0].address;
                            addressHtml = createAddressHtml(address, user.fullname);
                        }
                        
                        // Create HTML for recent orders
                        let ordersHtml = '';
                        if (orders.recent && orders.recent.length > 0) {
                            ordersHtml = `
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Order #</th>
                                    <th>Date</th>
                                    <th>Items</th>
                                    <th>Amount</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${orders.recent.map(order => `
                                    <tr>
                                        <td>${order.orderNumber || '#' + (order._id ? order._id.substring(0, 8) : 'N/A')}</td>
                                        <td>${order.createdAt ? new Date(order.createdAt).toLocaleDateString() : 'N/A'}</td>
                                        <td>${order.totalItems || order.items?.length || 0}</td>
                                        <td>₹${order.total ? order.total.toFixed(2) : '0.00'}</td>
                                        <td><span class="badge bg-${getStatusColor(order.status)}">${order.status || 'N/A'}</span></td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    `;
                        } else {
                            ordersHtml = '<p class="text-muted text-center">No orders yet</p>';
                        }
                        
                        // Create HTML for recent wallet transactions
                        let walletHtml = '';
                        if (wallet.transactions && wallet.transactions.length > 0) {
                            walletHtml = `
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Type</th>
                                    <th>Amount</th>
                                    <th>Description</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${wallet.transactions.map(transaction => `
                                    <tr>
                                        <td>${transaction.date ? new Date(transaction.date).toLocaleDateString() : 'N/A'}</td>
                                        <td><span class="badge bg-${transaction.type === 'credit' ? 'success' : 'danger'}">${transaction.type || 'N/A'}</span></td>
                                        <td>₹${transaction.amount ? transaction.amount.toFixed(2) : '0.00'}</td>
                                        <td>${transaction.description || 'N/A'}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    `;
                        } else {
                            walletHtml = '<p class="text-muted text-center">No wallet transactions</p>';
                        }
                        
                        // Create HTML for recent reviews
                        let reviewsHtml = '';
                        if (reviews && reviews.length > 0) {
                            reviewsHtml = `
                        <div class="list-group">
                            ${reviews.map(review => `
                                <div class="list-group-item">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h6 class="mb-1">${review.productId?.name || review.productName || 'Product'}</h6>
                                        <div>
                                            ${getStarRating(review.rating)}
                                        </div>
                                    </div>
                                    <p class="mb-1 small">${review.description ? (review.description.substring(0, 100) + (review.description.length > 100 ? '...' : '')) : 'No description'}</p>
                                    <small class="text-muted">${review.createdAt ? new Date(review.createdAt).toLocaleDateString() : 'N/A'}</small>
                                </div>
                            `).join('')}
                        </div>
                    `;
                        } else {
                            reviewsHtml = '<p class="text-muted text-center">No reviews yet</p>';
                        }
                        
                        // Update modal content
                        document.getElementById('customerDetailsContent').innerHTML = `
                    <div class="row">
                        <div class="col-md-4 text-center mb-4 mb-md-0">
                            <div class="avatar mx-auto mb-3" style="width: 100px; height: 100px; font-size: 2.5rem;">
                                ${user.fullname ? user.fullname.charAt(0).toUpperCase() : 'U'}
                            </div>
                            <h5>${user.fullname || 'User'}</h5>
                            <p class="text-muted">Member since ${joinDate || 'N/A'}</p>
                            
                            <!-- Wallet Balance Card - Prominently displayed -->
                            <div class="card mb-3 border-primary">
                                <div class="card-body text-center">
                                    <h6 class="card-subtitle mb-2 text-muted">Wallet Balance</h6>
                                    <h3 class="text-primary">₹${wallet.amount ? wallet.amount.toFixed(2) : '0.00'}</h3>
                                    <a href="/admin/customers/${user._id}/wallet" class="btn btn-sm btn-outline-primary mt-2">
                                        <i class="fas fa-wallet me-1"></i> Manage Wallet
                                    </a>
                                </div>
                            </div>
                            
                            <div class="d-grid gap-2 mt-3">
                                <a href="mailto:${user.email}" class="btn btn-sm btn-primary">
                                    <i class="fas fa-envelope me-1"></i> Send Email
                                </a>
                                <button class="btn btn-sm btn-outline-secondary" onclick="openEditProfileModal('${user._id}')">
                                    <i class="fas fa-edit me-1"></i> Edit Profile
                                </button>
                            </div>
                        </div>
                        <div class="col-md-8">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <div class="card h-100">
                                        <div class="card-body">
                                            <h6 class="card-subtitle mb-2 text-muted">Contact Information</h6>
                                            <ul class="list-unstyled">
                                                <li class="mb-2"><i class="fas fa-envelope me-2 text-primary"></i> ${user.email || 'No email'}</li>
                                                <li class="mb-2"><i class="fas fa-phone me-2 text-primary"></i> ${user.mobile || 'Not provided'}</li>
                                                <li class="mb-2"><i class="fas fa-user me-2 text-primary"></i> Status: 
                                                    <span class="badge bg-${user.isBlocked ? 'danger' : 'success'}">
                                                        ${user.isBlocked ? 'Blocked' : 'Active'}
                                                    </span>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="card h-100">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-center mb-3">
                                                <h6 class="card-subtitle text-muted mb-0">Default Address</h6>
                                                <button class="btn btn-sm btn-outline-primary" onclick="openEditProfileModal('${user._id}')">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                            </div>
                                            ${addressHtml}
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="card">
                                        <div class="card-body">
                                            <h6 class="card-subtitle mb-2 text-muted">Account Summary</h6>
                                            <div class="row">
                                                <div class="col-md-4 text-center mb-3">
                                                    <div class="border rounded p-3">
                                                        <h3 class="text-primary">${orders.total || 0}</h3>
                                                        <p class="text-muted mb-0">Total Orders</p>
                                                    </div>
                                                </div>
                                                <div class="col-md-4 text-center mb-3">
                                                    <div class="border rounded p-3">
                                                        <h3 class="text-primary">${stats.totalReviews || 0}</h3>
                                                        <p class="text-muted mb-0">Reviews</p>
                                                    </div>
                                                </div>
                                                <div class="col-md-4 text-center mb-3">
                                                    <div class="border rounded p-3">
                                                        <h3 class="text-primary">${stats.totalSpent ? '₹' + stats.totalSpent.toFixed(2) : '₹0.00'}</h3>
                                                        <p class="text-muted mb-0">Total Spent</p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="card">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-center mb-3">
                                                <h6 class="card-subtitle text-muted">Recent Orders</h6>
                                                <a href="/admin/customers/${user._id}/orders" class="btn btn-sm btn-outline-primary">View All</a>
                                            </div>
                                            <div class="table-responsive">
                                                ${ordersHtml}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="card">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-center mb-3">
                                                <h6 class="card-subtitle text-muted">Wallet Transactions</h6>
                                                <a href="/admin/customers/${user._id}/wallet" class="btn btn-sm btn-outline-primary">View All</a>
                                            </div>
                                            <div class="table-responsive">
                                                ${walletHtml}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="card">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-center mb-3">
                                                <h6 class="card-subtitle text-muted">Recent Reviews</h6>
                                                <a href="/admin/customers/${user._id}/reviews" class="btn btn-sm btn-outline-primary">View All</a>
                                            </div>
                                            ${reviewsHtml}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                    } else {
                        document.getElementById('customerDetailsContent').innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-circle me-2"></i> ${data.message || 'Failed to load customer details'}
                    </div>
                `;
                    }
                })
                .catch(error => {
                    console.error('Error fetching customer details:', error);
                    document.getElementById('customerDetailsContent').innerHTML = `
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-circle me-2"></i> An error occurred while loading customer details: ${error.message}
                    <button class="btn btn-sm btn-danger ms-3" onclick="viewCustomerDetails('${userId}')">Retry</button>
                </div>
            `;
                });
        }

        // Helper function to create address HTML
        function createAddressHtml(address, fallbackName) {
            if (!address) return '<p class="text-muted">No address information available</p>';
            
            return `
            <div class="address-card">
                <div class="address-card-header">
                    <h6 class="address-card-title">${address.fullname || fallbackName || 'User'}</h6>
                    <span class="address-card-type">${address.type || 'Home'}</span>
                </div>
                <div class="address-card-body">
                    <p class="mb-1">${address.address || 'No address'}</p>
                    <p class="mb-1">${address.city || 'N/A'}, ${address.district || 'N/A'}</p>
                    <p class="mb-1">${address.state || 'N/A'} - ${address.pincode || 'N/A'}</p>
                    <p class="mb-0">Landmark: ${address.landmark || 'N/A'}</p>
                </div>
            </div>
        `;
        }

        // Open Edit Profile Modal
        function openEditProfileModal(userId) {
            // Close the details modal
            const detailsModal = bootstrap.Modal.getInstance(document.getElementById('customerDetailsModal'));
            if (detailsModal) {
                detailsModal.hide();
            }
            
            // Show loading state
            document.getElementById('editUserId').value = userId;
            
            // Fetch user data
            fetch(`/admin/customers/${userId}/details`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const user = data.data.user;
                        
                        // Populate form fields
                        document.getElementById('editFullname').value = user.fullname || '';
                        document.getElementById('editEmail').value = user.email || '';
                        document.getElementById('editMobile').value = user.mobile || '';
                        document.getElementById('editStatus').value = user.isBlocked ? 'blocked' : 'active';
                        
                        // Populate address fields if available
                        let addressData = null;
                        
                        // First check for default address in user profile
                        if (user.defaultAddress) {
                            addressData = user.defaultAddress;
                        } 
                        // If no default address in profile, check addresses array
                        else if (user.addresses && user.addresses.length > 0) {
                            // Find default address or use first one
                            addressData = user.addresses.find(addr => addr.isDefault) || user.addresses[0];
                        }
                        // If no address in profile, check recent orders
                        else if (data.data.orders && data.data.orders.recent && data.data.orders.recent.length > 0 && data.data.orders.recent[0].address) {
                            addressData = data.data.orders.recent[0].address;
                        }
                        
                        // Populate address fields if we found address data
                        if (addressData) {
                            document.getElementById('editAddress').value = addressData.address || '';
                            document.getElementById('editCity').value = addressData.city || '';
                            document.getElementById('editDistrict').value = addressData.district || '';
                            document.getElementById('editState').value = addressData.state || '';
                            document.getElementById('editPincode').value = addressData.pincode || '';
                            document.getElementById('editLandmark').value = addressData.landmark || '';
                            document.getElementById('editAddressType').value = addressData.type || 'Home';
                            document.getElementById('editIsDefault').checked = addressData.isDefault || true;
                        }
                        
                        // Show the modal
                        const editModal = new bootstrap.Modal(document.getElementById('editProfileModal'));
                        editModal.show();
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: data.message || 'Failed to load user data',
                            icon: 'error'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: 'An error occurred while loading user data',
                        icon: 'error'
                    });
                });
        }

        // Helper function to get status color
        function getStatusColor(status) {
            if (!status) return 'secondary';
            
            switch(status.toLowerCase()) {
                case 'delivered':
                    return 'success';
                case 'shipped':
                    return 'info';
                case 'processing':
                    return 'primary';
                case 'cancelled':
                    return 'danger';
                case 'pending':
                    return 'warning';
                default:
                    return 'secondary';
            }
        }

        // Helper function to generate star rating HTML
        function getStarRating(rating) {
            if (!rating) return '';
            
            let stars = '';
            for (let i = 1; i <= 5; i++) {
                if (i <= rating) {
                    stars += '<i class="fas fa-star text-warning"></i>';
                } else {
                    stars += '<i class="far fa-star text-warning"></i>';
                }
            }
            return stars;
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            toggleClearButton();
        });
    </script>
</body>
</html>
