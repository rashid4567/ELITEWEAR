<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard</title>
  
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
  
  <!-- Custom CSS -->
  <style>
    :root {
      --primary-color: #4f46e5;
      --secondary-color: #10b981;
      --warning-color: #f59e0b;
      --danger-color: #ef4444;
      --info-color: #0ea5e9;
      --light-color: #f9fafb;
      --dark-color: #111827;
      --gray-color: #6b7280;
      --sidebar-width: 250px;
    }
    
    body {
      font-family: 'Inter', sans-serif;
      background-color: #f3f4f6;
      color: #1f2937;
      overflow-x: hidden;
    }
    
    .sidebar {
      width: var(--sidebar-width);
      background-color: #fff;
      height: 100vh;
      position: fixed;
      top: 0;
      left: 0;
      box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
      z-index: 100;
      transition: all 0.3s;
      overflow-y: auto;
    }
    
    .sidebar-collapsed {
      left: calc(var(--sidebar-width) * -1);
    }
    
    .main-content {
      margin-left: var(--sidebar-width);
      padding: 20px;
      transition: all 0.3s;
      min-height: 100vh;
    }
    
    .main-content-expanded {
      margin-left: 0;
    }
    
    .sidebar-header {
      padding: 20px;
      border-bottom: 1px solid #e5e7eb;
    }
    
    .sidebar-menu {
      padding: 0;
      list-style: none;
      margin-bottom: 0;
    }
    
    .sidebar-menu li a {
      display: flex;
      align-items: center;
      padding: 12px 20px;
      color: #4b5563;
      text-decoration: none;
      transition: all 0.3s;
    }
    
    .sidebar-menu li a:hover {
      background-color: #f9fafb;
      color: var(--primary-color);
    }
    
    .sidebar-menu li a.active {
      background-color: #f3f4f6;
      color: var(--primary-color);
      border-left: 3px solid var(--primary-color);
    }
    
    .sidebar-menu li a i {
      margin-right: 10px;
      width: 20px;
      text-align: center;
    }
    
    .navbar {
      background-color: #fff;
      box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
    }
    
    .card {
      border: none;
      border-radius: 0.5rem;
      box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
      margin-bottom: 20px;
      height: 100%;
    }
    
    .card-header {
      background-color: #fff;
      border-bottom: 1px solid #e5e7eb;
      padding: 15px 20px;
    }
    
    .card-body {
      padding: 20px;
      overflow: auto;
    }
    
    .stats-card {
      border-radius: 0.5rem;
      padding: 20px;
      background-color: #fff;
      box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
      transition: transform 0.3s;
      height: 100%;
    }
    
    .stats-card:hover {
      transform: translateY(-5px);
    }
    
    .stats-card .icon {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 15px;
    }
    
    .stats-card .icon.primary {
      background-color: rgba(79, 70, 229, 0.1);
      color: var(--primary-color);
    }
    
    .stats-card .icon.success {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--secondary-color);
    }
    
    .stats-card .icon.warning {
      background-color: rgba(245, 158, 11, 0.1);
      color: var(--warning-color);
    }
    
    .stats-card .icon.info {
      background-color: rgba(14, 165, 233, 0.1);
      color: var(--info-color);
    }
    
    .stats-card h3 {
      font-size: 1.5rem;
      font-weight: 600;
      margin-bottom: 5px;
    }
    
    .stats-card p {
      color: #6b7280;
      margin-bottom: 0;
    }
    
    .stats-card .change {
      font-size: 0.875rem;
      display: flex;
      align-items: center;
      margin-top: 5px;
    }
    
    .stats-card .change.positive {
      color: var(--secondary-color);
    }
    
    .stats-card .change.negative {
      color: var(--danger-color);
    }
    
    .table th {
      font-weight: 600;
      color: #4b5563;
    }
    
    .table td {
      vertical-align: middle;
    }
    
    .status-badge {
      padding: 5px 10px;
      border-radius: 9999px;
      font-size: 0.75rem;
      font-weight: 500;
    }
    
    .status-badge.delivered {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--secondary-color);
    }
    
    .status-badge.processing {
      background-color: rgba(14, 165, 233, 0.1);
      color: var(--info-color);
    }
    
    .status-badge.shipped {
      background-color: rgba(245, 158, 11, 0.1);
      color: var(--warning-color);
    }
    
    .status-badge.cancelled {
      background-color: rgba(239, 68, 68, 0.1);
      color: var(--danger-color);
    }
    
    .activity-item {
      display: flex;
      align-items: flex-start;
      padding: 15px 0;
      border-bottom: 1px solid #e5e7eb;
    }
    
    .activity-item:last-child {
      border-bottom: none;
    }
    
    .activity-item .icon {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 15px;
      flex-shrink: 0;
    }
    
    .activity-item .icon.order {
      background-color: rgba(79, 70, 229, 0.1);
      color: var(--primary-color);
    }
    
    .activity-item .icon.user {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--secondary-color);
    }
    
    .activity-item .content {
      flex-grow: 1;
    }
    
    .activity-item .content p {
      margin-bottom: 5px;
    }
    
    .activity-item .content .time {
      font-size: 0.75rem;
      color: #6b7280;
    }
    
    .product-item {
      display: flex;
      align-items: center;
    }
    
    .product-item img {
      width: 40px;
      height: 40px;
      border-radius: 0.25rem;
      object-fit: cover;
      margin-right: 10px;
    }
    
    .chart-container {
      position: relative;
      height: 300px;
      width: 100%;
    }
    
    .data-refresh-indicator {
      display: inline-flex;
      align-items: center;
      font-size: 0.75rem;
      color: #6b7280;
      margin-left: 10px;
    }
    
    .data-refresh-indicator i {
      margin-right: 5px;
    }
    
    .refresh-btn {
      background: none;
      border: none;
      color: var(--primary-color);
      cursor: pointer;
      padding: 0;
      font-size: 0.875rem;
      display: inline-flex;
      align-items: center;
    }
    
    .refresh-btn i {
      margin-right: 5px;
    }
    
    .refresh-btn:hover {
      text-decoration: underline;
    }
    
    .loading-overlay {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.7);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 10;
      border-radius: 0.5rem;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border: 4px solid rgba(79, 70, 229, 0.1);
      border-radius: 50%;
      border-top-color: var(--primary-color);
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .error-message {
      color: var(--danger-color);
      font-size: 0.875rem;
      margin-top: 5px;
      display: flex;
      align-items: center;
    }
    
    .error-message i {
      margin-right: 5px;
    }
    
    .chart-placeholder {
      height: 300px;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: #f9fafb;
      border-radius: 0.5rem;
      color: #6b7280;
    }
    
    /* Responsive styles */
    @media (max-width: 1199.98px) {
      .stats-card h3 {
        font-size: 1.25rem;
      }
    }
    
    @media (max-width: 991.98px) {
      .sidebar {
        left: calc(var(--sidebar-width) * -1);
      }
      
      .sidebar.show {
        left: 0;
      }
      
      .main-content {
        margin-left: 0;
      }
      
      .chart-container {
        height: 250px;
      }
    }
    
    @media (max-width: 767.98px) {
      .card-header {
        flex-direction: column !important;
        align-items: flex-start !important;
      }
      
      .card-header .d-flex {
        margin-top: 10px;
        width: 100%;
      }
      
      .chart-container {
        height: 200px;
      }
      
      .stats-card {
        margin-bottom: 15px;
      }
    }
    
    @media (max-width: 575.98px) {
      .main-content {
        padding: 15px;
      }
      
      .navbar .container-fluid {
        padding-left: 15px;
        padding-right: 15px;
      }
      
      .table-responsive {
        font-size: 0.875rem;
      }
      
      .chart-container {
        height: 180px;
      }
    }
  </style>
  
  <!-- Make chart data available to the page -->
  <script>
    window.dashboardData = {
      monthlySalesData: <%- JSON.stringify(monthlySalesData || []) %>,
      weeklySalesData: <%- JSON.stringify(weeklySalesData || []) %>,
      dailySalesData: <%- JSON.stringify(dailySalesData || []) %>,
      paymentMethodDistribution: <%- JSON.stringify(paymentMethodDistribution || []) %>,
      orderStatusDistribution: <%- JSON.stringify(orderStatusDistribution || []) %>,
      lastUpdated: "<%= new Date().toISOString() %>"
    };
  </script>
  
  
  
</head>
<body>
  <!-- Sidebar -->
  <div class="sidebar" id="sidebar">
    <div class="sidebar-header">
      <div class="d-flex align-items-center">
        <i class="fas fa-shopping-bag fs-4 text-primary me-2"></i>
        <h5 class="mb-0">Admin Panel</h5>
      </div>
    </div>
    <ul class="sidebar-menu mt-4">
      <li>
        <a href="/admin" class="active">
          <i class="fas fa-tachometer-alt"></i>
          <span>Dashboard</span>
        </a>
      </li>
      <li>
        <a href="/admin/products">
          <i class="fas fa-box"></i>
          <span>Products</span>
        </a>
      </li>
      <li>
        <a href="/admin/categories">
          <i class="fas fa-tags"></i>
          <span>Categories</span>
        </a>
      </li>
      <li>
        <a href="/admin/orders">
          <i class="fas fa-shopping-cart"></i>
          <span>Orders</span>
        </a>
      </li>
      <li>
        <a href="/admin/customers">
          <i class="fas fa-users"></i>
          <span>Customers</span>
        </a>
      </li>
      <li>
        <a href="/admin/coupons">
          <i class="fas fa-ticket-alt"></i>
          <span>Coupons</span>
        </a>
      </li>
      <li>
        <a href="/admin/reports">
          <i class="fas fa-chart-bar"></i>
          <span>Reports</span>
        </a>
      </li>
      <li>
        <a href="/admin/settings">
          <i class="fas fa-cog"></i>
          <span>Settings</span>
        </a>
      </li>
    </ul>
  </div>

  <!-- Main Content -->
  <div class="main-content" id="main-content">
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg mb-4">
      <div class="container-fluid">
        <button class="btn btn-light" id="sidebar-toggle">
          <i class="fas fa-bars"></i>
        </button>
        <h4 class="mb-0 ms-3 d-none d-sm-block">Dashboard</h4>
        <h5 class="mb-0 ms-2 d-block d-sm-none">Dashboard</h5>
        <div class="ms-auto d-flex align-items-center">
          <div class="data-refresh-indicator me-3 d-none d-md-flex" id="last-updated">
            <i class="fas fa-clock"></i>
            <span>Updated: Just now</span>
          </div>
          <button class="refresh-btn me-3" id="refresh-data">
            <i class="fas fa-sync-alt"></i>
            <span class="d-none d-md-inline">Refresh Data</span>
          </button>
          <div class="dropdown">
            <button class="btn btn-light dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
              <i class="fas fa-user-circle me-1"></i>
              <span class="d-none d-md-inline"><%= admin.fullname %></span>
            </button>
            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton">
              <li><a class="dropdown-item" href="/admin/profile">Profile</a></li>
              <li><a class="dropdown-item" href="/admin/settings">Settings</a></li>
              <li><hr class="dropdown-divider"></li>
              <li><a class="dropdown-item" href="/admin/logout">Logout</a></li>
            </ul>
          </div>
        </div>
      </div>
    </nav>

    <!-- Stats Cards -->
    <div class="row g-3 mb-4" id="stats-container">
      <div class="col-sm-6 col-lg-3">
        <div class="stats-card" id="revenue-card">
          <div class="d-flex justify-content-between">
            <div>
              <div class="icon primary">
                <i class="fas fa-rupee-sign"></i>
              </div>
              <h3 id="total-revenue">₹<%= totalRevenue.toLocaleString('en-IN') %></h3>
              <p>Total Revenue</p>
              <div class="change <%= revenueChange >= 0 ? 'positive' : 'negative' %>" id="revenue-change">
                <i class="fas <%= revenueChange >= 0 ? 'fa-arrow-up' : 'fa-arrow-down' %> me-1"></i>
                <span><%= Math.abs(revenueChange).toFixed(1) %>% from last month</span>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="col-sm-6 col-lg-3">
        <div class="stats-card" id="orders-card">
          <div class="d-flex justify-content-between">
            <div>
              <div class="icon success">
                <i class="fas fa-shopping-cart"></i>
              </div>
              <h3 id="total-orders"><%= totalOrders.toLocaleString('en-IN') %></h3>
              <p>Total Orders</p>
              <div class="change <%= orderChange >= 0 ? 'positive' : 'negative' %>" id="order-change">
                <i class="fas <%= orderChange >= 0 ? 'fa-arrow-up' : 'fa-arrow-down' %> me-1"></i>
                <span><%= Math.abs(orderChange).toFixed(1) %>% from last month</span>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="col-sm-6 col-lg-3">
        <div class="stats-card" id="customers-card">
          <div class="d-flex justify-content-between">
            <div>
              <div class="icon warning">
                <i class="fas fa-users"></i>
              </div>
              <h3 id="total-customers"><%= customerCount.toLocaleString('en-IN') %></h3>
              <p>Total Customers</p>
              <div class="change <%= customerChange >= 0 ? 'positive' : 'negative' %>" id="customer-change">
                <i class="fas <%= customerChange >= 0 ? 'fa-arrow-up' : 'fa-arrow-down' %> me-1"></i>
                <span><%= Math.abs(customerChange).toFixed(1) %>% from last month</span>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="col-sm-6 col-lg-3">
        <div class="stats-card" id="products-card">
          <div class="d-flex justify-content-between">
            <div>
              <div class="icon info">
                <i class="fas fa-box"></i>
              </div>
              <h3 id="total-products"><%= productCount.toLocaleString('en-IN') %></h3>
              <p>Total Products</p>
              <div class="change <%= productChange >= 0 ? 'positive' : 'negative' %>" id="product-change">
                <i class="fas <%= productChange >= 0 ? 'fa-arrow-up' : 'fa-arrow-down' %> me-1"></i>
                <span><%= Math.abs(productChange).toFixed(1) %>% from last month</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Charts -->
    <div class="row g-3 mb-4">
      <!-- Revenue Distribution Chart -->
      <div class="col-lg-6">
        <div class="card h-100" id="distribution-chart-card">
          <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">Revenue Distribution</h5>
            <select class="form-select form-select-sm distribution-chart-type" style="width: auto;">
              <option value="payment">By Payment Method</option>
              <option value="channel">By Channel</option>
            </select>
          </div>
          <div class="card-body position-relative">
            <div class="chart-container">
              <canvas id="distributionChart"></canvas>
            </div>
            <div class="loading-overlay" id="distribution-chart-loading" style="display: none;">
              <div class="spinner"></div>
            </div>
          </div>
        </div>
      </div>

      <!-- Sales Overview Chart -->
      <div class="col-lg-6">
        <div class="card h-100" id="sales-chart-card">
          <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">Sales Overview</h5>
            <div class="d-flex gap-2">
              <select class="form-select form-select-sm sales-chart-type">
                <option value="revenue">Revenue</option>
                <option value="orders">Orders</option>
              </select>
              <select class="form-select form-select-sm sales-chart-period">
                <option value="daily">Daily</option>
                <option value="weekly">Weekly</option>
                <option value="monthly" selected>Monthly</option>
                <option value="yearly">Yearly</option>
              </select>
            </div>
          </div>
          <div class="card-body position-relative">
            <div class="chart-container">
              <canvas id="salesChart"></canvas>
            </div>
            <div class="loading-overlay" id="sales-chart-loading" style="display: none;">
              <div class="spinner"></div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Recent Orders and Top Products -->
    <div class="row g-3 mb-4">
      <!-- Recent Orders -->
      <div class="col-lg-6">
        <div class="card h-100" id="recent-orders-card">
          <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">Recent Orders</h5>
            <a href="/admin/orders" class="btn btn-sm btn-outline-primary">View All</a>
          </div>
          <div class="card-body position-relative">
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th>Order ID</th>
                    <th>Customer</th>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Status</th>
                  </tr>
                </thead>
                <tbody id="recent-orders-table">
                  <% recentOrders.forEach(order => { %>
                    <tr>
                      <td><a href="/admin/orders/<%= order._id %>" class="text-decoration-none"><%= order.orderNumber %></a></td>
                      <td><%= order.customer.name %></td>
                      <td><%= moment(order.createdAt).format('MMM DD, YYYY') %></td>
                      <td>₹<%= order.totalAmount.toLocaleString('en-IN') %></td>
                      <td>
                        <span class="status-badge <%= order.status.toLowerCase() %>">
                          <%= order.status %>
                        </span>
                      </td>
                    </tr>
                  <% }); %>
                </tbody>
              </table>
            </div>
            <div class="loading-overlay" id="recent-orders-loading" style="display: none;">
              <div class="spinner"></div>
            </div>
          </div>
        </div>
      </div>

      <!-- Top Products -->
      <div class="col-lg-6">
        <div class="card h-100" id="top-products-card">
          <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">Top Selling Products</h5>
            <a href="/admin/products" class="btn btn-sm btn-outline-primary">View All</a>
          </div>
          <div class="card-body position-relative">
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th>Product</th>
                    <th>Sold</th>
                    <th>Revenue</th>
                  </tr>
                </thead>
                <tbody id="top-products-table">
                  <% topProducts.forEach(product => { %>
                    <tr>
                      <td>
                        <div class="product-item">
                          <img src="<%= product.image %>" alt="<%= product.name %>" onerror="this.src='/images/placeholder-product.jpg'">
                          <span><%= product.name %></span>
                        </div>
                      </td>
                      <td><%= product.soldCount %></td>
                      <td>₹<%= product.revenue.toLocaleString('en-IN') %></td>
                    </tr>
                  <% }); %>
                </tbody>
              </table>
            </div>
            <div class="loading-overlay" id="top-products-loading" style="display: none;">
              <div class="spinner"></div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Top Categories and Customer Activities -->
    <div class="row g-3 mb-4">
      <!-- Top Categories -->
      <div class="col-lg-6">
        <div class="card h-100" id="top-categories-card">
          <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">Top Categories</h5>
            <a href="/admin/categories" class="btn btn-sm btn-outline-primary">View All</a>
          </div>
          <div class="card-body position-relative">
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th>Category</th>
                    <th>Sold</th>
                    <th>Revenue</th>
                  </tr>
                </thead>
                <tbody id="top-categories-table">
                  <% topCategories.forEach(category => { %>
                    <tr>
                      <td>
                        <div class="product-item">
                          <img src="<%= category.image %>" alt="<%= category.name %>" onerror="this.src='/images/placeholder-category.jpg'">
                          <span><%= category.name %></span>
                        </div>
                      </td>
                      <td><%= category.soldCount %></td>
                      <td>₹<%= category.revenue.toLocaleString('en-IN') %></td>
                    </tr>
                  <% }); %>
                </tbody>
              </table>
            </div>
            <div class="loading-overlay" id="top-categories-loading" style="display: none;">
              <div class="spinner"></div>
            </div>
          </div>
        </div>
      </div>

      <!-- Customer Activities -->
      <div class="col-lg-6">
        <div class="card h-100" id="customer-activities-card">
          <div class="card-header">
            <h5 class="card-title mb-0">Recent Activities</h5>
          </div>
          <div class="card-body position-relative">
            <div id="activities-container">
              <% customerActivities.forEach(activity => { %>
                <div class="activity-item">
                  <div class="icon <%= activity.type %>">
                    <i class="<%= activity.icon %>"></i>
                  </div>
                  <div class="content">
                    <p><%= activity.message %></p>
                    <p class="time"><%= activity.timeAgo %></p>
                  </div>
                </div>
              <% }); %>
            </div>
            <div class="loading-overlay" id="activities-loading" style="display: none;">
              <div class="spinner"></div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Ledger Entries -->
    <div class="row g-3 mb-4">
      <div class="col-12">
        <div class="card" id="ledger-entries-card">
          <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">Recent Ledger Entries</h5>
            <button class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#addLedgerModal">
              <i class="fas fa-plus me-1"></i> Add Entry
            </button>
          </div>
          <div class="card-body position-relative">
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th>Date</th>
                    <th>Transaction ID</th>
                    <th>Description</th>
                    <th>Category</th>
                    <th>Debit</th>
                    <th>Credit</th>
                    <th>Balance</th>
                  </tr>
                </thead>
                <tbody id="ledger-entries-table">
                  <% recentLedgerEntries.forEach(entry => { %>
                    <tr>
                      <td><%= moment(entry.date).format('MMM DD, YYYY') %></td>
                      <td><%= entry.transactionId %></td>
                      <td><%= entry.description %></td>
                      <td><%= entry.category %></td>
                      <td class="<%= entry.debit > 0 ? 'text-danger' : '' %>">
                        <%= entry.debit > 0 ? '₹' + entry.debit.toLocaleString('en-IN') : '-' %>
                      </td>
                      <td class="<%= entry.credit > 0 ? 'text-success' : '' %>">
                        <%= entry.credit > 0 ? '₹' + entry.credit.toLocaleString('en-IN') : '-' %>
                      </td>
                      <td class="<%= entry.balance >= 0 ? 'text-success' : 'text-danger' %>">
                        ₹<%= entry.balance.toLocaleString('en-IN') %>
                      </td>
                    </tr>
                  <% }); %>
                </tbody>
              </table>
            </div>
            <div class="loading-overlay" id="ledger-entries-loading" style="display: none;">
              <div class="spinner"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Add Ledger Entry Modal -->
  <div class="modal fade" id="addLedgerModal" tabindex="-1" aria-labelledby="addLedgerModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addLedgerModalLabel">Add Ledger Entry</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <form action="/admin/ledger/add" method="POST" id="add-ledger-form">
          <div class="modal-body">
            <div class="mb-3">
              <label for="date" class="form-label">Date</label>
              <input type="date" class="form-control" id="date" name="date" value="<%= new Date().toISOString().split('T')[0] %>" required>
            </div>
            <div class="mb-3">
              <label for="description" class="form-label">Description</label>
              <input type="text" class="form-control" id="description" name="description" required>
            </div>
            <div class="mb-3">
              <label for="category" class="form-label">Category</label>
              <select class="form-select" id="category" name="category" required>
                <option value="Income">Income</option>
                <option value="Expenses">Expenses</option>
                <option value="Investment">Investment</option>
                <option value="Transfer">Transfer</option>
              </select>
            </div>
            <div class="row">
              <div class="col-md-6 mb-3">
                <label for="debit" class="form-label">Debit</label>
                <input type="number" class="form-control" id="debit" name="debit" min="0" step="0.01" placeholder="0.00">
              </div>
              <div class="col-md-6 mb-3">
                <label for="credit" class="form-label">Credit</label>
                <input type="number" class="form-control" id="credit" name="credit" min="0" step="0.01" placeholder="0.00">
              </div>
            </div>
            <div class="mb-3">
              <label for="notes" class="form-label">Notes</label>
              <textarea class="form-control" id="notes" name="notes" rows="3"></textarea>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-primary" id="save-ledger-btn">Save Entry</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Error Toast -->
  <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="errorToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header bg-danger text-white">
        <i class="fas fa-exclamation-circle me-2"></i>
        <strong class="me-auto">Error</strong>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body" id="error-toast-message">
        An error occurred. Please try again.
      </div>
    </div>
  </div>

  <!-- Bootstrap Bundle with Popper -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  
  <!-- Custom JavaScript -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize toast
      const errorToast = new bootstrap.Toast(document.getElementById('errorToast'));
      
      // Sidebar Toggle
      const sidebarToggle = document.getElementById('sidebar-toggle');
      const sidebar = document.getElementById('sidebar');
      const mainContent = document.getElementById('main-content');
      
      sidebarToggle.addEventListener('click', function() {
        sidebar.classList.toggle('show');
      });
      
      // Check screen size on load and resize
      function checkScreenSize() {
        if (window.innerWidth < 992) {
          sidebar.classList.remove('show');
          mainContent.classList.add('main-content-expanded');
        } else {
          sidebar.classList.add('show');
          mainContent.classList.remove('main-content-expanded');
        }
      }
      
      checkScreenSize();
      window.addEventListener('resize', checkScreenSize);

      // Chart color palette
      const chartColors = [
        'rgba(59, 130, 246, 0.8)', // Blue
        'rgba(16, 185, 129, 0.8)', // Green
        'rgba(249, 115, 22, 0.8)', // Orange
        'rgba(139, 92, 246, 0.8)', // Purple
        'rgba(236, 72, 153, 0.8)', // Pink
        'rgba(14, 165, 233, 0.8)', // Sky
        'rgba(168, 85, 247, 0.8)', // Violet
        'rgba(251, 146, 60, 0.8)'  // Amber
      ];

      // Chart border colors (darker versions of the fill colors)
      const chartBorderColors = [
        'rgb(59, 130, 246)', // Blue
        'rgb(16, 185, 129)', // Green
        'rgb(249, 115, 22)', // Orange
        'rgb(139, 92, 246)', // Purple
        'rgb(236, 72, 153)', // Pink
        'rgb(14, 165, 233)', // Sky
        'rgb(168, 85, 247)', // Violet
        'rgb(251, 146, 60)'  // Amber
      ];

      // Format currency function
      function formatCurrency(value) {
        return new Intl.NumberFormat('en-IN', {
          style: 'currency',
          currency: 'INR',
          maximumFractionDigits: 0
        }).format(value);
      }

      // Format date function
      function formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('en-IN', {
          year: 'numeric',
          month: 'short',
          day: 'numeric'
        });
      }

      // Format time ago function
      function timeAgo(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const seconds = Math.floor((now - date) / 1000);
        
        let interval = Math.floor(seconds / 31536000);
        if (interval >= 1) {
          return interval + ' year' + (interval === 1 ? '' : 's') + ' ago';
        }
        
        interval = Math.floor(seconds / 2592000);
        if (interval >= 1) {
          return interval + ' month' + (interval === 1 ? '' : 's') + ' ago';
        }
        
        interval = Math.floor(seconds / 86400);
        if (interval >= 1) {
          return interval + ' day' + (interval === 1 ? '' : 's') + ' ago';
        }
        
        interval = Math.floor(seconds / 3600);
        if (interval >= 1) {
          return interval + ' hour' + (interval === 1 ? '' : 's') + ' ago';
        }
        
        interval = Math.floor(seconds / 60);
        if (interval >= 1) {
          return interval + ' minute' + (interval === 1 ? '' : 's') + ' ago';
        }
        
        return Math.floor(seconds) + ' second' + (seconds === 1 ? '' : 's') + ' ago';
      }

      // Update last updated time
      function updateLastUpdatedTime() {
        const lastUpdatedElement = document.getElementById('last-updated');
        if (lastUpdatedElement && window.dashboardData.lastUpdated) {
          lastUpdatedElement.innerHTML = `<i class="fas fa-clock"></i> <span>Updated: ${timeAgo(window.dashboardData.lastUpdated)}</span>`;
        }
      }

      // Initialize Distribution Chart (Donut Chart)
      let distributionChart;
      function initDistributionChart() {
        const ctx = document.getElementById('distributionChart').getContext('2d');
        
        // Show loading
        document.getElementById('distribution-chart-loading').style.display = 'flex';
        
        // Check if we have payment method distribution data
        if (!window.dashboardData.paymentMethodDistribution || window.dashboardData.paymentMethodDistribution.length === 0) {
          // Create fallback data if no data is available
          window.dashboardData.paymentMethodDistribution = [
            { _id: 'Online Payment', revenue: 50000, count: 100 },
            { _id: 'Cash on Delivery', revenue: 30000, count: 60 },
            { _id: 'Wallet', revenue: 20000, count: 40 }
          ];
        }
        
        // Prepare data for the chart
        const labels = window.dashboardData.paymentMethodDistribution.map(item => item._id);
        const data = window.dashboardData.paymentMethodDistribution.map(item => item.revenue);
        
        // Destroy existing chart if it exists
        if (distributionChart) {
          distributionChart.destroy();
        }
        
        // Create the chart
        distributionChart = new Chart(ctx, {
          type: 'doughnut',
          data: {
            labels: labels,
            datasets: [{
              data: data,
              backgroundColor: chartColors.slice(0, data.length),
              borderColor: chartBorderColors.slice(0, data.length),
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            cutout: '70%',
            plugins: {
              legend: {
                position: 'bottom',
                labels: {
                  boxWidth: 12,
                  padding: 15,
                  font: {
                    size: 11
                  }
                }
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    const label = context.label || '';
                    const value = context.raw || 0;
                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                    const percentage = Math.round((value / total) * 100);
                    return `${label}: ${formatCurrency(value)} (${percentage}%)`;
                  }
                }
              }
            }
          }
        });
        
        // Hide loading
        document.getElementById('distribution-chart-loading').style.display = 'none';
      }

      // Initialize Sales Chart (Line Chart)
      let salesChart;
      function initSalesChart(period = 'monthly', type = 'revenue') {
        const ctx = document.getElementById('salesChart').getContext('2d');
        
        // Show loading
        document.getElementById('sales-chart-loading').style.display = 'flex';
        
        // Determine which data to use based on period
        let chartData;
        let labels;
        
        switch(period) {
          case 'daily':
            chartData = window.dashboardData.dailySalesData || [];
            break;
          case 'weekly':
            chartData = window.dashboardData.weeklySalesData || [];
            break;
          case 'yearly':
            chartData = window.dashboardData.yearlySalesData || [];
            break;
          case 'monthly':
          default:
            chartData = window.dashboardData.monthlySalesData || [];
            break;
        }
        
        // Create fallback data if no data is available
        if (!chartData || chartData.length === 0) {
          const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
          chartData = months.map((month, index) => ({
            _id: `2023-${(index + 1).toString().padStart(2, '0')}`,
            revenue: Math.floor(Math.random() * 50000) + 10000,
            count: Math.floor(Math.random() * 100) + 20,
            label: month
          }));
        }
        
        // Format labels based on period
        if (period === 'monthly') {
          labels = chartData.map(item => {
            const [year, month] = item._id.split('-');
            return `${new Date(parseInt(year), parseInt(month) - 1).toLocaleString('default', { month: 'short' })} ${year}`;
          });
        } else if (period === 'weekly') {
          labels = chartData.map(item => item.label || item._id);
        } else if (period === 'daily') {
          labels = chartData.map(item => {
            const date = new Date(item._id);
            return date.toLocaleString('default', { weekday: 'short', day: 'numeric' });
          });
        } else {
          labels = chartData.map(item => item._id);
        }
        
        // Determine which values to use based on type
        const values = chartData.map(item => type === 'revenue' ? item.revenue : item.count);
        
        // Destroy existing chart if it exists
        if (salesChart) {
          salesChart.destroy();
        }
        
        // Create the chart
        salesChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: labels,
            datasets: [{
              label: type === 'revenue' ? 'Revenue' : 'Orders',
              data: values,
              backgroundColor: type === 'revenue' ? 'rgba(59, 130, 246, 0.1)' : 'rgba(16, 185, 129, 0.1)',
              borderColor: type === 'revenue' ? 'rgb(59, 130, 246)' : 'rgb(16, 185, 129)',
              borderWidth: 2,
              tension: 0.4,
              fill: true
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                ticks: {
                  callback: function(value) {
                    return type === 'revenue' ? formatCurrency(value) : value;
                  },
                  font: {
                    size: 10
                  }
                },
                grid: {
                  color: 'rgba(0, 0, 0, 0.05)'
                }
              },
              x: {
                ticks: {
                  font: {
                    size: 10
                  },
                  maxRotation: 45,
                  minRotation: 45
                },
                grid: {
                  display: false
                }
              }
            },
            plugins: {
              legend: {
                display: true,
                position: 'top',
                labels: {
                  boxWidth: 12,
                  padding: 15,
                  font: {
                    size: 11
                  }
                }
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    const label = context.dataset.label || '';
                    const value = context.raw;
                    return type === 'revenue' 
                      ? `${label}: ${formatCurrency(value)}` 
                      : `${label}: ${value}`;
                  }
                }
              }
            }
          }
        });
        
        // Hide loading
        document.getElementById('sales-chart-loading').style.display = 'none';
      }

      // Fetch dashboard data from API
      async function fetchDashboardData() {
        try {
          // Show loading indicators
          document.getElementById('stats-container').querySelectorAll('.stats-card').forEach(card => {
            card.classList.add('opacity-50');
          });
          document.getElementById('distribution-chart-loading').style.display = 'flex';
          document.getElementById('sales-chart-loading').style.display = 'flex';
          document.getElementById('recent-orders-loading').style.display = 'flex';
          document.getElementById('top-products-loading').style.display = 'flex';
          document.getElementById('top-categories-loading').style.display = 'flex';
          document.getElementById('activities-loading').style.display = 'flex';
          document.getElementById('ledger-entries-loading').style.display = 'flex';
          
          // Fetch data from API
          const response = await fetch('/api/admin/dashboard-data');
          
          if (!response.ok) {
            throw new Error('Failed to fetch dashboard data');
          }
          
          const data = await response.json();
          
          // Update global data
          window.dashboardData = {
            ...data,
            lastUpdated: new Date().toISOString()
          };
          
          // Update stats cards
          document.getElementById('total-revenue').textContent = formatCurrency(data.totalRevenue);
          document.getElementById('total-orders').textContent = data.totalOrders.toLocaleString('en-IN');
          document.getElementById('total-customers').textContent = data.customerCount.toLocaleString('en-IN');
          document.getElementById('total-products').textContent = data.productCount.toLocaleString('en-IN');
          
          // Update revenue change indicator
          const revenueChangeElement = document.getElementById('revenue-change');
          revenueChangeElement.className = `change ${data.revenueChange >= 0 ? 'positive' : 'negative'}`;
          revenueChangeElement.innerHTML = `<i class="fas ${data.revenueChange >= 0 ? 'fa-arrow-up' : 'fa-arrow-down'} me-1"></i>
                                           <span>${Math.abs(data.revenueChange).toFixed(1)}% from last month</span>`;
          
          // Update order change indicator
          const orderChangeElement = document.getElementById('order-change');
          orderChangeElement.className = `change ${data.orderChange >= 0 ? 'positive' : 'negative'}`;
          orderChangeElement.innerHTML = `<i class="fas ${data.orderChange >= 0 ? 'fa-arrow-up' : 'fa-arrow-down'} me-1"></i>
                                         <span>${Math.abs(data.orderChange).toFixed(1)}% from last month</span>`;
          
          // Update customer change indicator
          const customerChangeElement = document.getElementById('customer-change');
          customerChangeElement.className = `change ${data.customerChange >= 0 ? 'positive' : 'negative'}`;
          customerChangeElement.innerHTML = `<i class="fas ${data.customerChange >= 0 ? 'fa-arrow-up' : 'fa-arrow-down'} me-1"></i>
                                            <span>${Math.abs(data.customerChange).toFixed(1)}% from last month</span>`;
          
          // Update product change indicator
          const productChangeElement = document.getElementById('product-change');
          productChangeElement.className = `change ${data.productChange >= 0 ? 'positive' : 'negative'}`;
          productChangeElement.innerHTML = `<i class="fas ${data.productChange >= 0 ? 'fa-arrow-up' : 'fa-arrow-down'} me-1"></i>
                                           <span>${Math.abs(data.productChange).toFixed(1)}% from last month</span>`;
          
          // Update recent orders table
          const recentOrdersTable = document.getElementById('recent-orders-table');
          recentOrdersTable.innerHTML = '';
          
          data.recentOrders.forEach(order => {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td><a href="/admin/orders/${order._id}" class="text-decoration-none">${order.orderNumber}</a></td>
              <td>${order.customer.name}</td>
              <td>${formatDate(order.createdAt)}</td>
              <td>₹${order.totalAmount.toLocaleString('en-IN')}</td>
              <td>
                <span class="status-badge ${order.status.toLowerCase()}">
                  ${order.status}
                </span>
              </td>
            `;
            recentOrdersTable.appendChild(row);
          });
          
          // Update top products table
          const topProductsTable = document.getElementById('top-products-table');
          topProductsTable.innerHTML = '';
          
          data.topProducts.forEach(product => {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td>
                <div class="product-item">
                  <img src="${product.image}" alt="${product.name}" onerror="this.src='/images/placeholder-product.jpg'">
                  <span>${product.name}</span>
                </div>
              </td>
              <td>${product.soldCount}</td>
              <td>₹${product.revenue.toLocaleString('en-IN')}</td>
            `;
            topProductsTable.appendChild(row);
          });
          
          // Update top categories table
          const topCategoriesTable = document.getElementById('top-categories-table');
          topCategoriesTable.innerHTML = '';
          
          data.topCategories.forEach(category => {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td>
                <div class="product-item">
                  <img src="${category.image}" alt="${category.name}" onerror="this.src='/images/placeholder-category.jpg'">
                  <span>${category.name}</span>
                </div>
              </td>
              <td>${category.soldCount}</td>
              <td>₹${category.revenue.toLocaleString('en-IN')}</td>
            `;
            topCategoriesTable.appendChild(row);
          });
          
          // Update activities container
          const activitiesContainer = document.getElementById('activities-container');
          activitiesContainer.innerHTML = '';
          
          data.customerActivities.forEach(activity => {
            const activityItem = document.createElement('div');
            activityItem.className = 'activity-item';
            activityItem.innerHTML = `
              <div class="icon ${activity.type}">
                <i class="${activity.icon}"></i>
              </div>
              <div class="content">
                <p>${activity.message}</p>
                <p class="time">${activity.timeAgo}</p>
              </div>
            `;
            activitiesContainer.appendChild(activityItem);
          });
          
          // Update ledger entries table
          const ledgerEntriesTable = document.getElementById('ledger-entries-table');
          ledgerEntriesTable.innerHTML = '';
          
          data.recentLedgerEntries.forEach(entry => {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td>${formatDate(entry.date)}</td>
              <td>${entry.transactionId}</td>
              <td>${entry.description}</td>
              <td>${entry.category}</td>
              <td class="${entry.debit > 0 ? 'text-danger' : ''}">
                ${entry.debit > 0 ? '₹' + entry.debit.toLocaleString('en-IN') : '-'}
              </td>
              <td class="${entry.credit > 0 ? 'text-success' : ''}">
                ${entry.credit > 0 ? '₹' + entry.credit.toLocaleString('en-IN') : '-'}
              </td>
              <td class="${entry.balance >= 0 ? 'text-success' : 'text-danger'}">
                ₹${entry.balance.toLocaleString('en-IN')}
              </td>
            `;
            ledgerEntriesTable.appendChild(row);
          });
          
          // Update charts
          initDistributionChart();
          initSalesChart(
            document.querySelector('.sales-chart-period').value,
            document.querySelector('.sales-chart-type').value
          );
          
          // Update last updated time
          updateLastUpdatedTime();
          
          // Hide loading indicators
          document.getElementById('stats-container').querySelectorAll('.stats-card').forEach(card => {
            card.classList.remove('opacity-50');
          });
          document.getElementById('distribution-chart-loading').style.display = 'none';
          document.getElementById('sales-chart-loading').style.display = 'none';
          document.getElementById('recent-orders-loading').style.display = 'none';
          document.getElementById('top-products-loading').style.display = 'none';
          document.getElementById('top-categories-loading').style.display = 'none';
          document.getElementById('activities-loading').style.display = 'none';
          document.getElementById('ledger-entries-loading').style.display = 'none';
          
        } catch (error) {
          console.error('Error fetching dashboard data:', error);
          
          // Show error toast
          document.getElementById('error-toast-message').textContent = 'Failed to fetch dashboard data. Please try again.';
          errorToast.show();
          
          // Hide loading indicators
          document.getElementById('stats-container').querySelectorAll('.stats-card').forEach(card => {
            card.classList.remove('opacity-50');
          });
          document.getElementById('distribution-chart-loading').style.display = 'none';
          document.getElementById('sales-chart-loading').style.display = 'none';
          document.getElementById('recent-orders-loading').style.display = 'none';
          document.getElementById('top-products-loading').style.display = 'none';
          document.getElementById('top-categories-loading').style.display = 'none';
          document.getElementById('activities-loading').style.display = 'none';
          document.getElementById('ledger-entries-loading').style.display = 'none';
        }
      }

      // Initialize charts
      initDistributionChart();
      initSalesChart();
      updateLastUpdatedTime();

      // Add event listeners for chart controls
      document.querySelector('.distribution-chart-type').addEventListener('change', function(e) {
        // This would update the distribution chart based on selection
        // For now, we'll just reinitialize with the same data
        if (distributionChart) {
          distributionChart.destroy();
        }
        initDistributionChart();
      });

      document.querySelector('.sales-chart-type').addEventListener('change', function(e) {
        initSalesChart(
          document.querySelector('.sales-chart-period').value,
          e.target.value
        );
      });

      document.querySelector('.sales-chart-period').addEventListener('change', function(e) {
        initSalesChart(
          e.target.value,
          document.querySelector('.sales-chart-type').value
        );
      });

      // Add event listener for refresh button
      document.getElementById('refresh-data').addEventListener('click', function() {
        fetchDashboardData();
      });

      // Add event listener for add ledger form
      document.getElementById('add-ledger-form').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        try {
          // Show loading
          const saveButton = document.getElementById('save-ledger-btn');
          saveButton.disabled = true;
          saveButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
          
          // Get form data
          const formData = new FormData(this);
          const formObject = Object.fromEntries(formData.entries());
          
          // Send data to server
          const response = await fetch('/admin/ledger/add', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(formObject)
          });
          
          if (!response.ok) {
            throw new Error('Failed to add ledger entry');
          }
          
          // Close modal
          const modal = bootstrap.Modal.getInstance(document.getElementById('addLedgerModal'));
          modal.hide();
          
          // Reset form
          this.reset();
          
          // Refresh dashboard data
          fetchDashboardData();
          
          // Enable save button
          saveButton.disabled = false;
          saveButton.innerHTML = 'Save Entry';
          
        } catch (error) {
          console.error('Error adding ledger entry:', error);
          
          // Show error toast
          document.getElementById('error-toast-message').textContent = 'Failed to add ledger entry. Please try again.';
          errorToast.show();
          
          // Enable save button
          const saveButton = document.getElementById('save-ledger-btn');
          saveButton.disabled = false;
          saveButton.innerHTML = 'Save Entry';
        }
      });

      // Set up auto-refresh interval (every 5 minutes)
      setInterval(function() {
        fetchDashboardData();
      }, 5 * 60 * 1000);

      // Initial data fetch
      // Uncomment this line to fetch data on page load
      // fetchDashboardData();
    });
  </script>
</body>
</html>