<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Elite Wear Admin - Edit Banner</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.5/font/bootstrap-icons.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/adminStyle/banner-management.css">
    <style>
        /* Cropper Modal Styles */
        .cropper-container {
            width: 100%;
            height: 400px;
            background-color: #f8f9fa;
            overflow: hidden;
        }
        
        #cropperImage {
            display: block;
            max-width: 100%;
        }
        
        .cropper-view-box {
            outline: 1px solid #fff;
            outline-color: rgba(255, 255, 255, 0.75);
        }
        
        .cropper-modal {
            background-color: rgba(0, 0, 0, 0.5);
        }
        
        .aspect-ratio-buttons {
            margin-top: 15px;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        
        .aspect-ratio-buttons button {
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.8rem;
            background-color: #f1f5f9;
            border: 1px solid #cbd5e1;
            color: #475569;
            transition: all 0.2s;
        }
        
        .aspect-ratio-buttons button:hover {
            background-color: #e2e8f0;
        }
        
        .aspect-ratio-buttons button.active {
            background-color: #4f46e5;
            color: white;
            border-color: #4f46e5;
        }
        
        .crop-controls {
            display: flex;
            justify-content: space-between;
            margin-top: 15px;
        }
        
        .crop-actions {
            display: flex;
            gap: 10px;
        }
        
        .crop-actions button {
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 0.8rem;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .crop-preview {
            margin-top: 15px;
            text-align: center;
        }
        
        .crop-preview img {
            max-width: 100%;
            max-height: 200px;
            border-radius: 8px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }
    </style>
</head>
<body>
    <%- include("../partials/admin/header") %>

    <div class="main-content">
        <div class="page-header">
            <div>
                <h2>Edit Banner</h2>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/admin/">Dashboard</a></li>
                        <li class="breadcrumb-item"><a href="/admin/banner">Banners</a></li>
                        <li class="breadcrumb-item active">Edit Banner</li>
                    </ol>
                </nav>
            </div>
            <div class="user-profile">
                <img src="/api/placeholder/40/40" alt="User Avatar">
                <div>
                    <div>Aimad</div>
                    <small class="text-muted">Admin</small>
                </div>
            </div>
        </div>

        <div class="form-container">
            <h3 class="form-title">
                <i class="bi bi-pencil-square me-2"></i>
                Edit Banner
            </h3>

            <form action="/admin/editBaner?id=<%= banner._id %>" method="POST" enctype="multipart/form-data" id="bannerForm">
                <div class="form-group">
                    <label for="title" class="form-label">Banner Title</label>
                    <input type="text" class="form-control" id="title" name="title" value="<%= banner.title %>" required>
                </div>

                <div class="upload-area" id="dropzone">
                    <% if(banner.image) { %>
                        <img src="<%= banner.image %>" alt="Current Banner" class="preview-image" style="max-width: 100%; max-height: 200px; margin-bottom: 15px; border-radius: 8px; box-shadow: var(--shadow);">
                        <p style="margin: 10px 0; font-size: 0.875rem;">Current banner image</p>
                    <% } else { %>
                        <i class="bi bi-cloud-arrow-up upload-icon"></i>
                        <p class="upload-text">Drag and drop image here, or click to browse</p>
                        <p class="text-muted small">Recommended size: 1200 x 400 pixels, Max size: 5MB</p>
                    <% } %>
                    <button type="button" class="upload-btn" id="selectImage">
                        <i class="bi bi-arrow-repeat me-2"></i>Change Image
                    </button>
                    <input type="file" id="fileInput" name="posterImage" style="display: none;" accept="image/*">
                    
                    <!-- Hidden input for the cropped image data -->
                    <input type="hidden" id="croppedImageData" name="croppedImageData">
                    
                    <!-- Flag to indicate if the image was changed -->
                    <input type="hidden" id="imageChanged" name="imageChanged" value="false">
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="startDate" class="form-label">Starting Date</label>
                        <input type="date" class="form-control" id="startDate" name="startingDate"
                            value="<%= banner.startingDate.toISOString().split('T')[0] %>" required>
                    </div>

                    <div class="form-group">
                        <label for="endDate" class="form-label">End Date</label>
                        <input type="date" class="form-control" id="endDate" name="endingDate" 
                            value="<%= banner.endingDate.toISOString().split('T')[0] %>" required>
                    </div>
                </div>

                <div class="form-group">
                    <label for="link" class="form-label">Banner Link (Optional)</label>
                    <input type="url" class="form-control" id="link" name="link" 
                        value="<%= banner.link !== '#' ? banner.link : '' %>" placeholder="https://example.com/page">
                    <small class="text-muted">Where users will be directed when they click on the banner</small>
                </div>

                <div class="form-group">
                    <label for="status" class="form-label">Current Status</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <% if(banner.status.toLowerCase().includes('upcoming')) { %>
                                <i class="bi bi-clock text-info"></i>
                            <% } else if(banner.status.toLowerCase().includes('expired')) { %>
                                <i class="bi bi-x-circle text-danger"></i>
                            <% } else { %>
                                <i class="bi bi-check-circle text-success"></i>
                            <% } %>
                        </span>
                        <input type="text" class="form-control" id="status" value="<%= banner.status %>" readonly>
                        <input type="hidden" name="status" value="<%= banner.status %>">
                    </div>
                    <small class="text-muted">Status will be automatically updated based on dates</small>
                </div>

                <div class="d-flex gap-3 mt-4">
                    <a href="/admin/banner" class="btn btn-outline-secondary flex-grow-1">
                        <i class="bi bi-arrow-left me-2"></i>Cancel
                    </a>
                    <button type="submit" class="submit-btn flex-grow-1">
                        <i class="bi bi-save me-2"></i>Save Changes
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Image Cropper Modal -->
    <div class="modal fade" id="cropperModal" tabindex="-1" aria-labelledby="cropperModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cropperModalLabel">Crop Banner Image</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="cropper-container">
                        <img id="cropperImage" src="/placeholder.svg" alt="Image to crop">
                    </div>
                    
                    <div class="aspect-ratio-buttons">
                        <button type="button" class="aspect-ratio-btn active" data-ratio="3/1">3:1 (Desktop)</button>
                        <button type="button" class="aspect-ratio-btn" data-ratio="2/1">2:1 (Tablet)</button>
                        <button type="button" class="aspect-ratio-btn" data-ratio="16/9">16:9 (Widescreen)</button>
                        <button type="button" class="aspect-ratio-btn" data-ratio="1/1">1:1 (Square)</button>
                        <button type="button" class="aspect-ratio-btn" data-ratio="NaN">Free</button>
                    </div>
                    
                    <div class="crop-controls">
                        <div class="crop-actions">
                            <button type="button" class="btn btn-outline-secondary" id="rotateLeftBtn">
                                <i class="bi bi-arrow-counterclockwise"></i> Rotate Left
                            </button>
                            <button type="button" class="btn btn-outline-secondary" id="rotateRightBtn">
                                <i class="bi bi-arrow-clockwise"></i> Rotate Right
                            </button>
                            <button type="button" class="btn btn-outline-secondary" id="flipHorizontalBtn">
                                <i class="bi bi-symmetry-horizontal"></i> Flip H
                            </button>
                            <button type="button" class="btn btn-outline-secondary" id="flipVerticalBtn">
                                <i class="bi bi-symmetry-vertical"></i> Flip V
                            </button>
                        </div>
                        <button type="button" class="btn btn-outline-secondary" id="resetCropBtn">
                            <i class="bi bi-arrow-repeat"></i> Reset
                        </button>
                    </div>
                    
                    <div class="crop-preview">
                        <h6>Preview</h6>
                        <div id="previewContainer"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="cropBtn">Crop & Use</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <script>
        // Image upload and cropping
        const dropzone = document.getElementById('dropzone');
        const fileInput = document.getElementById('fileInput');
        const selectImageBtn = document.getElementById('selectImage');
        const cropperModal = new bootstrap.Modal(document.getElementById('cropperModal'));
        const cropperImage = document.getElementById('cropperImage');
        const cropBtn = document.getElementById('cropBtn');
        const croppedImageData = document.getElementById('croppedImageData');
        const imageChanged = document.getElementById('imageChanged');
        
        let cropper;

        // Initialize cropper when image is loaded in the modal
        function initCropper() {
            if (cropper) {
                cropper.destroy();
            }
            
            cropper = new Cropper(cropperImage, {
                aspectRatio: 3 / 1,
                viewMode: 1,
                dragMode: 'move',
                autoCropArea: 0.8,
                restore: false,
                guides: true,
                center: true,
                highlight: false,
                cropBoxMovable: true,
                cropBoxResizable: true,
                toggleDragModeOnDblclick: false,
                preview: '#previewContainer'
            });
        }

        // Handle file selection
        selectImageBtn.addEventListener('click', function(e) {
            e.preventDefault();
            fileInput.click();
        });

        dropzone.addEventListener('click', function(e) {
            if (e.target === dropzone || e.target.classList.contains('upload-icon') || e.target.classList.contains('upload-text')) {
                fileInput.click();
            }
        });

        fileInput.addEventListener('change', function() {
            if (this.files && this.files[0]) {
                handleFile(this.files[0]);
            }
        });

        dropzone.addEventListener('dragover', function(e) {
            e.preventDefault();
            dropzone.classList.add('active');
        });

        dropzone.addEventListener('dragleave', function() {
            dropzone.classList.remove('active');
        });

        dropzone.addEventListener('drop', function(e) {
            e.preventDefault();
            dropzone.classList.remove('active');

            if (e.dataTransfer.files && e.dataTransfer.files[0]) {
                fileInput.files = e.dataTransfer.files;
                handleFile(e.dataTransfer.files[0]);
            }
        });

        function handleFile(file) {
            // Validate file type
            if (!file.type.startsWith('image/')) {
                alert('Please select an image file');
                return;
            }
            
            // Validate file size (max 5MB)
            if (file.size > 5 * 1024 * 1024) {
                alert('File size exceeds 5MB limit');
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                // Set the image source for the cropper
                cropperImage.src = e.target.result;
                
                // Show the cropper modal
                cropperModal.show();
                
                // Initialize the cropper after the modal is shown
                document.getElementById('cropperModal').addEventListener('shown.bs.modal', function() {
                    initCropper();
                }, { once: true });
            };
            reader.readAsDataURL(file);
        }

        // Aspect ratio buttons
        document.querySelectorAll('.aspect-ratio-btn').forEach(button => {
            button.addEventListener('click', function() {
                // Update active state
                document.querySelectorAll('.aspect-ratio-btn').forEach(btn => {
                    btn.classList.remove('active');
                });
                this.classList.add('active');
                
                // Get the aspect ratio
                const ratio = this.getAttribute('data-ratio');
                let aspectRatio;
                
                if (ratio === 'NaN') {
                    aspectRatio = NaN; // Free aspect ratio
                } else {
                    const [width, height] = ratio.split('/');
                    aspectRatio = parseFloat(width) / parseFloat(height);
                }
                
                // Set the new aspect ratio
                cropper.setAspectRatio(aspectRatio);
            });
        });

        // Rotation and flip controls
        document.getElementById('rotateLeftBtn').addEventListener('click', function() {
            cropper.rotate(-90);
        });

        document.getElementById('rotateRightBtn').addEventListener('click', function() {
            cropper.rotate(90);
        });

        document.getElementById('flipHorizontalBtn').addEventListener('click', function() {
            cropper.scaleX(cropper.getData().scaleX === 1 ? -1 : 1);
        });

        document.getElementById('flipVerticalBtn').addEventListener('click', function() {
            cropper.scaleY(cropper.getData().scaleY === 1 ? -1 : 1);
        });

        document.getElementById('resetCropBtn').addEventListener('click', function() {
            cropper.reset();
        });

        // Crop button
        cropBtn.addEventListener('click', function() {
            // Get the cropped canvas
            const canvas = cropper.getCroppedCanvas({
                width: 1200, // Set maximum width
                imageSmoothingEnabled: true,
                imageSmoothingQuality: 'high',
            });
            
            if (!canvas) {
                alert('Cropping failed. Please try again.');
                return;
            }
            
            // Convert canvas to blob
            canvas.toBlob(function(blob) {
                // Create a data URL from the blob
                const reader = new FileReader();
                reader.onload = function(e) {
                    // Store the data URL in the hidden input
                    const dataUrl = e.target.result;
                    console.log('Image cropped successfully, data URL length:', dataUrl.length);
                    
                    // Ensure the data URL is properly formatted
                    if (!dataUrl.startsWith('data:image/')) {
                        console.error('Invalid data URL format');
                        alert('Error: Invalid image format. Please try again.');
                        return;
                    }
                    
                    croppedImageData.value = dataUrl;
                    
                    // Set the flag to indicate the image was changed
                    imageChanged.value = 'true';
                    
                    // Update the dropzone with the cropped image
                    updateDropzoneWithCroppedImage(dataUrl);
                    
                    // Close the modal
                    cropperModal.hide();
                };
                reader.readAsDataURL(blob);
            }, 'image/jpeg', 0.9); // JPEG format with 90% quality
        });

        function updateDropzoneWithCroppedImage(dataUrl) {
            // Remove existing elements
            const icon = dropzone.querySelector('.upload-icon');
            const text = dropzone.querySelector('.upload-text');
            const small = dropzone.querySelector('.small');
            
            if (icon) icon.style.display = 'none';
            if (text) text.style.display = 'none';
            if (small) small.style.display = 'none';
            
            // Remove existing preview if any
            const existingPreview = dropzone.querySelector('.preview-image');
            const existingText = dropzone.querySelector('p:not(.upload-text):not(.small)');
            
            if (existingPreview) existingPreview.remove();
            if (existingText) existingText.remove();

            // Create preview
            const img = document.createElement('img');
            img.src = dataUrl;
            img.className = 'preview-image';
            img.style.maxWidth = '100%';
            img.style.maxHeight = '200px';
            img.style.marginBottom = '15px';
            img.style.borderRadius = '8px';
            img.style.boxShadow = 'var(--shadow)';
            
            // Add success message
            const successText = document.createElement('p');
            successText.innerHTML = '<i class="bi bi-check-circle-fill text-success me-2"></i>Image updated successfully';
            successText.style.margin = '10px 0';
            successText.style.fontSize = '0.875rem';
            
            // Insert before the button
            dropzone.insertBefore(img, selectImageBtn);
            dropzone.insertBefore(successText, selectImageBtn);
        }

        // Form submission
        document.getElementById('bannerForm').addEventListener('submit', function(e) {
            e.preventDefault(); // Prevent default form submission
            
            // Show loading state
            const submitBtn = document.querySelector('.submit-btn');
            const originalBtnText = submitBtn.innerHTML;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Processing...';
            
            // Get form data
            const formData = {
                title: document.getElementById('title').value,
                startingDate: document.getElementById('startDate').value,
                endingDate: document.getElementById('endDate').value,
                link: document.getElementById('link').value,
                imageChanged: document.getElementById('imageChanged').value,
                croppedImageData: document.getElementById('croppedImageData').value
            };
            
            // Log form data for debugging
            console.log('Form submission:');
            console.log('- Title:', formData.title);
            console.log('- Start date:', formData.startingDate);
            console.log('- End date:', formData.endingDate);
            console.log('- Image changed:', formData.imageChanged);
            console.log('- Image data present:', formData.croppedImageData ? 'Yes' : 'No');
            if (formData.croppedImageData) {
                console.log('- Image data length:', formData.croppedImageData.length);
            }
            
            // Get the form action URL (includes the banner ID)
            const formAction = this.getAttribute('action');
            
            // Submit the form with fetch API
            fetch(formAction, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
            .then(response => {
                console.log('Response status:', response.status);
                
                if (response.redirected) {
                    console.log('Redirecting to:', response.url);
                    window.location.href = response.url;
                    return null;
                } else if (response.ok) {
                    // If response is OK but not a redirect
                    return response.json().catch(() => null); // Handle case where response is not JSON
                } else {
                    // If response is not OK, try to parse as JSON for error message
                    return response.json().catch(() => {
                        throw new Error(`Server error: ${response.status} ${response.statusText}`);
                    });
                }
            })
            .then(data => {
                if (data && data.error) {
                    console.error('Error from server:', data.error);
                    alert('Error: ' + data.error);
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalBtnText;
                } else if (data && data.success) {
                    // Handle success if needed
                    window.location.href = '/admin/banner';
                }
            })
            .catch(error => {
                console.error('Fetch error:', error);
                alert('An error occurred while updating the banner: ' + error.message);
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalBtnText;
            });
        });

        // Date validation
        document.getElementById('endDate').addEventListener('change', function() {
            const startDate = new Date(document.getElementById('startDate').value);
            const endDate = new Date(this.value);
            
            if (endDate <= startDate) {
                alert('End date must be after start date');
                this.valueAsDate = new Date(startDate);
                this.valueAsDate.setDate(startDate.getDate() + 1);
            }
        });

        document.getElementById('startDate').addEventListener('change', function() {
            const startDate = new Date(this.value);
            const endDate = new Date(document.getElementById('endDate').value);
            
            if (startDate >= endDate) {
                const newEndDate = new Date(startDate);
                newEndDate.setDate(startDate.getDate() + 1);
                document.getElementById('endDate').valueAsDate = newEndDate;
            }
        });
    </script>
</body>
</html>