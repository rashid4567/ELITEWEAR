<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Elite Wear Admin - Edit Banner</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.5/font/bootstrap-icons.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/adminStyle/editBanner">
</head>
<body>
    <%- include("../partials/admin/header") %>

    <div class="main-content">
        <div class="page-header">
            <div>
                <h2>Edit Banner</h2>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/admin/">Dashboard</a></li>
                        <li class="breadcrumb-item"><a href="/admin/banner">Banners</a></li>
                        <li class="breadcrumb-item active">Edit Banner</li>
                    </ol>
                </nav>
            </div>
            <div class="user-profile">
                <img src="/api/placeholder/40/40" alt="User Avatar">
                <div>
                    <div>Aimad</div>
                    <small class="text-muted">Admin</small>
                </div>
            </div>
        </div>

        <!-- Toast Container -->
        <div class="toast-container" id="toastContainer"></div>

        <div class="form-container">
            <h3 class="form-title">
                <i class="bi bi-pencil-square me-2"></i>
                Edit Banner
            </h3>

            <form action="/admin/editBaner?id=<%= banner._id %>" method="POST" enctype="multipart/form-data" id="bannerForm" novalidate>
                <div class="form-group">
                    <label for="title" class="form-label">
                        Banner Title
                        <span class="text-danger">*</span>
                        <span class="tooltip-icon" title="This title will be displayed on the banner">?</span>
                    </label>
                    <input 
                        type="text" 
                        class="form-control" 
                        id="title" 
                        name="title" 
                        value="<%= banner.title %>" 
                        required
                        minlength="3"
                        maxlength="100"
                    >
                    <div class="invalid-feedback">
                        <i class="bi bi-exclamation-circle me-1"></i>
                        Please enter a valid title (3-100 characters)
                    </div>
                </div>

                <div class="upload-area" id="dropzone">
                    <% if(banner.image) { %>
                        <img src="<%= banner.image %>" alt="Current Banner" class="preview-image" style="max-width: 100%; max-height: 200px; margin-bottom: 15px; border-radius: 8px; box-shadow: var(--shadow);">
                        <p style="margin: 10px 0; font-size: 0.875rem;">Current banner image</p>
                    <% } else { %>
                        <i class="bi bi-cloud-arrow-up upload-icon"></i>
                        <p class="upload-text">Drag and drop image here, or click to browse</p>
                        <p class="text-muted small">Recommended size: 1200 x 400 pixels, Max size: 5MB</p>
                    <% } %>
                    <button type="button" class="upload-btn" id="selectImage">
                        <i class="bi bi-arrow-repeat me-2"></i>Change Image
                    </button>
                    <input type="file" id="fileInput" name="posterImage" style="display: none;" accept="image/*">
                    
                    <!-- Hidden input for the cropped image data -->
                    <input type="hidden" id="croppedImageData" name="croppedImageData">
                    
                    <!-- Flag to indicate if the image was changed -->
                    <input type="hidden" id="imageChanged" name="imageChanged" value="false">
                </div>
                <div class="invalid-feedback" id="imageError" style="display: none;">
                    <i class="bi bi-exclamation-circle me-1"></i>
                    Please select a valid image file
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="startDate" class="form-label">
                            Starting Date
                            <span class="text-danger">*</span>
                            <span class="tooltip-icon" title="Banner will be active from this date">?</span>
                        </label>
                        <input 
                            type="date" 
                            class="form-control" 
                            id="startDate" 
                            name="startingDate" 
                            value="<%= banner.startingDate.toISOString().split('T')[0] %>" 
                            required
                        >
                        <div class="invalid-feedback">
                            <i class="bi bi-exclamation-circle me-1"></i>
                            Please select a valid starting date
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="endDate" class="form-label">
                            End Date
                            <span class="text-danger">*</span>
                            <span class="tooltip-icon" title="Banner will be inactive after this date">?</span>
                        </label>
                        <input 
                            type="date" 
                            class="form-control" 
                            id="endDate" 
                            name="endingDate" 
                            value="<%= banner.endingDate.toISOString().split('T')[0] %>" 
                            required
                        >
                        <div class="invalid-feedback">
                            <i class="bi bi-exclamation-circle me-1"></i>
                            Please select a valid end date
                        </div>
                    </div>
                </div>
                
                <!-- Date validation error message -->
                <div class="date-validation-error" id="dateValidationError">
                    <i class="bi bi-exclamation-triangle-fill me-1"></i>
                    End date must be after start date
                </div>

                <div class="form-group">
                    <label for="link" class="form-label">
                        Banner Link
                        <span class="tooltip-icon" title="Where users will be directed when they click on the banner">?</span>
                    </label>
                    <input 
                        type="url" 
                        class="form-control" 
                        id="link" 
                        name="link" 
                        value="<%= banner.link !== '#' ? banner.link : '' %>" 
                        placeholder="https://example.com/page"
                    >
                    <div class="invalid-feedback">
                        <i class="bi bi-exclamation-circle me-1"></i>
                        Please enter a valid URL (e.g., https://example.com)
                    </div>
                    <small class="text-muted">Where users will be directed when they click on the banner (optional)</small>
                </div>

                <div class="form-group">
                    <label for="status" class="form-label">Current Status</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <% if(banner.status.toLowerCase().includes('upcoming')) { %>
                                <i class="bi bi-clock text-info"></i>
                            <% } else if(banner.status.toLowerCase().includes('expired')) { %>
                                <i class="bi bi-x-circle text-danger"></i>
                            <% } else { %>
                                <i class="bi bi-check-circle text-success"></i>
                            <% } %>
                        </span>
                        <input type="text" class="form-control" id="status" value="<%= banner.status %>" readonly>
                        <input type="hidden" name="status" value="<%= banner.status %>">
                    </div>
                    <small class="text-muted">Status will be automatically updated based on dates</small>
                </div>

                <div class="d-flex gap-3 mt-4">
                    <button type="button" class="btn btn-outline-secondary flex-grow-1" id="cancelBtn">
                        <i class="bi bi-arrow-left me-2"></i>Cancel
                    </button>
                    <button type="button" class="submit-btn flex-grow-1" id="submitBtn">
                        <i class="bi bi-save me-2"></i>Save Changes
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Image Cropper Modal -->
    <div class="modal fade" id="cropperModal" tabindex="-1" aria-labelledby="cropperModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cropperModalLabel">
                        <i class="bi bi-crop me-2"></i>
                        Crop Banner Image
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="cropper-container">
                        <img id="cropperImage" src="/placeholder.svg" alt="Image to crop">
                    </div>
                    
                    <div class="aspect-ratio-buttons">
                        <button type="button" class="aspect-ratio-btn active" data-ratio="3/1">3:1 (Desktop)</button>
                        <button type="button" class="aspect-ratio-btn" data-ratio="2/1">2:1 (Tablet)</button>
                        <button type="button" class="aspect-ratio-btn" data-ratio="16/9">16:9 (Widescreen)</button>
                        <button type="button" class="aspect-ratio-btn" data-ratio="1/1">1:1 (Square)</button>
                        <button type="button" class="aspect-ratio-btn" data-ratio="NaN">Free</button>
                    </div>
                    
                    <div class="crop-controls">
                        <div class="crop-actions">
                            <button type="button" class="btn btn-outline-secondary" id="rotateLeftBtn">
                                <i class="bi bi-arrow-counterclockwise"></i> Rotate Left
                            </button>
                            <button type="button" class="btn btn-outline-secondary" id="rotateRightBtn">
                                <i class="bi bi-arrow-clockwise"></i> Rotate Right
                            </button>
                            <button type="button" class="btn btn-outline-secondary" id="flipHorizontalBtn">
                                <i class="bi bi-symmetry-horizontal"></i> Flip H
                            </button>
                            <button type="button" class="btn btn-outline-secondary" id="flipVerticalBtn">
                                <i class="bi bi-symmetry-vertical"></i> Flip V
                            </button>
                        </div>
                        <button type="button" class="btn btn-outline-secondary" id="resetCropBtn">
                            <i class="bi bi-arrow-repeat"></i> Reset
                        </button>
                    </div>
                    
                    <div class="crop-preview">
                        <h6>Preview</h6>
                        <div id="previewContainer"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="cropBtn">
                        <i class="bi bi-check2 me-1"></i>
                        Crop & Use
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div class="modal fade confirmation-modal" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmationModalLabel">
                        <i class="bi bi-question-circle text-primary me-2"></i>
                        Confirm Banner Update
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to update this banner with the following changes?</p>
                    
                    <div class="confirmation-details">
                        <div class="confirmation-item">
                            <div class="confirmation-label">Title:</div>
                            <div class="confirmation-value" id="confirmTitle"></div>
                        </div>
                        <div class="confirmation-item">
                            <div class="confirmation-label">Display Period:</div>
                            <div class="confirmation-value" id="confirmDates"></div>
                        </div>
                        <div class="confirmation-item">
                            <div class="confirmation-label">Link:</div>
                            <div class="confirmation-value" id="confirmLink"></div>
                        </div>
                        <div class="confirmation-item">
                            <div class="confirmation-label">Image:</div>
                            <div class="confirmation-value" id="confirmImage"></div>
                        </div>
                    </div>
                    
                    <img id="confirmImagePreview" class="confirmation-image" src="/placeholder.svg" alt="Banner Preview" style="display: none;">
                    
                    <div class="alert alert-info mt-3">
                        <div class="alert-icon">
                            <i class="bi bi-info-circle-fill"></i>
                        </div>
                        <div class="alert-content">
                            <h5 class="alert-heading">Important Note</h5>
                            <p class="alert-message">
                                This update will be applied immediately. The banner status will be automatically updated based on the selected dates.
                            </p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle me-1"></i>
                        Cancel
                    </button>
                    <button type="button" class="btn btn-primary" id="confirmSubmitBtn">
                        <i class="bi bi-check-circle me-1"></i>
                        Yes, Update Banner
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Cancel Confirmation Modal -->
    <div class="modal fade confirmation-modal" id="cancelConfirmationModal" tabindex="-1" aria-labelledby="cancelConfirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cancelConfirmationModalLabel">
                        <i class="bi bi-exclamation-triangle text-warning me-2"></i>
                        Discard Changes
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to discard your changes to this banner?</p>
                    
                    <div class="alert alert-warning">
                        <div class="alert-icon">
                            <i class="bi bi-exclamation-triangle-fill"></i>
                        </div>
                        <div class="alert-content">
                            <h5 class="alert-heading">Warning</h5>
                            <p class="alert-message">
                                Any unsaved changes will be lost. This action cannot be undone.
                            </p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-arrow-return-left me-1"></i>
                        Continue Editing
                    </button>
                    <button type="button" class="btn btn-danger" id="confirmCancelBtn">
                        <i class="bi bi-x-circle me-1"></i>
                        Yes, Discard Changes
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Success Modal -->
    <div class="modal fade confirmation-modal" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="successModalLabel">
                        <i class="bi bi-check-circle text-success me-2"></i>
                        Banner Updated Successfully
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="text-center mb-4">
                        <i class="bi bi-check-circle-fill text-success" style="font-size: 4rem;"></i>
                        <h4 class="mt-3">Banner Updated Successfully!</h4>
                        <p class="text-muted">Your banner has been updated and is now live.</p>
                    </div>
                    
                    <div class="alert alert-success">
                        <div class="alert-icon">
                            <i class="bi bi-info-circle-fill"></i>
                        </div>
                        <div class="alert-content">
                            <p class="alert-message">
                                The banner status has been automatically updated based on the selected dates.
                            </p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" id="viewBannerBtn">
                        <i class="bi bi-eye me-1"></i>
                        View Banner
                    </button>
                    <button type="button" class="btn btn-primary" id="goToListBtn">
                        <i class="bi bi-list me-1"></i>
                        Go to Banner List
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Error Modal -->
    <div class="modal fade confirmation-modal" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="errorModalLabel">
                        <i class="bi bi-exclamation-circle text-danger me-2"></i>
                        Error Updating Banner
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="text-center mb-4">
                        <i class="bi bi-exclamation-circle-fill text-danger" style="font-size: 4rem;"></i>
                        <h4 class="mt-3">Update Failed</h4>
                        <p class="text-muted">There was an error updating the banner.</p>
                    </div>
                    
                    <div class="alert alert-danger">
                        <div class="alert-icon">
                            <i class="bi bi-exclamation-triangle-fill"></i>
                        </div>
                        <div class="alert-content">
                            <h5 class="alert-heading">Error Details</h5>
                            <p class="alert-message" id="errorMessage">
                                An unexpected error occurred. Please try again.
                            </p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-arrow-return-left me-1"></i>
                        Continue Editing
                    </button>
                    <button type="button" class="btn btn-primary" id="tryAgainBtn">
                        <i class="bi bi-arrow-repeat me-1"></i>
                        Try Again
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize variables
            const bannerForm = document.getElementById('bannerForm');
            const dropzone = document.getElementById('dropzone');
            const fileInput = document.getElementById('fileInput');
            const selectImageBtn = document.getElementById('selectImage');
            const cropperModal = new bootstrap.Modal(document.getElementById('cropperModal'));
            const confirmationModal = new bootstrap.Modal(document.getElementById('confirmationModal'));
            const cancelConfirmationModal = new bootstrap.Modal(document.getElementById('cancelConfirmationModal'));
            const successModal = new bootstrap.Modal(document.getElementById('successModal'));
            const errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
            const cropperImage = document.getElementById('cropperImage');
            const cropBtn = document.getElementById('cropBtn');
            const submitBtn = document.getElementById('submitBtn');
            const confirmSubmitBtn = document.getElementById('confirmSubmitBtn');
            const cancelBtn = document.getElementById('cancelBtn');
            const confirmCancelBtn = document.getElementById('confirmCancelBtn');
            const croppedImageData = document.getElementById('croppedImageData');
            const imageChanged = document.getElementById('imageChanged');
            const titleInput = document.getElementById('title');
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');
            const linkInput = document.getElementById('link');
            const dateValidationError = document.getElementById('dateValidationError');
            
            let cropper;
            let formChanged = false;
            
            // Initialize tooltips
            const tooltips = document.querySelectorAll('[title]');
            tooltips.forEach(tooltip => {
                new bootstrap.Tooltip(tooltip);
            });

            // Initialize cropper when image is loaded in the modal
            function initCropper() {
                if (cropper) {
                    cropper.destroy();
                }
                
                cropper = new Cropper(cropperImage, {
                    aspectRatio: 3 / 1,
                    viewMode: 1,
                    dragMode: 'move',
                    autoCropArea: 0.8,
                    restore: false,
                    guides: true,
                    center: true,
                    highlight: false,
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                    toggleDragModeOnDblclick: false,
                    preview: '#previewContainer'
                });
            }

            // Handle file selection
            selectImageBtn.addEventListener('click', function(e) {
                e.preventDefault();
                fileInput.click();
            });

            dropzone.addEventListener('click', function(e) {
                if (e.target === dropzone || e.target.classList.contains('upload-icon') || e.target.classList.contains('upload-text')) {
                    fileInput.click();
                }
            });

            fileInput.addEventListener('change', function() {
                if (this.files && this.files[0]) {
                    handleFile(this.files[0]);
                }
            });

            dropzone.addEventListener('dragover', function(e) {
                e.preventDefault();
                dropzone.classList.add('active');
            });

            dropzone.addEventListener('dragleave', function() {
                dropzone.classList.remove('active');
            });

            dropzone.addEventListener('drop', function(e) {
                e.preventDefault();
                dropzone.classList.remove('active');

                if (e.dataTransfer.files && e.dataTransfer.files[0]) {
                    fileInput.files = e.dataTransfer.files;
                    handleFile(e.dataTransfer.files[0]);
                }
            });

            function handleFile(file) {
                // Validate file type
                if (!file.type.startsWith('image/')) {
                    showToast('error', 'Invalid File Type', 'Please select an image file (JPEG, PNG, etc.)');
                    return;
                }
                
                // Validate file size (max 5MB)
                if (file.size > 5 * 1024 * 1024) {
                    showToast('error', 'File Too Large', 'Image size should not exceed 5MB');
                    return;
                }

                const reader = new FileReader();
                reader.onload = function(e) {
                    // Set the image source for the cropper
                    cropperImage.src = e.target.result;
                    
                    // Show the cropper modal
                    cropperModal.show();
                    
                    // Initialize the cropper after the modal is shown
                    document.getElementById('cropperModal').addEventListener('shown.bs.modal', function() {
                        initCropper();
                    }, { once: true });
                };
                reader.readAsDataURL(file);
                
                // Mark form as changed
                formChanged = true;
            }

            // Aspect ratio buttons
            document.querySelectorAll('.aspect-ratio-btn').forEach(button => {
                button.addEventListener('click', function() {
                    // Update active state
                    document.querySelectorAll('.aspect-ratio-btn').forEach(btn => {
                        btn.classList.remove('active');
                    });
                    this.classList.add('active');
                    
                    // Get the aspect ratio
                    const ratio = this.getAttribute('data-ratio');
                    let aspectRatio;
                    
                    if (ratio === 'NaN') {
                        aspectRatio = NaN; // Free aspect ratio
                    } else {
                        const [width, height] = ratio.split('/');
                        aspectRatio = parseFloat(width) / parseFloat(height);
                    }
                    
                    // Set the new aspect ratio
                    cropper.setAspectRatio(aspectRatio);
                });
            });

            // Rotation and flip controls
            document.getElementById('rotateLeftBtn').addEventListener('click', function() {
                cropper.rotate(-90);
            });

            document.getElementById('rotateRightBtn').addEventListener('click', function() {
                cropper.rotate(90);
            });

            document.getElementById('flipHorizontalBtn').addEventListener('click', function() {
                cropper.scaleX(cropper.getData().scaleX === 1 ? -1 : 1);
            });

            document.getElementById('flipVerticalBtn').addEventListener('click', function() {
                cropper.scaleY(cropper.getData().scaleY === 1 ? -1 : 1);
            });

            document.getElementById('resetCropBtn').addEventListener('click', function() {
                cropper.reset();
            });

            // Crop button
            cropBtn.addEventListener('click', function() {
                // Show loading state
                this.disabled = true;
                this.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Processing...';
                
                // Get the cropped canvas
                const canvas = cropper.getCroppedCanvas({
                    width: 1200, // Set maximum width
                    imageSmoothingEnabled: true,
                    imageSmoothingQuality: 'high',
                });
                
                if (!canvas) {
                    showToast('error', 'Cropping Failed', 'Unable to crop the image. Please try again.');
                    this.disabled = false;
                    this.innerHTML = '<i class="bi bi-check2 me-1"></i>Crop & Use';
                    return;
                }
                
                // Convert canvas to blob
                canvas.toBlob(function(blob) {
                    // Create a data URL from the blob
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        // Store the data URL in the hidden input
                        const dataUrl = e.target.result;
                        
                        // Ensure the data URL is properly formatted
                        if (!dataUrl.startsWith('data:image/')) {
                            showToast('error', 'Invalid Image Format', 'The image format is not supported. Please try another image.');
                            cropBtn.disabled = false;
                            cropBtn.innerHTML = '<i class="bi bi-check2 me-1"></i>Crop & Use';
                            return;
                        }
                        
                        croppedImageData.value = dataUrl;
                        
                        // Set the flag to indicate the image was changed
                        imageChanged.value = 'true';
                        
                        // Update the dropzone with the cropped image
                        updateDropzoneWithCroppedImage(dataUrl);
                        
                        // Close the modal
                        cropperModal.hide();
                        
                        // Reset crop button
                        cropBtn.disabled = false;
                        cropBtn.innerHTML = '<i class="bi bi-check2 me-1"></i>Crop & Use';
                        
                        // Show success message
                        showToast('success', 'Image Cropped', 'The banner image has been cropped successfully.');
                    };
                    reader.readAsDataURL(blob);
                }, 'image/jpeg', 0.9); // JPEG format with 90% quality
            });

            function updateDropzoneWithCroppedImage(dataUrl) {
                // Remove existing elements
                const icon = dropzone.querySelector('.upload-icon');
                const text = dropzone.querySelector('.upload-text');
                const small = dropzone.querySelector('.small');
                
                if (icon) icon.style.display = 'none';
                if (text) text.style.display = 'none';
                if (small) small.style.display = 'none';
                
                // Remove existing preview if any
                const existingPreview = dropzone.querySelector('.preview-image');
                const existingText = dropzone.querySelector('p:not(.upload-text):not(.small)');
                
                if (existingPreview) existingPreview.remove();
                if (existingText) existingText.remove();

                // Create preview
                const img = document.createElement('img');
                img.src = dataUrl;
                img.className = 'preview-image';
                img.style.maxWidth = '100%';
                img.style.maxHeight = '200px';
                img.style.marginBottom = '15px';
                img.style.borderRadius = '8px';
                img.style.boxShadow = 'var(--shadow)';
                
                // Add success message
                const successText = document.createElement('p');
                successText.innerHTML = '<i class="bi bi-check-circle-fill text-success me-2"></i>Image updated successfully';
                successText.style.margin = '10px 0';
                successText.style.fontSize = '0.875rem';
                
                // Insert before the button
                dropzone.insertBefore(img, selectImageBtn);
                dropzone.insertBefore(successText, selectImageBtn);
            }

            // Form validation
            function validateForm() {
                let isValid = true;
                
                // Validate title
                if (!titleInput.value || titleInput.value.length < 3 || titleInput.value.length > 100) {
                    titleInput.classList.add('is-invalid');
                    isValid = false;
                } else {
                    titleInput.classList.remove('is-invalid');
                }
                
                // Validate dates
                if (!startDateInput.value) {
                    startDateInput.classList.add('is-invalid');
                    isValid = false;
                } else {
                    startDateInput.classList.remove('is-invalid');
                }
                
                if (!endDateInput.value) {
                    endDateInput.classList.add('is-invalid');
                    isValid = false;
                } else {
                    endDateInput.classList.remove('is-invalid');
                }
                
                // Validate date range
                if (startDateInput.value && endDateInput.value) {
                    const startDate = new Date(startDateInput.value);
                    const endDate = new Date(endDateInput.value);
                    
                    if (endDate <= startDate) {
                        dateValidationError.style.display = 'block';
                        endDateInput.classList.add('is-invalid');
                        isValid = false;
                    } else {
                        dateValidationError.style.display = 'none';
                    }
                }
                
                // Validate URL format if provided
                if (linkInput.value) {
                    try {
                        new URL(linkInput.value);
                        linkInput.classList.remove('is-invalid');
                    } catch (e) {
                        linkInput.classList.add('is-invalid');
                        isValid = false;
                    }
                } else {
                    linkInput.classList.remove('is-invalid');
                }
                
                return isValid;
            }

            // Form change detection
            const formInputs = document.querySelectorAll('input, select, textarea');
            formInputs.forEach(input => {
                input.addEventListener('change', function() {
                    formChanged = true;
                });
                
                // For text inputs, also listen for keyup events
                if (input.type === 'text' || input.type === 'url' || input.tagName === 'TEXTAREA') {
                    input.addEventListener('keyup', function() {
                        formChanged = true;
                    });
                }
            });

            // Date validation
            endDateInput.addEventListener('change', function() {
                const startDate = new Date(startDateInput.value);
                const endDate = new Date(this.value);
                
                if (endDate <= startDate) {
                    dateValidationError.style.display = 'block';
                    this.classList.add('is-invalid');
                } else {
                    dateValidationError.style.display = 'none';
                    this.classList.remove('is-invalid');
                }
            });

            // Submit button
            submitBtn.addEventListener('click', function(e) {
                e.preventDefault();
                
                if (!validateForm()) {
                    showToast('error', 'Validation Error', 'Please fix the errors in the form before submitting.');
                    return;
                }
                
                // Update confirmation modal with form values
                document.getElementById('confirmTitle').textContent = titleInput.value;
                
                const startDate = new Date(startDateInput.value);
                const endDate = new Date(endDateInput.value);
                document.getElementById('confirmDates').textContent = 
                    startDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) + 
                    ' to ' + 
                    endDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
                
                document.getElementById('confirmLink').textContent = linkInput.value || 'No link';
                
                if (imageChanged.value === 'true') {
                    document.getElementById('confirmImage').textContent = 'Updated (see preview below)';
                    document.getElementById('confirmImagePreview').src = croppedImageData.value;
                    document.getElementById('confirmImagePreview').style.display = 'block';
                } else {
                    document.getElementById('confirmImage').textContent = 'Unchanged';
                    document.getElementById('confirmImagePreview').style.display = 'none';
                }
                
                // Show confirmation modal
                confirmationModal.show();
            });
            
            // Confirm submit button
            confirmSubmitBtn.addEventListener('click', function() {
                // Show loading state
                this.disabled = true;
                this.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Updating...';
                
                // Submit the form
                submitForm();
            });
            
            // Cancel button
            cancelBtn.addEventListener('click', function() {
                if (formChanged) {
                    // Show confirmation modal
                    cancelConfirmationModal.show();
                } else {
                    // No changes, just redirect
                    window.location.href = '/admin/banner';
                }
            });
            
            // Confirm cancel button
            confirmCancelBtn.addEventListener('click', function() {
                window.location.href = '/admin/banner';
            });
            
            // View banner button
            document.getElementById('viewBannerBtn').addEventListener('click', function() {
                // Redirect to view the banner (you may need to adjust this URL)
                window.location.href = '/admin/viewBanner?id=<%= banner._id %>';
            });
            
            // Go to list button
            document.getElementById('goToListBtn').addEventListener('click', function() {
                window.location.href = '/admin/banner';
            });
            
            // Try again button
            document.getElementById('tryAgainBtn').addEventListener('click', function() {
                errorModal.hide();
                // Re-enable the submit button
                confirmSubmitBtn.disabled = false;
                confirmSubmitBtn.innerHTML = '<i class="bi bi-check-circle me-1"></i>Yes, Update Banner';
            });

            // Form submission
            function submitForm() {
                // Get form data
                const formData = {
                    title: titleInput.value,
                    startingDate: startDateInput.value,
                    endingDate: endDateInput.value,
                    link: linkInput.value,
                    imageChanged: imageChanged.value,
                    croppedImageData: croppedImageData.value
                };
                
                // Get the form action URL (includes the banner ID)
                const formAction = bannerForm.getAttribute('action');
                
                // Submit the form with fetch API
                fetch(formAction, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                })
                .then(response => {
                    if (response.redirected) {
                        window.location.href = response.url;
                        return null;
                    } else if (response.ok) {
                        // If response is OK but not a redirect
                        return response.json().catch(() => null); // Handle case where response is not JSON
                    } else {
                        // If response is not OK, try to parse as JSON for error message
                        return response.json().catch(() => {
                            throw new Error(`Server error: ${response.status} ${response.statusText}`);
                        });
                    }
                })
                .then(data => {
                    // Close the confirmation modal
                    confirmationModal.hide();
                    
                    if (data && data.error) {
                        // Show error modal
                        document.getElementById('errorMessage').textContent = data.error;
                        errorModal.show();
                    } else if (data && data.success) {
                        // Show success modal
                        successModal.show();
                    } else {
                        // Default success case if no specific message
                        successModal.show();
                    }
                })
                .catch(error => {
                    // Close the confirmation modal
                    confirmationModal.hide();
                    
                    // Show error modal
                    document.getElementById('errorMessage').textContent = error.message;
                    errorModal.show();
                });
            }

            // Toast notification system
            function showToast(type, title, message) {
                const toastContainer = document.getElementById('toastContainer');
                
                // Create toast element
                const toast = document.createElement('div');
                toast.className = `toast ${type}`;
                toast.setAttribute('role', 'alert');
                toast.setAttribute('aria-live', 'assertive');
                toast.setAttribute('aria-atomic', 'true');
                
                // Set toast content
                toast.innerHTML = `
                    <div class="toast-header">
                        <i class="toast-icon ${type} bi ${getIconClass(type)}"></i>
                        <strong class="toast-title">${title}</strong>
                        <button type="button" class="toast-close" aria-label="Close">&times;</button>
                    </div>
                    <div class="toast-body">
                        ${message}
                    </div>
                `;
                
                // Add toast to container
                toastContainer.appendChild(toast);
                
                // Show toast
                setTimeout(() => {
                    toast.classList.add('show');
                }, 10);
                
                // Add close button event
                const closeButton = toast.querySelector('.toast-close');
                closeButton.addEventListener('click', () => {
                    toast.classList.remove('show');
                    setTimeout(() => {
                        toast.remove();
                    }, 300);
                });
                
                // Auto-dismiss after 5 seconds
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.classList.remove('show');
                        setTimeout(() => {
                            if (toast.parentNode) {
                                toast.remove();
                            }
                        }, 300);
                    }
                }, 5000);
            }
            
            // Get icon class based on toast type
            function getIconClass(type) {
                switch (type) {
                    case 'success': return 'bi-check-circle-fill';
                    case 'error': return 'bi-exclamation-circle-fill';
                    case 'warning': return 'bi-exclamation-triangle-fill';
                    case 'info': return 'bi-info-circle-fill';
                    default: return 'bi-bell-fill';
                }
            }
        });
    </script>
</body>
</html>