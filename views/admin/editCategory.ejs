<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Edit Category | ELITE WEAR Admin</title>
    
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="/adminStyle/editCategory.css" />
  </head>
  <body>
    <%- include("../partials/admin/header") %>

    <div class="main-content">
      <div class="breadcrumb">
        <span class="breadcrumb-item">
          <a href="/admin/dashboard">
            <i class="fas fa-home"></i> Dashboard
          </a>
        </span>
        <span class="breadcrumb-separator">
          <i class="fas fa-chevron-right"></i>
        </span>
        <span class="breadcrumb-item">
          <a href="/admin/categories">Categories</a>
        </span>
        <span class="breadcrumb-separator">
          <i class="fas fa-chevron-right"></i>
        </span>
        <span class="breadcrumb-item active">Edit Category</span>
      </div>

      <form
        action="/admin/editCategory"
        method="post"
        id="editCategoryForm"
        novalidate
      >
        <input
          type="hidden"
          name="id"
          value="<%= category._id ? category._id : '' %>"
        />

        <div class="container">
          <div class="page-header">
            <h2>Edit Category</h2>
          </div>

          <div class="info-box">
            <i class="fas fa-info-circle"></i>
            <div class="info-box-content">
              <strong>Offer System:</strong> Category offers apply to all
              products in this category. If a product has both a product offer
              and a category offer, the <strong>higher discount</strong> will be
              applied.
            </div>
          </div>

          <!-- Category name field with enhanced validation -->
          <div class="form-group field-highlight">
            <label for="categoryName" class="required-field">Category Name</label>
            <input
              type="text"
              name="name"
              id="categoryName"
              placeholder="Enter category name (no spaces or numbers)"
              value="<%= category.name %>"
              required
              autocomplete="off"
            />
            <i
              class="fas fa-check-circle validation-icon"
              id="nameValidIcon"
            ></i>
            <i
              class="fas fa-times-circle validation-icon"
              id="nameInvalidIcon"
            ></i>
            <i
              class="fas fa-spinner fa-spin validation-icon"
              id="namePendingIcon"
            ></i>
            <div class="validation-progress" id="nameProgress"></div>
            <span class="error-message" id="nameError"></span>
          </div>

          <!-- Description field with enhanced validation -->
          <div class="form-group field-highlight">
            <label for="categoryDescription" class="required-field">Description</label>
            <textarea
              name="description"
              id="categoryDescription"
              placeholder="Enter category description (minimum 20 characters)"
              required
            ><%= category.description %></textarea>
            <div class="word-count" id="descriptionWordCount">0 characters</div>
            <div class="validation-progress" id="descriptionProgress"></div>
            <span class="error-message" id="descriptionError"></span>
          </div>

          <div class="form-group-row">
            <div class="form-group field-highlight">
              <label for="categoryStock">Stock</label>
              <input
                type="number"
                name="stock"
                id="categoryStock"
                placeholder="Enter stock quantity"
                value="<%= category.stock %>"
                min="0"
                required
              />
              <span class="error-message" id="stockError"></span>
            </div>

            <!-- Offer field with enhanced validation -->
            <div class="form-group field-highlight input-with-icon offer-input">
              <label for="categoryOffer">
                Category Offer
                <span class="tooltip-container">
                  <i class="fas fa-question-circle tooltip-icon"></i>
                  <span class="tooltip-text">Discount percentage applied to all products in this category. Must be between 0-100%.</span>
                </span>
              </label>
              <input
                type="number"
                name="offer"
                id="categoryOffer"
                value="<%= category.offer || 0 %>"
                min="0"
                max="100"
                step="0.01"
              />
              <div class="validation-progress" id="offerProgress"></div>
              <span class="error-message" id="offerError"></span>
            </div>

            <!-- Max redeemable field with enhanced validation -->
            <div class="form-group field-highlight input-with-icon price-input">
              <label for="maxRedeemable">
                Max Redeemable
                <span class="tooltip-container">
                  <i class="fas fa-question-circle tooltip-icon"></i>
                  <span class="tooltip-text">Maximum discount amount that can be applied (up to â‚¹500,000).</span>
                </span>
              </label>
              <input
                type="number"
                name="maxRedeemable"
                id="maxRedeemable"
                value="<%= category.maxRedeemable || 0 %>"
                min="0"
                max="500000"
                step="0.01"
              />
              <div class="validation-progress" id="maxRedeemableProgress"></div>
              <span class="error-message" id="maxRedeemableError"></span>
            </div>
          </div>

          <div class="buttons">
            <button type="button" class="cancel" id="cancelButton">
              <i class="fas fa-times"></i> Cancel
            </button>
            <button type="submit" class="update" id="updateButton">
              <i class="fas fa-save"></i> Update Category
            </button>
          </div>
        </div>
      </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- JavaScript validation code -->
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById("editCategoryForm");
        const categoryOffer = document.getElementById("categoryOffer");
        const maxRedeemable = document.getElementById("maxRedeemable");
        const categoryName = document.getElementById("categoryName");
        const categoryDescription = document.getElementById("categoryDescription");
        const categoryStock = document.getElementById("categoryStock");
        const updateButton = document.getElementById("updateButton");
        const cancelButton = document.getElementById("cancelButton");

        // Error message elements
        const offerError = document.getElementById("offerError");
        const maxRedeemableError = document.getElementById("maxRedeemableError");
        const nameError = document.getElementById("nameError");
        const descriptionError = document.getElementById("descriptionError");
        const stockError = document.getElementById("stockError");

        // Validation progress elements
        const nameProgress = document.getElementById("nameProgress");
        const descriptionProgress = document.getElementById("descriptionProgress");
        const offerProgress = document.getElementById("offerProgress");
        const maxRedeemableProgress = document.getElementById("maxRedeemableProgress");

        // Validation icon elements
        const nameValidIcon = document.getElementById("nameValidIcon");
        const nameInvalidIcon = document.getElementById("nameInvalidIcon");
        const namePendingIcon = document.getElementById("namePendingIcon");

        // Word count element
        const descriptionWordCount = document.getElementById("descriptionWordCount");

        // Original category name for uniqueness check
        const originalCategoryName = categoryName.value;

        // Add input event listeners for real-time validation with debounce
        function debounce(func, wait) {
          let timeout;
          return function () {
            const context = this;
            const args = arguments;
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(context, args), wait);
          };
        }

        categoryOffer.addEventListener("input", debounce(validateOffer, 300));
        maxRedeemable.addEventListener("input", debounce(validateMaxRedeemable, 300));
        categoryName.addEventListener("input", debounce(validateName, 300));
        categoryDescription.addEventListener("input", debounce(validateDescription, 300));
        categoryStock.addEventListener("input", debounce(validateStock, 300));

        // Initial validation on page load
        setTimeout(() => {
          validateName();
          validateDescription();
          validateOffer();
          validateMaxRedeemable();
          validateStock();
          updateWordCount();
        }, 500);

        // Update word count for description
        function updateWordCount() {
          const text = categoryDescription.value.trim();
          const charCount = text.length;
          descriptionWordCount.textContent = charCount + " characters";

          const validPattern = /^[a-zA-Z0-9\s.,!?'"()-]+$/;

          if (charCount >= 20 && validPattern.test(text)) {
            descriptionWordCount.classList.add("valid");
            descriptionWordCount.classList.remove("invalid");
          } else {
            descriptionWordCount.classList.add("invalid");
            descriptionWordCount.classList.remove("valid");
          }
        }

        categoryDescription.addEventListener("input", updateWordCount);

        // Focus animations
        const formGroups = document.querySelectorAll(".form-group");
        formGroups.forEach((group) => {
          const input = group.querySelector("input, textarea");

          input.addEventListener("focus", () => {
            group.classList.add("focused");
          });

          input.addEventListener("blur", () => {
            group.classList.remove("focused");
          });

          // Set initial state for fields with values
          if (input.value) {
            group.classList.add("has-value");
          }

          input.addEventListener("input", () => {
            if (input.value) {
              group.classList.add("has-value");
            } else {
              group.classList.remove("has-value");
            }
          });
        });

        // Check if category name is unique
        async function checkCategoryNameUnique(name) {
          // Skip check if name hasn't changed
          if (name.trim() === originalCategoryName.trim()) {
            return true;
          }

          try {
            // Show pending state
            namePendingIcon.style.opacity = "1";
            nameValidIcon.style.opacity = "0";
            nameInvalidIcon.style.opacity = "0";
            nameProgress.classList.add("pending");
            nameProgress.classList.remove("valid", "invalid");

            const response = await fetch(
              `/admin/check-category-name?name=${encodeURIComponent(name)}&id=${encodeURIComponent(document.querySelector('input[name="id"]').value)}`
            );
            const data = await response.json();

            // Hide pending state
            namePendingIcon.style.opacity = "0";

            if (data.exists) {
              nameInvalidIcon.style.opacity = "1";
              nameValidIcon.style.opacity = "0";
              nameProgress.classList.add("invalid");
              nameProgress.classList.remove("valid", "pending");
              return false;
            } else {
              nameValidIcon.style.opacity = "1";
              nameInvalidIcon.style.opacity = "0";
              nameProgress.classList.add("valid");
              nameProgress.classList.remove("invalid", "pending");
              return true;
            }
          } catch (error) {
            console.error("Error checking category name:", error);
            namePendingIcon.style.opacity = "0";
            return true; // Assume valid if check fails
          }
        }

        // Validate category name
        async function validateName() {
          // Clear previous error
          nameError.textContent = "";
          nameError.classList.remove("visible");
          categoryName.classList.remove("input-valid", "input-invalid");

          // Reset validation icons
          nameValidIcon.style.opacity = "0";
          nameInvalidIcon.style.opacity = "0";
          namePendingIcon.style.opacity = "0";

          // Check if empty
          if (categoryName.value.trim() === "") {
            nameError.innerHTML =
              '<i class="fas fa-exclamation-circle"></i> Category name is required';
            nameError.classList.add("visible");
            categoryName.classList.add("input-invalid");
            nameInvalidIcon.style.opacity = "1";
            nameProgress.classList.add("invalid");
            nameProgress.classList.remove("valid", "pending");
            return false;
          }

          // Check for spaces
          if (categoryName.value.includes(" ")) {
            nameError.innerHTML =
              '<i class="fas fa-exclamation-circle"></i> Category name cannot contain spaces';
            nameError.classList.add("visible");
            categoryName.classList.add("input-invalid");
            nameInvalidIcon.style.opacity = "1";
            nameProgress.classList.add("invalid");
            nameProgress.classList.remove("valid", "pending");
            return false;
          }

          // Check for numbers
          if (/\d/.test(categoryName.value)) {
            nameError.innerHTML =
              '<i class="fas fa-exclamation-circle"></i> Category name cannot contain numbers';
            nameError.classList.add("visible");
            categoryName.classList.add("input-invalid");
            nameInvalidIcon.style.opacity = "1";
            nameProgress.classList.add("invalid");
            nameProgress.classList.remove("valid", "pending");
            return false;
          }

          // Check length
          if (categoryName.value.trim().length < 2) {
            nameError.innerHTML =
              '<i class="fas fa-exclamation-circle"></i> Category name must be at least 2 characters';
            nameError.classList.add("visible");
            categoryName.classList.add("input-invalid");
            nameInvalidIcon.style.opacity = "1";
            nameProgress.classList.add("invalid");
            nameProgress.classList.remove("valid", "pending");
            return false;
          }

          // Check if name is unique
          const isUnique = await checkCategoryNameUnique(categoryName.value);
          if (!isUnique) {
            nameError.innerHTML =
              '<i class="fas fa-exclamation-circle"></i> Category name already exists';
            nameError.classList.add("visible");
            categoryName.classList.add("input-invalid");
            return false;
          }

          // Valid name
          categoryName.classList.add("input-valid");
          nameValidIcon.style.opacity = "1";
          nameProgress.classList.add("valid");
          nameProgress.classList.remove("invalid", "pending");
          return true;
        }

        // Validate description
        function validateDescription() {
          // Clear previous error
          descriptionError.textContent = "";
          descriptionError.classList.remove("visible");
          categoryDescription.classList.remove("input-valid", "input-invalid");

          // Check if empty
          if (categoryDescription.value.trim() === "") {
            descriptionError.innerHTML =
              '<i class="fas fa-exclamation-circle"></i> Description is required';
            descriptionError.classList.add("visible");
            categoryDescription.classList.add("input-invalid");
            descriptionProgress.classList.add("invalid");
            descriptionProgress.classList.remove("valid", "pending");
            return false;
          }

          // Check character count (minimum 20 characters)
          const charCount = categoryDescription.value.trim().length;

          if (charCount < 20) {
            descriptionError.innerHTML = `<i class="fas fa-exclamation-circle"></i> Description must be at least 20 characters (currently ${charCount})`;
            descriptionError.classList.add("visible");
            categoryDescription.classList.add("input-invalid");
            descriptionProgress.classList.add("invalid");
            descriptionProgress.classList.remove("valid", "pending");
            return false;
          }

          // Valid description
          categoryDescription.classList.add("input-valid");
          descriptionProgress.classList.add("valid");
          descriptionProgress.classList.remove("invalid", "pending");
          return true;
        }

        // Validate offer percentage
        function validateOffer() {
          const offerValue = parseFloat(categoryOffer.value);

          // Clear previous error
          offerError.textContent = "";
          offerError.classList.remove("visible");
          categoryOffer.classList.remove("input-valid", "input-invalid");

          // Check if empty
          if (categoryOffer.value.trim() === "") {
            categoryOffer.value = "0";
            categoryOffer.classList.add("input-valid");
            offerProgress.classList.add("valid");
            offerProgress.classList.remove("invalid", "pending");
            return true;
          }

          // Check if it's a valid number
          if (isNaN(offerValue)) {
            offerError.innerHTML =
              '<i class="fas fa-exclamation-circle"></i> Please enter a valid number';
            offerError.classList.add("visible");
            categoryOffer.classList.add("input-invalid");
            offerProgress.classList.add("invalid");
            offerProgress.classList.remove("valid", "pending");
            return false;
          }

          // Check range (0-100)
          if (offerValue < 0 || offerValue > 100) {
            offerError.innerHTML =
              '<i class="fas fa-exclamation-circle"></i> Offer must be between 0 and 100%';
            offerError.classList.add("visible");
            categoryOffer.classList.add("input-invalid");
            offerProgress.classList.add("invalid");
            offerProgress.classList.remove("valid", "pending");
            return false;
          }

          // Valid offer
          categoryOffer.classList.add("input-valid");
          offerProgress.classList.add("valid");
          offerProgress.classList.remove("invalid", "pending");
          return true;
        }

        // Validate max redeemable amount
        function validateMaxRedeemable() {
          const maxValue = parseFloat(maxRedeemable.value);

          // Clear previous error
          maxRedeemableError.textContent = "";
          maxRedeemableError.classList.remove("visible");
          maxRedeemable.classList.remove("input-valid", "input-invalid");

          // Check if empty
          if (maxRedeemable.value.trim() === "") {
            maxRedeemable.value = "0";
            maxRedeemable.classList.add("input-valid");
            maxRedeemableProgress.classList.add("valid");
            maxRedeemableProgress.classList.remove("invalid", "pending");
            return true;
          }

          // Check if it's a valid number
          if (isNaN(maxValue)) {
            maxRedeemableError.innerHTML =
              '<i class="fas fa-exclamation-circle"></i> Please enter a valid amount';
            maxRedeemableError.classList.add("visible");
            maxRedeemable.classList.add("input-invalid");
            maxRedeemableProgress.classList.add("invalid");
            maxRedeemableProgress.classList.remove("valid", "pending");
            return false;
          }

          // Check if it's positive
          if (maxValue < 0) {
            maxRedeemableError.innerHTML =
              '<i class="fas fa-exclamation-circle"></i> Amount cannot be negative';
            maxRedeemableError.classList.add("visible");
            maxRedeemable.classList.add("input-invalid");
            maxRedeemableProgress.classList.add("invalid");
            maxRedeemableProgress.classList.remove("valid", "pending");
            return false;
          }

          // Check maximum limit (500,000)
          if (maxValue > 500000) {
            maxRedeemableError.innerHTML =
              '<i class="fas fa-exclamation-circle"></i> Maximum redeemable amount cannot exceed â‚¹500,000';
            maxRedeemableError.classList.add("visible");
            maxRedeemable.classList.add("input-invalid");
            maxRedeemableProgress.classList.add("invalid");
            maxRedeemableProgress.classList.remove("valid", "pending");
            return false;
          }

          // Valid max redeemable
          maxRedeemable.classList.add("input-valid");
          maxRedeemableProgress.classList.add("valid");
          maxRedeemableProgress.classList.remove("invalid", "pending");
          return true;
        }

        // Validate stock
        function validateStock() {
          // Clear previous error
          stockError.textContent = "";
          stockError.classList.remove("visible");
          categoryStock.classList.remove("input-valid", "input-invalid");

          // Check if empty
          if (categoryStock.value.trim() === "") {
            stockError.innerHTML =
              '<i class="fas fa-exclamation-circle"></i> Stock quantity is required';
            stockError.classList.add("visible");
            categoryStock.classList.add("input-invalid");
            return false;
          }

          // Check if it's a valid number
          const stockValue = parseInt(categoryStock.value);
          if (isNaN(stockValue)) {
            stockError.innerHTML =
              '<i class="fas fa-exclamation-circle"></i> Please enter a valid number';
            stockError.classList.add("visible");
            categoryStock.classList.add("input-invalid");
            return false;
          }

          // Check if it's positive
          if (stockValue < 0) {
            stockError.innerHTML =
              '<i class="fas fa-exclamation-circle"></i> Stock cannot be negative';
            stockError.classList.add("visible");
            categoryStock.classList.add("input-invalid");
            return false;
          }

          // Valid stock
          categoryStock.classList.add("input-valid");
          return true;
        }

        // Validate all fields
        async function validateForm() {
          const isNameValid = await validateName();
          const isDescriptionValid = validateDescription();
          const isOfferValid = validateOffer();
          const isMaxRedeemableValid = validateMaxRedeemable();
          const isStockValid = validateStock();

          return (
            isNameValid &&
            isDescriptionValid &&
            isOfferValid &&
            isMaxRedeemableValid &&
            isStockValid
          );
        }

        // Handle form submission with animation
        form.addEventListener("submit", async function (event) {
          event.preventDefault();

          // Validate all fields
          const isValid = await validateForm();

          if (isValid) {
            // Show confirmation dialog with custom styling
            Swal.fire({
              title: "Update Category?",
              text: "This will affect all products in this category. Are you sure you want to continue?",
              icon: "question",
              showCancelButton: true,
              confirmButtonColor: "#4f46e5",
              cancelButtonColor: "#64748b",
              confirmButtonText: "Yes, update it!",
              cancelButtonText: "Cancel",
              customClass: {
                container: "custom-swal-container",
                popup: "custom-swal-popup",
                title: "custom-swal-title",
                confirmButton: "custom-swal-confirm",
                cancelButton: "custom-swal-cancel",
              },
              buttonsStyling: true,
              reverseButtons: true,
            }).then((result) => {
              if (result.isConfirmed) {
                // If offer is empty, set it to 0
                if (categoryOffer.value.trim() === "") {
                  categoryOffer.value = "0";
                }

                // If max redeemable is empty, set it to 0
                if (maxRedeemable.value.trim() === "") {
                  maxRedeemable.value = "0";
                }

                // Show loading state
                updateButton.innerHTML =
                  '<span class="spinner"></span> Updating...';
                updateButton.disabled = true;
                updateButton.classList.add("btn-loading");

                // Submit the form
                form.submit();
              }
            });
          } else {
            // Show error message with animation
            Swal.fire({
              title: "Validation Error",
              text: "Please fix the errors in the form",
              icon: "error",
              confirmButtonColor: "#4f46e5",
              customClass: {
                popup: "swal-error-animation",
              },
            });

            // Add pulse animation to invalid fields
            document.querySelectorAll(".input-invalid").forEach((el) => {
              el.classList.add("validation-pulse");
              setTimeout(() => {
                el.classList.remove("validation-pulse");
              }, 300);
            });

            // Focus on the first field with an error
            if (categoryName.classList.contains("input-invalid")) {
              categoryName.focus();
            } else if (
              categoryDescription.classList.contains("input-invalid")
            ) {
              categoryDescription.focus();
            } else if (categoryStock.classList.contains("input-invalid")) {
              categoryStock.focus();
            } else if (categoryOffer.classList.contains("input-invalid")) {
              categoryOffer.focus();
            } else if (maxRedeemable.classList.contains("input-invalid")) {
              maxRedeemable.focus();
            }
          }
        });

        // Handle cancel button
        cancelButton.addEventListener("click", function () {
          Swal.fire({
            title: "Discard Changes?",
            text: "Any unsaved changes will be lost. Are you sure you want to leave this page?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#ef4444",
            cancelButtonColor: "#64748b",
            confirmButtonText: "Yes, discard changes",
            cancelButtonText: "No, keep editing",
            customClass: {
              popup: "custom-swal-popup",
            },
            reverseButtons: true,
          }).then((result) => {
            if (result.isConfirmed) {
              window.location.href = "/admin/categories";
            }
          });
        });

        // Add subtle animations to form elements on page load
        const animateFormElements = () => {
          const elements = document.querySelectorAll(
            ".form-group, .info-box, .buttons button"
          );
          elements.forEach((el, index) => {
            setTimeout(() => {
              el.style.opacity = "0";
              el.style.transform = "translateY(20px)";
              el.style.transition = "opacity 0.5s ease, transform 0.5s ease";

              setTimeout(() => {
                el.style.opacity = "1";
                el.style.transform = "translateY(0)";
              }, 50);
            }, index * 100);
          });
        };

        setTimeout(animateFormElements, 300);
      });
    </script>
  </body>
</html>