<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Management | Elite Wear Admin</title>
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- SweetAlert2 for notifications -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- noUiSlider for price range -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nouislider@14.6.3/distribute/nouislider.min.css">
    <style>
        :root {
            /* Color Variables */
            --primary: #4f46e5;
            --primary-light: #6366f1;
            --primary-dark: #4338ca;
            --secondary: #10b981;
            --secondary-light: #34d399;
            --secondary-dark: #059669;
            --warning: #f59e0b;
            --danger: #ef4444;
            --info: #0ea5e9;
            --dark: #1e293b;
            --light: #f8fafc;
            --gray: #64748b;
            --gray-light: #94a3b8;
            --gray-dark: #475569;
            --sidebar-width: 260px;
            --sidebar-collapsed-width: 70px;
            --header-height: 70px;
            --card-border-radius: 12px;
            --transition-speed: 0.3s;
            
            /* Theme Variables */
            --body-bg: #f1f5f9;
            --card-bg: #ffffff;
            --text-color: #1e293b;
            --text-muted: #64748b;
            --border-color: #e2e8f0;
        }

        /* Dark Mode Variables */
        .dark-mode {
            --body-bg: #0f172a;
            --card-bg: #1e293b;
            --text-color: #f8fafc;
            --text-muted: #94a3b8;
            --border-color: #334155;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--body-bg);
            color: var(--text-color);
            overflow-x: hidden;
            min-height: 100vh;
            transition: background-color 0.3s, color 0.3s;
        }

        /* Scrollbar Styling */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: var(--body-bg);
        }

        ::-webkit-scrollbar-thumb {
            background: var(--gray-light);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: var(--gray);
        }

        /* Sidebar Styling */
        .sidebar {
            width: var(--sidebar-width);
            height: 100vh;
            position: fixed;
            top: 0;
            left: 0;
            background: var(--card-bg);
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.05);
            transition: all var(--transition-speed) ease;
            z-index: 1000;
            overflow-y: auto;
            overflow-x: hidden;
            display: flex;
            flex-direction: column;
            border-right: 1px solid var(--border-color);
        }

        .sidebar-header {
            height: var(--header-height);
            display: flex;
            align-items: center;
            padding: 0 20px;
            border-bottom: 1px solid var(--border-color);
        }

        .sidebar-header .logo {
            display: flex;
            align-items: center;
            gap: 10px;
            color: var(--primary);
            font-weight: 700;
            font-size: 1.25rem;
        }

        .sidebar-header .logo i {
            font-size: 1.5rem;
        }

        .sidebar-menu {
            padding: 20px 0;
            list-style: none;
            flex: 1;
        }

        .sidebar-menu li {
            margin-bottom: 5px;
        }

        .sidebar-menu a {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            color: var(--text-color);
            text-decoration: none;
            transition: all 0.2s ease;
            border-radius: 0 30px 30px 0;
            margin-right: 15px;
            font-weight: 500;
        }

        .sidebar-menu a i {
            min-width: 24px;
            margin-right: 10px;
            font-size: 1.1rem;
        }

        .sidebar-menu a:hover {
            background-color: rgba(79, 70, 229, 0.08);
            color: var(--primary);
        }

        .sidebar-menu a.active {
            background-color: var(--primary);
            color: white;
        }

        .sidebar-collapsed {
            width: var(--sidebar-collapsed-width);
        }

        .sidebar-collapsed .sidebar-header .logo span,
        .sidebar-collapsed .sidebar-menu a span {
            display: none;
        }

        .sidebar-collapsed .sidebar-menu a {
            justify-content: center;
            padding: 12px;
        }

        .sidebar-collapsed .sidebar-menu a i {
            margin-right: 0;
            font-size: 1.25rem;
        }

        /* Sidebar Footer */
        .sidebar-footer {
            padding: 15px 20px;
            border-top: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            gap: 10px;
        }

        .sidebar-footer .btn {
            flex: 1;
            padding: 8px 16px;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .sidebar-footer .btn-logout {
            background-color: var(--danger);
            color: white;
            border: none;
        }

        .sidebar-footer .btn-logout:hover {
            background-color: #dc2626;
            transform: translateY(-2px);
        }

        /* Sidebar Toggle Button */
        #sidebar-toggle {
            position: fixed;
            top: 20px;
            left: calc(var(--sidebar-width) - 15px);
            width: 30px;
            height: 30px;
            background-color: var(--card-bg);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            z-index: 1001;
            transition: left var(--transition-speed) ease;
            border: none;
            color: var(--primary);
        }

        #sidebar-toggle:hover {
            background-color: var(--primary);
            color: white;
        }

        .sidebar-collapsed + .main-content #sidebar-toggle {
            left: calc(var(--sidebar-collapsed-width) - 15px);
        }

        /* Main Content Styling */
        .main-content {
            margin-left: var(--sidebar-width);
            padding: 20px;
            transition: margin-left var(--transition-speed) ease;
            min-height: 100vh;
        }

        .main-content-expanded {
            margin-left: var(--sidebar-collapsed-width);
        }

        /* Stats Cards */
        .stat-card {
            border-radius: var(--card-border-radius);
            border: 1px solid var(--border-color);
            background-color: var(--card-bg);
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s, box-shadow 0.2s;
        }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .stat-icon {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .bg-blue {
            background-color: rgba(79, 70, 229, 0.1);
            color: var(--primary);
        }

        .bg-green {
            background-color: rgba(16, 185, 129, 0.1);
            color: var(--secondary);
        }

        .bg-warning {
            background-color: rgba(245, 158, 11, 0.1);
            color: var(--warning);
        }

        .bg-purple {
            background-color: rgba(139, 92, 246, 0.1);
            color: #8b5cf6;
        }

        /* Products Grid View */
        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 1.5rem;
        }

        .product-card {
            border-radius: var(--card-border-radius);
            border: 1px solid var(--border-color);
            background-color: var(--card-bg);
            overflow: hidden;
            position: relative;
            transition: transform 0.2s, box-shadow 0.2s;
        }

        .product-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }

        .product-img-container {
            height: 200px;
            overflow: hidden;
            position: relative;
        }

        .product-img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s;
        }

        .product-card:hover .product-img {
            transform: scale(1.05);
        }

        .product-badge {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 600;
            z-index: 10;
        }

        .badge-success {
            background-color: var(--secondary);
            color: white;
        }

        .badge-danger {
            background-color: var(--danger);
            color: white;
        }

        .product-checkbox {
            position: absolute;
            top: 10px;
            left: 10px;
            z-index: 10;
        }

        .product-category {
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            color: var(--text-muted);
            margin-bottom: 0.5rem;
        }

        .product-name {
            font-size: 1rem;
            font-weight: 500;
            margin-bottom: 0.75rem;
            height: 2.5rem;
            overflow: hidden;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
        }

        .product-price {
            display: flex;
            align-items: center;
        }

        .original-price {
            text-decoration: line-through;
            color: var(--text-muted);
            font-size: 0.875rem;
            margin-right: 0.5rem;
        }

        .sale-price,
        .current-price {
            font-weight: 600;
        }

        .product-stock {
            font-size: 0.875rem;
            display: flex;
            align-items: center;
        }

        .product-stock i {
            margin-right: 0.25rem;
        }

        .product-offers {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin: 0.75rem 0;
        }

        .text-purple {
            color: #8b5cf6;
        }

        .text-orange {
            color: #f97316;
        }

        .text-teal {
            color: #14b8a6;
        }

        .border-purple {
            border-color: #8b5cf6 !important;
        }

        .border-orange {
            border-color: #f97316 !important;
        }

        .border-teal {
            border-color: #14b8a6 !important;
        }

        .product-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .product-actions .btn {
            flex: 1;
        }

        /* Products List View */
        .products-list {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .product-list-item {
            border-radius: var(--card-border-radius);
            border: 1px solid var(--border-color);
            background-color: var(--card-bg);
            position: relative;
            transition: transform 0.2s, box-shadow 0.2s;
        }

        .product-list-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .product-list-checkbox {
            position: absolute;
            top: 1rem;
            left: 1rem;
            z-index: 10;
        }

        .product-list-img-container {
            width: 100px;
            height: 100px;
            overflow: hidden;
            border-radius: 0.375rem;
            flex-shrink: 0;
        }

        .product-list-img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        /* Toggle Switch */
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .slider {
            background-color: var(--secondary);
        }

        input:focus + .slider {
            box-shadow: 0 0 1px var(--secondary);
        }

        input:checked + .slider:before {
            transform: translateX(26px);
        }

        /* Price Range Dropdown */
        .price-range-dropdown {
            width: 300px;
            padding: 1rem;
        }

        .noUi-connect {
            background: var(--primary);
        }

        .noUi-horizontal {
            height: 8px;
        }

        .noUi-handle {
            border-radius: 50%;
            width: 18px !important;
            height: 18px !important;
            right: -9px !important;
            top: -5px !important;
        }

        .noUi-handle:before,
        .noUi-handle:after {
            display: none;
        }

        /* Empty State */
        .empty-state {
            padding: 3rem;
            background-color: var(--card-bg);
            border-radius: var(--card-border-radius);
            border: 1px solid var(--border-color);
        }

        /* Skeletons */
        .skeleton {
            position: relative;
            overflow: hidden;
        }

        .skeleton::after {
            content: "";
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            transform: translateX(-100%);
            background-image: linear-gradient(
                90deg,
                rgba(255, 255, 255, 0) 0,
                rgba(255, 255, 255, 0.2) 20%,
                rgba(255, 255, 255, 0.5) 60%,
                rgba(255, 255, 255, 0)
            );
            animation: shimmer 2s infinite;
        }

        .dark-mode .skeleton::after {
            background-image: linear-gradient(
                90deg,
                rgba(255, 255, 255, 0) 0,
                rgba(255, 255, 255, 0.05) 20%,
                rgba(255, 255, 255, 0.1) 60%,
                rgba(255, 255, 255, 0)
            );
        }

        @keyframes shimmer {
            100% {
                transform: translateX(100%);
            }
        }

        .skeleton-img {
            height: 200px;
            background-color: var(--border-color);
        }

        .skeleton-img-sm {
            width: 100px;
            height: 100px;
            background-color: var(--border-color);
            border-radius: 0.375rem;
        }

        .skeleton-line {
            height: 1rem;
            margin-bottom: 0.5rem;
            background-color: var(--border-color);
            border-radius: 0.25rem;
        }

        .skeleton-btn {
            height: 2.25rem;
            background-color: var(--border-color);
            border-radius: 0.375rem;
            flex: 1;
        }

        /* Card Styling */
        .card {
            background-color: var(--card-bg);
            border-color: var(--border-color);
            border-radius: var(--card-border-radius);
        }

        .card-title {
            color: var(--text-color);
        }

        /* Form Controls */
        .form-control, .form-select {
            background-color: var(--card-bg);
            border-color: var(--border-color);
            color: var(--text-color);
        }

        .form-control:focus, .form-select:focus {
            background-color: var(--card-bg);
            color: var(--text-color);
        }

        /* Dropdown Styling */
        .dropdown-menu {
            background-color: var(--card-bg);
            border-color: var(--border-color);
        }

        .dropdown-item {
            color: var(--text-color);
        }

        .dropdown-item:hover {
            background-color: rgba(79, 70, 229, 0.08);
        }

        /* Breadcrumb */
        .breadcrumb-item a {
            color: var(--primary);
            text-decoration: none;
        }

        .breadcrumb-item.active {
            color: var(--text-muted);
        }

        /* Pagination */
        .pagination .page-link {
            color: var(--primary);
            background-color: var(--card-bg);
            border-color: var(--border-color);
        }

        .pagination .page-item.active .page-link {
            background-color: var(--primary);
            border-color: var(--primary);
            color: white;
        }

        .pagination .page-item.disabled .page-link {
            color: var(--text-muted);
            background-color: var(--card-bg);
        }

        /* Modal Styling */
        .modal-content {
            background-color: var(--card-bg);
            border-color: var(--border-color);
        }

        .modal-header, .modal-footer {
            border-color: var(--border-color);
        }

        /* Responsive Adjustments */
        @media (max-width: 992px) {
            :root {
                --sidebar-width: 240px;
            }

            .sidebar {
                transform: translateX(-100%);
            }

            .sidebar.show {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
            }

            #sidebar-toggle {
                left: 20px;
                top: 20px;
            }

            .sidebar-collapsed + .main-content #sidebar-toggle {
                left: 20px;
            }
        }

        @media (max-width: 767.98px) {
            .products-grid {
                grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
            }

            .product-list-img-container {
                width: 80px;
                height: 80px;
            }
        }

        @media (max-width: 575.98px) {
            .products-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <nav class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <div class="logo">
                <i class="fas fa-shopping-bag"></i>
                <span>ELITE WEAR</span>
            </div>
        </div>
        <ul class="sidebar-menu">
            <li>
                <a href="/admin/">
                    <i class="fas fa-tachometer-alt"></i>
                    <span>Dashboard</span>
                </a>
            </li>
            <li>
                <a href="/admin/productManagement" class="active">
                    <i class="fas fa-box"></i>
                    <span>Products</span>
                </a>
            </li>
            <li>
                <a href="/admin/adminorder">
                    <i class="fas fa-list"></i>
                    <span>Order List</span>
                </a>
            </li>
            <li>
                <a href="/admin/customers">
                    <i class="fas fa-users"></i>
                    <span>Customers</span>
                </a>
            </li>
            <li>
                <a href="/admin/sales">
                    <i class="fas fa-chart-line"></i>
                    <span>Sales</span>
                </a>
            </li>
            <li>
                <a href="/admin/categories">
                    <i class="fas fa-tag"></i>
                    <span>Category</span>
                </a>
            </li>
            <li>
                <a href="/admin/coupons">
                    <i class="fas fa-percent"></i>
                    <span>Coupons</span>
                </a>
            </li>
            <li>
                <a href="/admin/getbannerPage">
                    <i class="fas fa-image"></i>
                    <span>Banner</span>
                </a>
            </li>
            <li>
                <a href="/admin/wallet-transactions">
                    <i class="fas fa-wallet"></i>
                    <span>Wallet</span>
                </a>
            </li>
        </ul>
        <div class="sidebar-footer">
            <button class="btn btn-outline-primary">Account</button>
            <a href="/admin/logout" class="btn btn-logout">Logout</a>
        </div>
    </nav>

    <!-- Sidebar Toggle Button -->
    <button id="sidebar-toggle">
        <i class="fas fa-chevron-left"></i>
    </button>

    <!-- Main Content -->
    <div class="main-content" id="main-content">
        <!-- Breadcrumb -->
        <nav class="my-3" aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/admin">Dashboard</a></li>
                <li class="breadcrumb-item active">Products</li>
            </ol>
        </nav>

        <!-- Success Message -->
        <% if (locals.successMessage) { %>
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <%= successMessage %>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        <% } %>

        <!-- Page Header -->
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
            <h1 class="h2">Product Management</h1>
            <div class="btn-toolbar mb-2 mb-md-0">
                <button id="toggleDarkMode" class="btn btn-sm btn-outline-secondary me-2">
                    <i class="fas fa-moon me-1"></i> Dark Mode
                </button>
            </div>
        </div>

        <!-- Stats Row -->
        <div class="row mb-4">
            <div class="col-md-3 mb-3">
                <div class="card stat-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <p class="text-muted text-uppercase small">Total Products</p>
                                <h3 class="fw-bold"><%= stats.totalProducts %></h3>
                            </div>
                            <div class="stat-icon bg-blue">
                                <i class="fas fa-box"></i>
                            </div>
                        </div>
                        <div class="text-success small mt-2">
                            <i class="fas fa-arrow-up me-1"></i>
                            5% from last month
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <div class="card stat-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <p class="text-muted text-uppercase small">Active Products</p>
                                <h3 class="fw-bold"><%= stats.activeProducts %></h3>
                            </div>
                            <div class="stat-icon bg-green">
                                <i class="fas fa-check-circle"></i>
                            </div>
                        </div>
                        <div class="text-success small mt-2">
                            <i class="fas fa-arrow-up me-1"></i>
                            3% from last month
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <div class="card stat-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <p class="text-muted text-uppercase small">Low Stock</p>
                                <h3 class="fw-bold"><%= stats.lowStockProducts %></h3>
                            </div>
                            <div class="stat-icon bg-warning">
                                <i class="fas fa-exclamation-triangle"></i>
                            </div>
                        </div>
                        <div class="text-danger small mt-2">
                            <i class="fas fa-arrow-down me-1"></i>
                            2% from last month
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <div class="card stat-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <p class="text-muted text-uppercase small">With Offers</p>
                                <h3 class="fw-bold"><%= stats.productsWithOffers %></h3>
                            </div>
                            <div class="stat-icon bg-purple">
                                <i class="fas fa-tag"></i>
                            </div>
                        </div>
                        <div class="text-success small mt-2">
                            <i class="fas fa-arrow-up me-1"></i>
                            7% from last month
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Action Bar -->
        <div class="row mb-4">
            <div class="col-md-6 mb-3">
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="text" id="searchInput" class="form-control" placeholder="Search products by name, category, or SKU..." value="<%= filters.search %>">
                    <% if (filters.search) { %>
                        <button id="clearSearch" class="btn btn-outline-secondary">
                            <i class="fas fa-times"></i>
                        </button>
                    <% } %>
                </div>
            </div>
            <div class="col-md-6 mb-3 text-md-end">
                <button id="toggleBulkActions" class="btn btn-outline-secondary me-2">
                    <% if (bulkActionsVisible) { %>
                        <i class="fas fa-times me-1"></i> Hide Bulk Actions
                    <% } else { %>
                        <i class="fas fa-filter me-1"></i> Bulk Actions
                    <% } %>
                </button>
                <a href="/admin/add-product" class="btn btn-primary">
                    <i class="fas fa-plus me-1"></i> Add New Product
                </a>
            </div>
        </div>

        <!-- Bulk Actions -->
        <% if (bulkActionsVisible) { %>
            <div class="card mb-4" id="bulkActionsCard">
                <div class="card-body">
                    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center gap-3">
                        <div class="d-flex align-items-center gap-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="selectAll">
                                <label class="form-check-label" for="selectAll">
                                    Select All
                                </label>
                            </div>
                            <div>
                                <span class="fw-bold text-primary" id="selectedCount">0</span> products selected
                            </div>
                        </div>
                        <div class="d-flex flex-wrap gap-2">
                            <button class="btn btn-sm btn-outline-secondary bulk-action-btn" data-action="list" disabled>
                                <i class="fas fa-eye me-1"></i> List Selected
                            </button>
                            <button class="btn btn-sm btn-outline-secondary bulk-action-btn" data-action="unlist" disabled>
                                <i class="fas fa-eye-slash me-1"></i> Unlist Selected
                            </button>
                            <button class="btn btn-sm btn-outline-secondary bulk-action-btn" data-action="offer" disabled>
                                <i class="fas fa-tag me-1"></i> Update Offers
                            </button>
                            <button class="btn btn-sm btn-outline-danger bulk-action-btn" data-action="delete" disabled>
                                <i class="fas fa-trash me-1"></i> Delete Selected
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        <% } %>

        <!-- Filter & Sort Section -->
        <div class="card mb-4">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-3 pb-2 border-bottom">
                    <h5 class="card-title mb-0">Filter & Sort</h5>
                    <button id="resetFilters" class="btn btn-sm btn-link">Reset All</button>
                </div>
                <div class="row">
                    <div class="col-md-3 mb-3">
                        <label class="form-label small text-muted">Category</label>
                        <select id="categoryFilter" class="form-select">
                            <option value="">All Categories</option>
                            <% categories.forEach(function(category) { %>
                                <option value="<%= category.name %>" <%= filters.category === category.name ? 'selected' : '' %>>
                                    <%= category.name %>
                                </option>
                            <% }); %>
                        </select>
                    </div>
                    <div class="col-md-3 mb-3">
                        <label class="form-label small text-muted">Price Range</label>
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary w-100 text-start d-flex justify-content-between align-items-center" type="button" id="priceRangeDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <% if (filters.minPrice && filters.maxPrice) { %>
                                    ₹<%= filters.minPrice %> - ₹<%= filters.maxPrice %>
                                <% } else { %>
                                    All Prices
                                <% } %>
                                <i class="fas fa-sort"></i>
                            </button>
                            <div class="dropdown-menu p-3 price-range-dropdown" aria-labelledby="priceRangeDropdown">
                                <div class="mb-3">
                                    <div id="priceRangeSlider"></div>
                                </div>
                                <div class="d-flex justify-content-between mb-3 small">
                                    <span id="minPriceLabel">₹0</span>
                                    <span id="maxPriceLabel">₹10000</span>
                                </div>
                                <div class="d-flex justify-content-end gap-2">
                                    <button class="btn btn-sm btn-outline-secondary" id="cancelPriceRange">Cancel</button>
                                    <button class="btn btn-sm btn-primary" id="applyPriceRange">Apply</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 mb-3">
                        <label class="form-label small text-muted">Stock Status</label>
                        <select id="stockFilter" class="form-select">
                            <option value="">All Stock</option>
                            <option value="in-stock" <%= filters.stock === 'in-stock' ? 'selected' : '' %>>In Stock</option>
                            <option value="low-stock" <%= filters.stock === 'low-stock' ? 'selected' : '' %>>Low Stock</option>
                            <option value="out-of-stock" <%= filters.stock === 'out-of-stock' ? 'selected' : '' %>>Out of Stock</option>
                        </select>
                    </div>
                    <div class="col-md-3 mb-3">
                        <label class="form-label small text-muted">Sort By</label>
                        <select id="sortFilter" class="form-select">
                            <option value="latest" <%= filters.sort === 'latest' ? 'selected' : '' %>>Latest Added</option>
                            <option value="asc" <%= filters.sort === 'asc' ? 'selected' : '' %>>Price: Low to High</option>
                            <option value="desc" <%= filters.sort === 'desc' ? 'selected' : '' %>>Price: High to Low</option>
                            <option value="name-asc" <%= filters.sort === 'name-asc' ? 'selected' : '' %>>Name: A to Z</option>
                            <option value="name-desc" <%= filters.sort === 'name-desc' ? 'selected' : '' %>>Name: Z to A</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <!-- View Toggle -->
        <div class="d-flex justify-content-end mb-3">
            <div class="btn-group">
                <button type="button" class="btn btn-sm <%= viewMode === 'grid' ? 'btn-primary' : 'btn-outline-secondary' %>" id="gridViewBtn">
                    <i class="fas fa-th"></i>
                </button>
                <button type="button" class="btn btn-sm <%= viewMode === 'list' ? 'btn-primary' : 'btn-outline-secondary' %>" id="listViewBtn">
                    <i class="fas fa-list"></i>
                </button>
            </div>
        </div>

        <!-- Products Grid/List View -->
        <div id="productsContainer" class="<%= viewMode === 'grid' ? 'products-grid' : 'products-list' %>">
            <% if (loading) { %>
                <!-- Loading Skeletons -->
                <% if (viewMode === 'grid') { %>
                    <% for (let i = 0; i < 8; i++) { %>
                        <div class="card product-card skeleton">
                            <div class="skeleton-img"></div>
                            <div class="card-body">
                                <div class="skeleton-line"></div>
                                <div class="skeleton-line w-75"></div>
                                <div class="d-flex justify-content-between mt-2">
                                    <div class="skeleton-line w-25"></div>
                                    <div class="skeleton-line w-25"></div>
                                </div>
                                <div class="d-flex gap-2 mt-3">
                                    <div class="skeleton-btn"></div>
                                    <div class="skeleton-btn"></div>
                                </div>
                            </div>
                        </div>
                    <% } %>
                <% } else { %>
                    <% for (let i = 0; i < 5; i++) { %>
                        <div class="card mb-3 skeleton">
                            <div class="card-body">
                                <div class="d-flex gap-3">
                                    <div class="skeleton-img-sm"></div>
                                    <div class="flex-grow-1">
                                        <div class="skeleton-line"></div>
                                        <div class="skeleton-line w-75"></div>
                                        <div class="d-flex justify-content-between mt-2">
                                            <div class="skeleton-line w-25"></div>
                                            <div class="skeleton-line w-25"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    <% } %>
                <% } %>
            <% } else if (products.length === 0) { %>
                <!-- No Products Found -->
                <div class="text-center py-5 empty-state">
                    <i class="fas fa-box fa-4x text-muted mb-3"></i>
                    <h3>No Products Found</h3>
                    <p class="text-muted mb-4">Try adjusting your search or filters, or add a new product to get started.</p>
                    <a href="/admin/add-product" class="btn btn-primary">
                        <i class="fas fa-plus me-1"></i> Add New Product
                    </a>
                </div>
            <% } else { %>
                <!-- Products Grid View -->
                <% if (viewMode === 'grid') { %>
                    <% products.forEach(function(product) { %>
                        <div class="card product-card" data-id="<%= product._id %>">
                            <!-- Status Badge -->
                            <div class="product-badge <%= product.isActive ? 'badge-success' : 'badge-danger' %>">
                                <%= product.isActive ? 'Active' : 'Inactive' %>
                            </div>

                            <!-- Checkbox for Bulk Selection -->
                            <% if (bulkActionsVisible) { %>
                                <div class="product-checkbox">
                                    <div class="form-check">
                                        <input class="form-check-input product-select" type="checkbox" value="<%= product._id %>">
                                    </div>
                                </div>
                            <% } %>

                            <!-- Product Image -->
                            <div class="product-img-container">
                                <img src="<%= product.images && product.images.length > 0 ? product.images[0].url : '/images/placeholder-product.png' %>" 
                                    alt="<%= product.name %>" class="product-img">
                            </div>

                            <div class="card-body">
                                <!-- Category -->
                                <div class="product-category">
                                    <%= product.categoryId?.name || 'Uncategorized' %>
                                </div>

                                <!-- Product Name -->
                                <h5 class="product-name"><%= product.name %></h5>

                                <!-- Price and Stock -->
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <div class="product-price">
                                        <% if (product.effectiveDiscount > 0 && product.variants && product.variants.length > 0) { %>
                                            <span class="original-price">₹<%= product.variants[0].varientPrice %></span>
                                            <span class="sale-price">₹<%= product.variants[0].salePrice %></span>
                                        <% } else { %>
                                            <span class="current-price">₹<%= product.variants && product.variants.length > 0 ? product.variants[0].varientPrice : 0 %></span>
                                        <% } %>
                                    </div>

                                    <div class="product-stock 
                                        <%= product.variants && product.variants.length > 0 && product.variants[0].varientquatity > 10 ? 'text-success' : 
                                           product.variants && product.variants.length > 0 && product.variants[0].varientquatity > 0 ? 'text-warning' : 'text-danger' %>">
                                        <i class="fas 
                                            <%= product.variants && product.variants.length > 0 && product.variants[0].varientquatity > 10 ? 'fa-check-circle' : 
                                               product.variants && product.variants.length > 0 && product.variants[0].varientquatity > 0 ? 'fa-exclamation-triangle' : 'fa-times-circle' %>">
                                        </i>
                                        <%= product.variants && product.variants.length > 0 ? product.variants[0].varientquatity + ' in stock' : 'Out of stock' %>
                                    </div>
                                </div>

                                <!-- Offers -->
                                <div class="product-offers">
                                    <span class="badge bg-light text-purple border border-purple">
                                        <i class="fas fa-tag fa-sm me-1"></i> Product: <%= product.offer || 0 %>%
                                    </span>
                                    <span class="badge bg-light text-orange border border-orange">
                                        Category: <%= product.categoryId?.offer || 0 %>%
                                    </span>
                                    <span class="badge bg-light text-teal border border-teal">
                                        Applied: <%= product.effectiveDiscount || 0 %>%
                                    </span>
                                </div>

                                <!-- Status Toggle -->
                                <div class="d-flex align-items-center justify-content-between mb-3 mt-3">
                                    <span class="text-muted small">Status</span>
                                    <div class="d-flex align-items-center">
                                        <div class="toggle-switch">
                                            <input 
                                                type="checkbox" 
                                                class="status-toggle"
                                                data-product-id="<%= product._id %>" 
                                                <%= product.isActive ? 'checked' : '' %> 
                                            >
                                            <span class="slider"></span>
                                        </div>
                                        <span id="status-<%= product._id %>" class="ms-2 small">
                                            <%= product.isActive ? 'Listed' : 'Unlisted' %>
                                        </span>
                                    </div>
                                </div>

                                <!-- Actions -->
                                <div class="product-actions">
                                    <a href="/admin/edit-product/<%= product._id %>" class="btn btn-outline-primary">
                                        <i class="fas fa-edit me-1"></i> Edit
                                    </a>
                                    <button class="btn btn-outline-danger delete-product-btn" data-id="<%= product._id %>">
                                        <i class="fas fa-trash me-1"></i> Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <!-- Products List View -->
                    <% products.forEach(function(product) { %>
                        <div class="card mb-3 product-list-item" data-id="<%= product._id %>">
                            <div class="card-body">
                                <!-- Checkbox for Bulk Selection -->
                                <% if (bulkActionsVisible) { %>
                                    <div class="product-list-checkbox">
                                        <div class="form-check">
                                            <input class="form-check-input product-select" type="checkbox" value="<%= product._id %>">
                                        </div>
                                    </div>
                                <% } %>

                                <div class="d-flex flex-column flex-md-row gap-3">
                                    <!-- Product Image -->
                                    <div class="product-list-img-container <%= bulkActionsVisible ? 'ms-4 ms-md-0' : '' %>">
                                        <img src="<%= product.images && product.images.length > 0 ? product.images[0].url : '/images/placeholder-product.png' %>" 
                                            alt="<%= product.name %>" class="product-list-img">
                                    </div>

                                    <div class="flex-grow-1">
                                        <div class="d-flex flex-column flex-md-row justify-content-between mb-2">
                                            <div>
                                                <h5 class="mb-1"><%= product.name %></h5>
                                                <div class="text-muted small text-uppercase">
                                                    <%= product.categoryId?.name || 'Uncategorized' %>
                                                </div>
                                            </div>
                                            <div class="mt-2 mt-md-0">
                                                <span class="badge <%= product.isActive ? 'bg-success' : 'bg-danger' %>">
                                                    <%= product.isActive ? 'Active' : 'Inactive' %>
                                                </span>
                                            </div>
                                        </div>

                                        <div class="row g-3 mb-3">
                                            <div class="col-md">
                                                <div class="text-muted small mb-1">Price</div>
                                                <div>
                                                    <% if (product.effectiveDiscount > 0 && product.variants && product.variants.length > 0) { %>
                                                        <span class="text-muted text-decoration-line-through me-1">₹<%= product.variants[0].varientPrice %></span>
                                                        <span class="fw-medium">₹<%= product.variants[0].salePrice %></span>
                                                    <% } else { %>
                                                        <span class="fw-medium">₹<%= product.variants && product.variants.length > 0 ? product.variants[0].varientPrice : 0 %></span>
                                                    <% } %>
                                                </div>
                                            </div>
                                            <div class="col-md">
                                                <div class="text-muted small mb-1">Stock</div>
                                                <div class="<%= product.variants && product.variants.length > 0 && product.variants[0].varientquatity > 10 ? 'text-success' : 
                                                        product.variants && product.variants.length > 0 && product.variants[0].varientquatity > 0 ? 'text-warning' : 'text-danger' %>">
                                                    <%= product.variants && product.variants.length > 0 ? product.variants[0].varientquatity + ' units' : '0 units' %>
                                                </div>
                                            </div>
                                            <div class="col-md">
                                                <div class="text-muted small mb-1">Product Offer</div>
                                                <div><%= product.offer || 0 %>%</div>
                                            </div>
                                            <div class="col-md">
                                                <div class="text-muted small mb-1">Category Offer</div>
                                                <div><%= product.categoryId?.offer || 0 %>%</div>
                                            </div>
                                            <div class="col-md">
                                                <div class="text-muted small mb-1">Applied Offer</div>
                                                <div>
                                                    <%= product.effectiveDiscount || 0 %>% 
                                                    (<%= product.discountSource === 'product' ? 'Product' : 'Category' %>)
                                                </div>
                                            </div>
                                        </div>

                                        <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center">
                                            <div class="d-flex align-items-center mb-2 mb-md-0">
                                                <div class="toggle-switch">
                                                    <input 
                                                        type="checkbox" 
                                                        class="status-toggle"
                                                        data-product-id="<%= product._id %>" 
                                                        <%= product.isActive ? 'checked' : '' %> 
                                                    >
                                                    <span class="slider"></span>
                                                </div>
                                                <span id="status-<%= product._id %>" class="ms-2 small">
                                                    <%= product.isActive ? 'Listed' : 'Unlisted' %>
                                                </span>
                                            </div>

                                            <div class="d-flex gap-2">
                                                <a href="/admin/edit-product/<%= product._id %>" class="btn btn-sm btn-outline-primary">
                                                    <i class="fas fa-edit me-1"></i> Edit
                                                </a>
                                                <button class="btn btn-sm btn-outline-danger delete-product-btn" data-id="<%= product._id %>">
                                                    <i class="fas fa-trash me-1"></i> Delete
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                <% } %>
            <% } %>
        </div>

        <!-- Pagination -->
        <% if (totalPages > 1) { %>
            <nav aria-label="Product pagination" class="mt-4">
                <ul class="pagination justify-content-center">
                    <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                        <a class="page-link" href="?page=<%= currentPage - 1 %><%= paginationQueryString %>" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                    
                    <% 
                    let startPage = Math.max(1, currentPage - 2);
                    let endPage = Math.min(totalPages, startPage + 4);
                    
                    if (endPage - startPage < 4 && totalPages > 5) {
                        if (startPage === 1) {
                            endPage = Math.min(5, totalPages);
                        } else {
                            startPage = Math.max(1, endPage - 4);
                        }
                    }
                    
                    if (startPage > 1) { %>
                        <li class="page-item">
                            <a class="page-link" href="?page=1<%= paginationQueryString %>">1</a>
                        </li>
                        
                        <% if (startPage > 2) { %>
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        <% } %>
                    <% } %>
                    
                    <% for (let i = startPage; i <= endPage; i++) { %>
                        <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                            <a class="page-link" href="?page=<%= i %><%= paginationQueryString %>"><%= i %></a>
                        </li>
                    <% } %>
                    
                    <% if (endPage < totalPages) { %>
                        <% if (endPage < totalPages - 1) { %>
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        <% } %>
                        
                        <li class="page-item">
                            <a class="page-link" href="?page=<%= totalPages %><%= paginationQueryString %>"><%= totalPages %></a>
                        </li>
                    <% } %>
                    
                    <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                        <a class="page-link" href="?page=<%= currentPage + 1 %><%= paginationQueryString %>" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                </ul>
            </nav>
        <% } %>
    </div>

    <!-- Delete Product Modal -->
    <div class="modal fade" id="deleteProductModal" tabindex="-1" aria-labelledby="deleteProductModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteProductModalLabel">Delete Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this product? This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bulk Delete Modal -->
    <div class="modal fade" id="bulkDeleteModal" tabindex="-1" aria-labelledby="bulkDeleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="bulkDeleteModalLabel">Delete Selected Products</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete <span id="deleteCount">0</span> products? This action cannot be undone!</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmBulkDeleteBtn">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bulk Offer Modal -->
    <div class="modal fade" id="bulkOfferModal" tabindex="-1" aria-labelledby="bulkOfferModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="bulkOfferModalLabel">Update Offers for Selected Products</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Set a new offer percentage for <span id="offerCount">0</span> selected products.</p>
                    <div class="mb-3">
                        <label for="bulkOfferValue" class="form-label">Offer Percentage (%)</label>
                        <input type="number" class="form-control" id="bulkOfferValue" min="0" max="100" placeholder="Enter offer percentage">
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="overrideExistingOffers">
                        <label class="form-check-label" for="overrideExistingOffers">
                            Override existing offers
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="confirmBulkOfferBtn">Apply Offer</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- noUiSlider for price range -->
    <script src="https://cdn.jsdelivr.net/npm/nouislider@14.6.3/distribute/nouislider.min.js"></script>
    <!-- Custom JS -->
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            // Sidebar Toggle
            const sidebarToggle = document.getElementById("sidebar-toggle");
            const sidebar = document.getElementById("sidebar");
            const mainContent = document.getElementById("main-content");

            if (sidebarToggle && sidebar && mainContent) {
                sidebarToggle.addEventListener("click", () => {
                    sidebar.classList.toggle("sidebar-collapsed");
                    mainContent.classList.toggle("main-content-expanded");
                    
                    // Change the icon direction
                    const icon = sidebarToggle.querySelector("i");
                    if (icon) {
                        icon.classList.toggle("fa-chevron-left");
                        icon.classList.toggle("fa-chevron-right");
                    }
                });
            }

            // Check screen size on load and resize
            function checkScreenSize() {
                if (window.innerWidth < 992 && sidebar && mainContent) {
                    sidebar.classList.add("sidebar-collapsed");
                    mainContent.classList.add("main-content-expanded");
                    
                    // Update toggle icon
                    const icon = sidebarToggle.querySelector("i");
                    if (icon && icon.classList.contains("fa-chevron-left")) {
                        icon.classList.remove("fa-chevron-left");
                        icon.classList.add("fa-chevron-right");
                    }
                }
            }

            checkScreenSize();
            window.addEventListener("resize", checkScreenSize);

            // Initialize variables
            let productToDelete = null;
            const selectedProducts = new Set();
            let priceRange = [0, 10000];
            const maxPriceLimit = 10000;
            let priceRangeSlider = null;

            // Get URL parameters
            const urlParams = new URLSearchParams(window.location.search);

            // Initialize price range slider
            if (document.getElementById("priceRangeSlider")) {
                // Set initial values from URL params
                const minPrice = urlParams.get("minPrice") ? Number.parseInt(urlParams.get("minPrice")) : 0;
                const maxPrice = urlParams.get("maxPrice") ? Number.parseInt(urlParams.get("maxPrice")) : maxPriceLimit;
                priceRange = [minPrice, maxPrice];

                // Create noUiSlider
                priceRangeSlider = noUiSlider.create(document.getElementById("priceRangeSlider"), {
                    start: priceRange,
                    connect: true,
                    step: 100,
                    range: {
                        min: 0,
                        max: maxPriceLimit,
                    },
                });

                // Update labels when slider values change
                priceRangeSlider.on("update", (values, handle) => {
                    document.getElementById("minPriceLabel").textContent = "₹" + Math.round(values[0]);
                    document.getElementById("maxPriceLabel").textContent = "₹" + Math.round(values[1]);
                });
            }

            // Toggle dark mode
            const toggleDarkModeBtn = document.getElementById("toggleDarkMode");
            if (toggleDarkModeBtn) {
                // Check if dark mode was previously enabled
                if (localStorage.getItem("darkMode") === "true") {
                    document.body.classList.add("dark-mode");
                    const icon = toggleDarkModeBtn.querySelector("i");
                    if (icon) {
                        icon.classList.remove("fa-moon");
                        icon.classList.add("fa-sun");
                    }
                    toggleDarkModeBtn.querySelector("span") && (toggleDarkModeBtn.querySelector("span").textContent = "Light Mode");
                }

                toggleDarkModeBtn.addEventListener("click", function () {
                    const body = document.body;
                    const isDarkMode = body.classList.toggle("dark-mode");

                    // Update button text and icon
                    const icon = this.querySelector("i");
                    if (isDarkMode) {
                        icon.classList.remove("fa-moon");
                        icon.classList.add("fa-sun");
                        this.querySelector("span") && (this.querySelector("span").textContent = "Light Mode");
                        localStorage.setItem("darkMode", "true");
                    } else {
                        icon.classList.remove("fa-sun");
                        icon.classList.add("fa-moon");
                        this.querySelector("span") && (this.querySelector("span").textContent = "Dark Mode");
                        localStorage.setItem("darkMode", "false");
                    }
                });
            }

            // Toggle view mode (grid/list)
            const gridViewBtn = document.getElementById("gridViewBtn");
            const listViewBtn = document.getElementById("listViewBtn");
            const productsContainer = document.getElementById("productsContainer");

            if (gridViewBtn && listViewBtn && productsContainer) {
                // Check if view mode was previously set
                const savedViewMode = localStorage.getItem("productView");
                if (savedViewMode === "list" && productsContainer.classList.contains("products-grid")) {
                    productsContainer.classList.remove("products-grid");
                    productsContainer.classList.add("products-list");
                    listViewBtn.classList.add("btn-primary");
                    listViewBtn.classList.remove("btn-outline-secondary");
                    gridViewBtn.classList.add("btn-outline-secondary");
                    gridViewBtn.classList.remove("btn-primary");
                }

                gridViewBtn.addEventListener("click", () => {
                    productsContainer.classList.remove("products-list");
                    productsContainer.classList.add("products-grid");
                    gridViewBtn.classList.add("btn-primary");
                    gridViewBtn.classList.remove("btn-outline-secondary");
                    listViewBtn.classList.add("btn-outline-secondary");
                    listViewBtn.classList.remove("btn-primary");
                    localStorage.setItem("productView", "grid");
                });

                listViewBtn.addEventListener("click", () => {
                    productsContainer.classList.remove("products-grid");
                    productsContainer.classList.add("products-list");
                    listViewBtn.classList.add("btn-primary");
                    listViewBtn.classList.remove("btn-outline-secondary");
                    gridViewBtn.classList.add("btn-outline-secondary");
                    gridViewBtn.classList.remove("btn-primary");
                    localStorage.setItem("productView", "list");
                });
            }

            // Search functionality with debounce
            const searchInput = document.getElementById("searchInput");
            const clearSearchBtn = document.getElementById("clearSearch");

            if (searchInput) {
                let searchTimeout;

                searchInput.addEventListener("input", function () {
                    clearTimeout(searchTimeout);
                    searchTimeout = setTimeout(() => {
                        const searchValue = this.value.trim();
                        updateURLParameter("search", searchValue);
                        updateURLParameter("page", "1"); // Reset to first page on search
                    }, 500);
                });

                // Clear search
                if (clearSearchBtn) {
                    clearSearchBtn.addEventListener("click", () => {
                        searchInput.value = "";
                        updateURLParameter("search", "");
                        updateURLParameter("page", "1");
                    });
                }
            }

            // Filter change handlers
            const categoryFilter = document.getElementById("categoryFilter");
            const stockFilter = document.getElementById("stockFilter");
            const sortFilter = document.getElementById("sortFilter");

            if (categoryFilter) {
                categoryFilter.addEventListener("change", function () {
                    updateURLParameter("category", this.value);
                    updateURLParameter("page", "1");
                });
            }

            if (stockFilter) {
                stockFilter.addEventListener("change", function () {
                    updateURLParameter("stock", this.value);
                    updateURLParameter("page", "1");
                });
            }

            if (sortFilter) {
                sortFilter.addEventListener("change", function () {
                    updateURLParameter("sort", this.value);
                });
            }

            // Price range filter
            const applyPriceRangeBtn = document.getElementById("applyPriceRange");
            const cancelPriceRangeBtn = document.getElementById("cancelPriceRange");

            if (applyPriceRangeBtn && priceRangeSlider) {
                applyPriceRangeBtn.addEventListener("click", () => {
                    const values = priceRangeSlider.get();
                    updateURLParameter("minPrice", Math.round(values[0]));
                    updateURLParameter("maxPrice", Math.round(values[1]));
                    updateURLParameter("page", "1");

                    // Close dropdown
                    const dropdown = bootstrap.Dropdown.getInstance(document.getElementById("priceRangeDropdown"));
                    if (dropdown) dropdown.hide();
                });
            }

            if (cancelPriceRangeBtn) {
                cancelPriceRangeBtn.addEventListener("click", () => {
                    // Close dropdown without applying
                    const dropdown = bootstrap.Dropdown.getInstance(document.getElementById("priceRangeDropdown"));
                    if (dropdown) dropdown.hide();
                });
            }

            // Reset filters
            const resetFiltersBtn = document.getElementById("resetFilters");

            if (resetFiltersBtn) {
                resetFiltersBtn.addEventListener("click", () => {
                    window.location.href = window.location.pathname;
                });
            }

            // Toggle product status (list/unlist)
            const statusToggles = document.querySelectorAll(".status-toggle");

            statusToggles.forEach((toggle) => {
                toggle.addEventListener("change", function () {
                    const productId = this.dataset.productId;
                    const isActive = this.checked;
                    const statusLabel = document.getElementById(`status-${productId}`);

                    // Optimistic UI update
                    if (statusLabel) {
                        statusLabel.textContent = isActive ? "Listed" : "Unlisted";
                    }

                    // Send API request
                    const url = isActive ? `/admin/products/${productId}/list` : `/admin/products/${productId}/unlist`;

                    fetch(url, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                    })
                        .then((response) => response.json())
                        .then((data) => {
                            if (data.success) {
                                // Show success notification
                                Swal.fire({
                                    icon: "success",
                                    title: "Success",
                                    text: data.message || `Product ${isActive ? "listed" : "unlisted"} successfully`,
                                    toast: true,
                                    position: "top-end",
                                    showConfirmButton: false,
                                    timer: 3000,
                                });
                            } else {
                                // Revert toggle if failed
                                this.checked = !isActive;
                                if (statusLabel) {
                                    statusLabel.textContent = !isActive ? "Listed" : "Unlisted";
                                }

                                throw new Error(data.message || "Failed to update product status");
                            }
                        })
                        .catch((error) => {
                            console.error("Error toggling product status:", error);

                            // Show error notification
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "Failed to update product status. Please try again.",
                                toast: true,
                                position: "top-end",
                                showConfirmButton: false,
                                timer: 3000,
                            });
                        });
                });
            });

            // Delete product
            const deleteProductBtns = document.querySelectorAll(".delete-product-btn");
            const deleteProductModal = document.getElementById("deleteProductModal");
            const confirmDeleteBtn = document.getElementById("confirmDeleteBtn");

            deleteProductBtns.forEach((btn) => {
                btn.addEventListener("click", function () {
                    productToDelete = this.dataset.id;

                    // Show modal
                    const modal = new bootstrap.Modal(deleteProductModal);
                    modal.show();
                });
            });

            if (confirmDeleteBtn) {
                confirmDeleteBtn.addEventListener("click", () => {
                    if (!productToDelete) return;

                    // Send delete request
                    fetch(`/admin/products/${productToDelete}`, {
                        method: "DELETE",
                        headers: { "Content-Type": "application/json" },
                    })
                        .then((response) => response.json())
                        .then((data) => {
                            if (data.success) {
                                // Show success notification
                                Swal.fire({
                                    icon: "success",
                                    title: "Success",
                                    text: data.message || "Product deleted successfully",
                                    toast: true,
                                    position: "top-end",
                                    showConfirmButton: false,
                                    timer: 3000,
                                });

                                // Remove product from DOM
                                const productElement = document.querySelector(`[data-id="${productToDelete}"]`);
                                if (productElement) {
                                    productElement.remove();
                                }

                                // Hide modal
                                const modal = bootstrap.Modal.getInstance(deleteProductModal);
                                modal.hide();

                                // Check if no products left
                                const productsContainer = document.getElementById("productsContainer");
                                if (productsContainer && productsContainer.children.length === 0) {
                                    // Reload page to show empty state
                                    window.location.reload();
                                }
                            } else {
                                throw new Error(data.message || "Failed to delete product");
                            }
                        })
                        .catch((error) => {
                            console.error("Error deleting product:", error);

                            // Show error notification
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "Failed to delete product. Please try again.",
                                toast: true,
                                position: "top-end",
                                showConfirmButton: false,
                                timer: 3000,
                            });
                        })
                        .finally(() => {
                            productToDelete = null;
                        });
                });
            }

            // Bulk actions
            const toggleBulkActionsBtn = document.getElementById("toggleBulkActions");
            const selectAllCheckbox = document.getElementById("selectAll");
            const productCheckboxes = document.querySelectorAll(".product-select");
            const bulkActionBtns = document.querySelectorAll(".bulk-action-btn");
            const selectedCountElement = document.getElementById("selectedCount");

            // Bulk delete modal elements
            const bulkDeleteModal = document.getElementById("bulkDeleteModal");
            const deleteCountElement = document.getElementById("deleteCount");
            const confirmBulkDeleteBtn = document.getElementById("confirmBulkDeleteBtn");

            // Bulk offer modal elements
            const bulkOfferModal = document.getElementById("bulkOfferModal");
            const offerCountElement = document.getElementById("offerCount");
            const bulkOfferValueInput = document.getElementById("bulkOfferValue");
            const overrideExistingOffersCheckbox = document.getElementById("overrideExistingOffers");
            const confirmBulkOfferBtn = document.getElementById("confirmBulkOfferBtn");

            if (toggleBulkActionsBtn) {
                toggleBulkActionsBtn.addEventListener("click", function () {
                    // Update URL parameter to persist bulk actions visibility
                    const isBulkActionsVisible = urlParams.get("bulkActions") === "true";
                    updateURLParameter("bulkActions", isBulkActionsVisible ? null : "true");
                    
                    // Reload page to apply changes
                    window.location.reload();
                });
            }

            // Select all products
            if (selectAllCheckbox) {
                selectAllCheckbox.addEventListener("change", function () {
                    const isChecked = this.checked;

                    productCheckboxes.forEach((checkbox) => {
                        checkbox.checked = isChecked;

                        if (isChecked) {
                            selectedProducts.add(checkbox.value);
                        } else {
                            selectedProducts.delete(checkbox.value);
                        }
                    });

                    updateSelectedCount();
                });
            }

            // Select individual products
            productCheckboxes.forEach((checkbox) => {
                checkbox.addEventListener("change", function () {
                    if (this.checked) {
                        selectedProducts.add(this.value);
                    } else {
                        selectedProducts.delete(this.value);
                    }

                    // Update "Select All" checkbox
                    if (selectAllCheckbox) {
                        selectAllCheckbox.checked =
                            productCheckboxes.length > 0 && Array.from(productCheckboxes).every((cb) => cb.checked);
                    }

                    updateSelectedCount();
                });
            });

            // Update selected count and enable/disable bulk action buttons
            function updateSelectedCount() {
                if (selectedCountElement) {
                    selectedCountElement.textContent = selectedProducts.size;
                }

                // Enable/disable bulk action buttons
                bulkActionBtns.forEach((btn) => {
                    btn.disabled = selectedProducts.size === 0;
                });
            }

            // Bulk action button handlers
            bulkActionBtns.forEach((btn) => {
                btn.addEventListener("click", function () {
                    const action = this.dataset.action;

                    if (selectedProducts.size === 0) {
                        Swal.fire({
                            icon: "warning",
                            title: "No Products Selected",
                            text: "Please select at least one product.",
                            toast: true,
                            position: "top-end",
                            showConfirmButton: false,
                            timer: 3000,
                        });
                        return;
                    }

                    switch (action) {
                        case "list":
                            bulkUpdateStatus(true);
                            break;
                        case "unlist":
                            bulkUpdateStatus(false);
                            break;
                        case "delete":
                            // Show bulk delete modal
                            if (deleteCountElement) {
                                deleteCountElement.textContent = selectedProducts.size;
                            }
                            const deleteModal = new bootstrap.Modal(bulkDeleteModal);
                            deleteModal.show();
                            break;
                        case "offer":
                            // Show bulk offer modal
                            if (offerCountElement) {
                                offerCountElement.textContent = selectedProducts.size;
                            }
                            const offerModal = new bootstrap.Modal(bulkOfferModal);
                            offerModal.show();
                            break;
                    }
                });
            });

            // Bulk update status (list/unlist)
            function bulkUpdateStatus(isActive) {
                if (selectedProducts.size === 0) return;

                // Send API request
                fetch("/admin/products/bulk-update-status", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        productIds: Array.from(selectedProducts),
                        isActive,
                    }),
                })
                    .then((response) => response.json())
                    .then((data) => {
                        if (data.success) {
                            // Update UI
                            selectedProducts.forEach((productId) => {
                                const toggle = document.querySelector(`.status-toggle[data-product-id="${productId}"]`);
                                const statusLabel = document.getElementById(`status-${productId}`);
                                const statusBadge = document.querySelector(`[data-id="${productId}"] .product-badge`);

                                if (toggle) {
                                    toggle.checked = isActive;
                                }

                                if (statusLabel) {
                                    statusLabel.textContent = isActive ? "Listed" : "Unlisted";
                                }

                                if (statusBadge) {
                                    statusBadge.className = `product-badge ${isActive ? 'badge-success' : 'badge-danger'}`;
                                    statusBadge.textContent = isActive ? 'Active' : 'Inactive';
                                }
                            });

                            // Show success notification
                            Swal.fire({
                                icon: "success",
                                title: "Success",
                                text: data.message || `${selectedProducts.size} products have been ${isActive ? "listed" : "unlisted"}.`,
                                toast: true,
                                position: "top-end",
                                showConfirmButton: false,
                                timer: 3000,
                            });

                            // Clear selection
                            selectedProducts.clear();
                            updateSelectedCount();

                            // Update checkboxes
                            if (selectAllCheckbox) {
                                selectAllCheckbox.checked = false;
                            }

                            productCheckboxes.forEach((checkbox) => {
                                checkbox.checked = false;
                            });
                        } else {
                            throw new Error(data.message || "Operation failed");
                        }
                    })
                    .catch((error) => {
                        console.error("Error updating product status:", error);

                        // Show error notification
                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: "Failed to update product status. Please try again.",
                            toast: true,
                            position: "top-end",
                            showConfirmButton: false,
                            timer: 3000,
                        });
                    });
            }

            // Bulk delete products
            if (confirmBulkDeleteBtn) {
                confirmBulkDeleteBtn.addEventListener("click", () => {
                    if (selectedProducts.size === 0) return;

                    // Send delete request
                    fetch("/admin/products/bulk-delete", {
                        method: "DELETE",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ productIds: Array.from(selectedProducts) }),
                    })
                        .then((response) => response.json())
                        .then((data) => {
                            if (data.success) {
                                // Show success notification
                                Swal.fire({
                                    icon: "success",
                                    title: "Success",
                                    text: data.message || `${selectedProducts.size} products have been deleted.`,
                                    toast: true,
                                    position: "top-end",
                                    showConfirmButton: false,
                                    timer: 3000,
                                });

                                // Remove products from DOM
                                selectedProducts.forEach((productId) => {
                                    const productElement = document.querySelector(`[data-id="${productId}"]`);
                                    if (productElement) {
                                        productElement.remove();
                                    }
                                });

                                // Hide modal
                                const modal = bootstrap.Modal.getInstance(bulkDeleteModal);
                                modal.hide();

                                // Clear selection
                                selectedProducts.clear();
                                updateSelectedCount();

                                // Check if no products left
                                const productsContainer = document.getElementById("productsContainer");
                                if (productsContainer && productsContainer.children.length === 0) {
                                    // Reload page to show empty state
                                    window.location.reload();
                                }
                            } else {
                                throw new Error(data.message || "Deletion failed");
                            }
                        })
                        .catch((error) => {
                            console.error("Error deleting products:", error);

                            // Show error notification
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "Failed to delete products. Please try again.",
                                toast: true,
                                position: "top-end",
                                showConfirmButton: false,
                                timer: 3000,
                            });
                        });
                });
            }

            // Apply bulk offer
            if (confirmBulkOfferBtn) {
                confirmBulkOfferBtn.addEventListener("click", () => {
                    if (selectedProducts.size === 0 || !bulkOfferValueInput) return;

                    const offerValue = Number.parseInt(bulkOfferValueInput.value);

                    if (isNaN(offerValue) || offerValue < 0 || offerValue > 100) {
                        Swal.fire({
                            icon: "error",
                            title: "Invalid Offer",
                            text: "Please enter a valid offer percentage between 0 and 100.",
                            toast: true,
                            position: "top-end",
                            showConfirmButton: false,
                            timer: 3000,
                        });
                        return;
                    }

                    // Send API request
                    fetch("/admin/products/update-offer", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            productIds: Array.from(selectedProducts),
                            offer: offerValue,
                            override: overrideExistingOffersCheckbox ? overrideExistingOffersCheckbox.checked : false,
                        }),
                    })
                        .then((response) => response.json())
                        .then((data) => {
                            if (data.success) {
                                // Show success notification
                                Swal.fire({
                                    icon: "success",
                                    title: "Success",
                                    text: data.message || `Offer applied to ${selectedProducts.size} products.`,
                                    toast: true,
                                    position: "top-end",
                                    showConfirmButton: false,
                                    timer: 3000,
                                });

                                // Hide modal
                                const modal = bootstrap.Modal.getInstance(bulkOfferModal);
                                modal.hide();

                                // Clear selection and inputs
                                selectedProducts.clear();
                                updateSelectedCount();

                                if (bulkOfferValueInput) {
                                    bulkOfferValueInput.value = "";
                                }

                                if (overrideExistingOffersCheckbox) {
                                    overrideExistingOffersCheckbox.checked = false;
                                }

                                // Update checkboxes
                                if (selectAllCheckbox) {
                                    selectAllCheckbox.checked = false;
                                }

                                productCheckboxes.forEach((checkbox) => {
                                    checkbox.checked = false;
                                });

                                // Reload page to reflect changes
                                window.location.reload();
                            } else {
                                throw new Error(data.message || "Operation failed");
                            }
                        })
                        .catch((error) => {
                            console.error("Error applying offer:", error);

                            // Show error notification
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "Failed to apply offer. Please try again.",
                                toast: true,
                                position: "top-end",
                                showConfirmButton: false,
                                timer: 3000,
                            });
                        });
                });
            }

            // Helper function to update URL parameters
            function updateURLParameter(key, value) {
                const url = new URL(window.location.href);

                if (value) {
                    url.searchParams.set(key, value);
                } else {
                    url.searchParams.delete(key);
                }

                window.history.replaceState({}, "", url);

                if (key !== "search") {
                    window.location.href = url.toString();
                }
            }

            // Auto-dismiss alerts after 5 seconds
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                setTimeout(() => {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                }, 5000);
            });
        });
    </script>
</body>
</html>