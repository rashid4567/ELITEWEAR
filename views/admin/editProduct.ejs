<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product | Admin Dashboard</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Select2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <!-- Toastify CSS -->
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <!-- Cropper.js CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/adminStyle/editProduct.css">
</head>
<body>

    
    <div class="container-fluid">
        <div class="row">
            
            
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2">Edit Product</h1>
                    <div class="btn-toolbar mb-2 mb-md-0">
                        <a href="/admin/productManagement" class="btn btn-sm btn-outline-secondary">
                            <i class="fas fa-arrow-left"></i> Back to Products
                        </a>
                    </div>
                </div>

                <% if (error) { %>
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <%= error %>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                <% } %>

                <div class="card shadow-sm">
                    <div class="card-body">
                        <form id="editProductForm" action="/admin/edit-product/<%= product._id %>" method="POST" enctype="multipart/form-data">
                            <!-- Form Steps Navigation -->
                            <div class="form-steps-container mb-4">
                                <div class="form-step active" data-step="1">
                                    <div class="step-number">1</div>
                                    <div class="step-title">Basic Info</div>
                                </div>
                                <div class="form-step" data-step="2">
                                    <div class="step-number">2</div>
                                    <div class="step-title">Images</div>
                                </div>
                                <div class="form-step" data-step="3">
                                    <div class="step-number">3</div>
                                    <div class="step-title">Variants</div>
                                </div>
                                <div class="form-step" data-step="4">
                                    <div class="step-number">4</div>
                                    <div class="step-title">Pricing & Offers</div>
                                </div>
                            </div>

                            <!-- Step 1: Basic Information -->
                            <div class="form-step-content" id="step1">
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="productName" class="form-label">Product Name <span class="text-danger">*</span></label>
                                        <input type="text" class="form-control" id="productName" name="productName" value="<%= product.name %>" required>
                                        <div class="invalid-feedback">Please enter a product name.</div>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="productCategory" class="form-label">Category <span class="text-danger">*</span></label>
                                        <select class="form-select" id="productCategory" name="productCategory" required>
                                            <option value="">Select Category</option>
                                            <% categories.forEach(category => { %>
                                                <option value="<%= category._id %>" <%= product.categoryId && product.categoryId._id.toString() === category._id.toString() ? 'selected' : '' %>>
                                                    <%= category.name %>
                                                </option>
                                            <% }); %>
                                        </select>
                                        <div class="invalid-feedback">Please select a category.</div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="brand" class="form-label">Brand</label>
                                        <input type="text" class="form-control" id="brand" name="brand" value="<%= product.brand || '' %>">
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="sku" class="form-label">SKU</label>
                                        <input type="text" class="form-control" id="sku" name="sku" value="<%= product.sku || '' %>">
                                        <div class="invalid-feedback">Please enter a valid SKU (letters, numbers, hyphens and underscores only).</div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="color" class="form-label">Color <span class="text-danger">*</span></label>
                                        <input type="text" class="form-control" id="color" name="color" value="<%= product.color %>" required>
                                        <div class="invalid-feedback">Please enter a color.</div>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="fabric" class="form-label">Fabric <span class="text-danger">*</span></label>
                                        <input type="text" class="form-control" id="fabric" name="fabric" value="<%= product.fabric %>" required>
                                        <div class="invalid-feedback">Please enter a fabric type.</div>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label for="productDescription" class="form-label">Description <span class="text-danger">*</span></label>
                                    <textarea class="form-control" id="productDescription" name="productDescription" rows="4" required><%= product.description %></textarea>
                                    <div class="invalid-feedback">Please enter a product description.</div>
                                </div>

                                <div class="d-flex justify-content-end">
                                    <button type="button" class="btn btn-primary next-step">Next: Images</button>
                                </div>
                            </div>

                            <!-- Step 2: Images -->
                            <div class="form-step-content d-none" id="step2">
                                <div class="mb-4">
                                    <h4>Product Images</h4>
                                    <div class="image-gallery-container">
                                        <% if (product.images && product.images.length > 0) { %>
                                            <div class="image-gallery">
                                                <div class="current-image-display">
                                                    <div class="image-navigation">
                                                        <button type="button" class="nav-btn prev-image" aria-label="Previous image">
                                                            <i class="fas fa-chevron-left"></i>
                                                        </button>
                                                        <div class="image-preview-container">
                                                            <img id="currentImagePreview" src="<%= product.images[0].url %>" class="img-fluid" alt="Product Image">
                                                            <div class="image-actions">
                                                                <button type="button" class="btn btn-sm btn-light image-action-btn expand-image" data-bs-toggle="modal" data-bs-target="#imagePreviewModal">
                                                                    <i class="fas fa-expand"></i>
                                                                </button>
                                                                <button type="button" class="btn btn-sm btn-light image-action-btn set-as-main" data-image-index="0">
                                                                    <i class="fas fa-star"></i>
                                                                </button>
                                                                <button type="button" class="btn btn-sm btn-danger image-action-btn remove-image" data-image-index="0">
                                                                    <i class="fas fa-trash"></i>
                                                                </button>
                                                            </div>
                                                            <div class="main-image-badge <%= product.images[0].isMain ? '' : 'd-none' %>">Main Image</div>
                                                        </div>
                                                        <button type="button" class="nav-btn next-image" aria-label="Next image">
                                                            <i class="fas fa-chevron-right"></i>
                                                        </button>
                                                    </div>
                                                    <div class="image-counter">
                                                        <span id="currentImageIndex">1</span> / <span id="totalImages"><%= product.images.length %></span>
                                                    </div>
                                                </div>
                                                
                                                <div class="image-thumbnails">
                                                    <% product.images.forEach((image, index) => { %>
                                                        <div class="image-thumbnail <%= index === 0 ? 'active' : '' %> <%= image.isMain ? 'is-main' : '' %>" 
                                                             data-index="<%= index %>" 
                                                             data-url  : '' %>" 
                                                             data-index="<%= index %>" 
                                                             data-url="<%= image.url %>"
                                                             data-is-main="<%= image.isMain %>">
                                                            <img src="<%= image.url %>" alt="Thumbnail <%= index + 1 %>">
                                                            <% if (image.isMain) { %>
                                                                <div class="thumbnail-badge">Main</div>
                                                            <% } %>
                                                        </div>
                                                    <% }); %>
                                                </div>
                                            </div>
                                            
                                            <!-- Hidden inputs to track image operations -->
                                            <div id="imageOperations">
                                                <% product.images.forEach((image, index) => { %>
                                                    <input type="hidden" name="existingImages[<%= index %>][url]" value="<%= image.url %>">
                                                    <input type="hidden" name="existingImages[<%= index %>][isMain]" value="<%= image.isMain %>">
                                                    <% if (image.public_id) { %>
                                                        <input type="hidden" name="existingImages[<%= index %>][public_id]" value="<%= image.public_id %>">
                                                    <% } %>
                                                <% }); %>
                                            </div>
                                        <% } else { %>
                                            <div class="alert alert-info">
                                                <i class="fas fa-info-circle me-2"></i> No images have been uploaded for this product yet.
                                            </div>
                                        <% } %>
                                    </div>
                                </div>

                                <!-- Update the upload section to support cropping -->
                                <div class="upload-section mt-4">
                                    <h5>Upload New Images</h5>
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="mainImage" class="form-label">Main Product Image</label>
                                            <div class="custom-file-upload">
                                                <input type="file" class="form-control image-upload" id="mainImage" name="mainImage" accept="image/*" data-preview="mainImagePreview">
                                                <div class="upload-preview" id="mainImagePreview">
                                                    <div class="upload-placeholder">
                                                        <i class="fas fa-cloud-upload-alt"></i>
                                                        <span>Click or drag to upload</span>
                                                    </div>
                                                    <img class="preview-img d-none" src="#" alt="Preview">
                                                    <button type="button" class="btn-clear-upload d-none">
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                </div>
                                            </div>
                                            <div class="form-text">This will replace the current main image if set as main.</div>
                                        </div>
                                        
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Additional Images</label>
                                            <div class="row">
                                                <div class="col-4">
                                                    <div class="custom-file-upload">
                                                        <input type="file" class="form-control image-upload" name="additionalImage1" accept="image/*" data-preview="additionalImage1Preview">
                                                        <div class="upload-preview" id="additionalImage1Preview">
                                                            <div class="upload-placeholder">
                                                                <i class="fas fa-plus"></i>
                                                            </div>
                                                            <img class="preview-img d-none" src="#" alt="Preview">
                                                            <button type="button" class="btn-clear-upload d-none">
                                                                <i class="fas fa-times"></i>
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-4">
                                                    <div class="custom-file-upload">
                                                        <input type="file" class="form-control image-upload" name="additionalImage2" accept="image/*" data-preview="additionalImage2Preview">
                                                        <div class="upload-preview" id="additionalImage2Preview">
                                                            <div class="upload-placeholder">
                                                                <i class="fas fa-plus"></i>
                                                            </div>
                                                            <img class="preview-img d-none" src="#" alt="Preview">
                                                            <button type="button" class="btn-clear-upload d-none">
                                                                <i class="fas fa-times"></i>
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-4">
                                                    <div class="custom-file-upload">
                                                        <input type="file" class="form-control image-upload" name="additionalImage3" accept="image/*" data-preview="additionalImage3Preview">
                                                        <div class="upload-preview" id="additionalImage3Preview">
                                                            <div class="upload-placeholder">
                                                                <i class="fas fa-plus"></i>
                                                            </div>
                                                            <img class="preview-img d-none" src="#" alt="Preview">
                                                            <button type="button" class="btn-clear-upload d-none">
                                                                <i class="fas fa-times"></i>
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-text">These will be added to your product gallery.</div>
                                        </div>
                                    </div>
                                </div>

                                <div class="d-flex justify-content-between mt-4">
                                    <button type="button" class="btn btn-secondary prev-step">Previous: Basic Info</button>
                                    <button type="button" class="btn btn-primary next-step">Next: Variants</button>
                                </div>
                            </div>

                            <!-- Step 3: Variants -->
                            <div class="form-step-content d-none" id="step3">
                                <div class="mb-4">
                                    <h4>Current Variants</h4>
                                    <div class="table-responsive">
                                        <table class="table table-bordered table-hover" id="currentVariantsTable">
                                            <thead class="table-light">
                                                <tr>
                                                    <th>Size</th>
                                                    <th>Original Price</th>
                                                    <th>Sale Price</th>
                                                    <th>Stock</th>
                                                    <th>Status</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <% if (product.variants && product.variants.length > 0) { %>
                                                    <% product.variants.forEach((variant, index) => { %>
                                                        <tr data-variant-index="<%= index %>" data-variant-id="<%= variant._id %>" class="variant-summary-row" data-size="<%= variant.size %>">
                                                            <td class="variant-size-cell">
                                                                <span class="variant-size-display"><%= variant.size %></span>
                                                                <div class="variant-size-edit d-none">
                                                                    <select class="form-select form-select-sm variant-size-select">
                                                                        <% 
                                                                        const allSizes = ['S', 'M', 'L', 'XL', 'XXL'];
                                                                        const productSizes = product.variants.map(v => v.size);
                                                                        %>
                                                                        <option value="<%= variant.size %>" selected><%= variant.size %></option>
                                                                        <% allSizes.forEach(size => { 
                                                                            if (size !== variant.size && !productSizes.includes(size)) { %>
                                                                                <option value="<%= size %>"><%= size %></option>
                                                                            <% }
                                                                        }); %>
                                                                    </select>
                                                                </div>
                                                            </td>
                                                            <td class="variant-price-cell">
    <span class="variant-price-display">₹<%= variant.varientPrice.toFixed(2) %></span>
    <div class="variant-price-edit d-none">
        <input type="number" 
               class="form-control form-control-sm variant-price-input" 
               value="<%= variant.varientPrice %>" 
               min="100" 
               max="500000" 
               step="0.01"
               oninput="validateVariantPrice(this)">
        <div class="invalid-feedback" id="priceError">
            Price must be between ₹100 and ₹5,00,000.
        </div>
    </div>
</td>
                                                            <td>₹<%= variant.salePrice ? variant.salePrice.toFixed(2) : variant.varientPrice.toFixed(2) %></td>
                                                            <td class="variant-stock-cell">
                                                                <span class="variant-stock-display"><%= variant.varientquatity %></span>
                                                                <div class="variant-stock-edit d-none">
                                                                    <input type="number" class="form-control form-control-sm variant-stock-input" 
                                                                           value="<%= variant.varientquatity %>" min="0">
                                                                </div>
                                                            </td>
                                                            <td>
                                                                <% if (variant.varientquatity > 10) { %>
                                                                    <span class="badge bg-success">In Stock</span>
                                                                <% } else if (variant.varientquatity > 0) { %>
                                                                    <span class="badge bg-warning text-dark">Low Stock</span>
                                                                <% } else { %>
                                                                    <span class="badge bg-danger">Out of Stock</span>
                                                                <% } %>
                                                            </td>
                                                            <td>
                                                                <div class="btn-group btn-group-sm">
                                                                    <button type="button" class="btn btn-outline-primary edit-variant" data-index="<%= index %>">
                                                                        <i class="fas fa-edit"></i> Edit
                                                                    </button>
                                                                    <button type="button" class="btn btn-outline-success save-variant d-none" data-index="<%= index %>">
                                                                        <i class="fas fa-check"></i> Save
                                                                    </button>
                                                                </div>
                                                            </td>
                                                        </tr>
                                                    <% }); %>
                                                <% } else { %>
                                                    <tr>
                                                        <td colspan="6" class="text-center">No variants available</td>
                                                    </tr>
                                                <% } %>
                                            </tbody>
                                        </table>
                                    </div>
                                    <div class="d-flex justify-content-end mt-2">
                                        <button type="button" class="btn btn-primary" id="updateVariantSizes">
                                            <i class="fas fa-save"></i> Update Variants
                                        </button>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <h4>Add New Variant</h4>
                                    <p class="text-muted">Add a new size variant to this product</p>
                                    
                                    <div class="size-selector mb-3">
                                        <% 
                                        const availableSizes = ['S', 'M', 'L', 'XL', 'XXL'];
                                        const productSizes = product.variants ? product.variants.map(v => v.size) : [];
                                        %>
                                        
                                        <div class="btn-group" role="group" aria-label="Size selection">
                                            <% availableSizes.forEach(size => { 
                                                const exists = productSizes.includes(size);
                                            %>
                                                <button type="button" 
                                                        class="btn <%= exists ? 'btn-secondary disabled' : 'btn-outline-secondary' %> size-btn" 
                                                        data-size="<%= size %>"
                                                        data-exists="<%= exists %>">
                                                    <%= size %>
                                                </button>
                                            <% }); %>
                                        </div>
                                    </div>

                                    <div id="variantFormContainer" class="card p-3 mb-3 d-none">
                                        <h5 id="variantFormTitle">Add New Variant</h5>
                                        <div class="row">
                                            <div class="col-md-4 mb-2">
                                                <label for="variantSize" class="form-label">Size</label>
                                                <select class="form-select" id="variantSize" name="variantSize">
                                                    <option value="">Select Size</option>
                                                    <% 
                                                    const availableSizesForNew = ['S', 'M', 'L', 'XL', 'XXL'];
                                                    const existingSizes = product.variants ? product.variants.map(v => v.size) : [];
                                                    %>
                                                    <% availableSizesForNew.forEach(size => { 
                                                        if (!existingSizes.includes(size)) { %>
                                                            <option value="<%= size %>"><%= size %></option>
                                                        <% }
                                                    }); %>
                                                </select>
                                            </div>
                                            <div class="col-md-4 mb-2">
                                                <label for="variantPrice" class="form-label">Price (₹)</label>
                                                <input type="number" class="form-control" id="variantPrice" name="variantPrice" min="100" step="0.01">
                                            </div>
                                            <div class="col-md-4 mb-2">
                                                <label for="variantQuantity" class="form-label">Stock Quantity</label>
                                                <input type="number" class="form-control" id="variantQuantity" name="variantQuantity" min="0">
                                            </div>
                                        </div>
                                        <div class="d-flex justify-content-end mt-2">
                                            <button type="button" class="btn btn-secondary me-2" id="cancelVariant">Cancel</button>
                                            <button type="button" class="btn btn-success" id="saveVariant">Save Variant</button>
                                        </div>
                                    </div>

                                    <div id="variantsContainer">
                                        <!-- Variants will be added here dynamically -->
                                        <% if (product.variants && product.variants.length > 0) { %>
                                            <% product.variants.forEach((variant, index) => { %>
                                                <div class="variant-item" id="variant-<%= index %>" data-variant-id="<%= variant._id %>">
                                                    <input type="hidden" name="variants[<%= index %>][_id]" value="<%= variant._id %>">
                                                    <input type="hidden" name="variants[<%= index %>][size]" value="<%= variant.size %>">
                                                    <input type="hidden" name="variants[<%= index %>][varientPrice]" value="<%= variant.varientPrice %>">
                                                    <input type="hidden" name="variants[<%= index %>][varientquatity]" value="<%= variant.varientquatity %>">
                                                </div>
                                            <% }); %>
                                        <% } %>
                                    </div>
                                </div>

                                <div class="d-flex justify-content-between">
                                    <button type="button" class="btn btn-secondary prev-step">Previous: Images</button>
                                    <button type="button" class="btn btn-primary next-step">Next: Pricing & Offers</button>
                                </div>
                            </div>

                            <!-- Step 4: Pricing & Offers -->
                            <div class="form-step-content d-none" id="step4">
                                <div class="row">
                                    <div class="col-md-6 mb-3">
    <label for="productOffer" class="form-label">Product Discount (%)</label>
    <input 
        type="number" 
        class="form-control" 
        id="productOffer" 
        name="productOffer" 
        min="0" 
        max="100" 
        step="0.01"
        value="<%= product.offer || 0 %>"
        required
        oninput="validateDiscount(this)"
    >
    <div class="invalid-feedback" id="discountError">
        Discount must be between 0% and 100%.
    </div>
    <small class="form-text text-muted">Enter a percentage discount for this product (0-100%).</small>
</div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Category Discount</label>
                                        <input type="text" class="form-control" value="<%= product.categoryId && product.categoryId.offer ? product.categoryId.offer + '%' : '0%' %>" disabled>
                                        <small class="form-text text-muted">This is applied from the category and cannot be changed here.</small>
                                    </div>
                                </div>

                                <div class="card bg-light mb-3">
                                    <div class="card-body">
                                        <h5 class="card-title">Effective Discount</h5>
                                        <p class="card-text">
                                            <span class="badge bg-info"><%= product.effectiveDiscount || 0 %>%</span>
                                            <small class="text-muted ms-2">
                                                (Applied from <%= product.discountSource || 'none' %>)
                                            </small>
                                        </p>
                                        <p class="text-muted">The higher discount between product and category will be applied automatically.</p>
                                    </div>
                                </div>

                                <div class="d-flex justify-content-between">
                                    <button type="button" class="btn btn-secondary prev-step">Previous: Variants</button>
                                    <button type="submit" class="btn btn-success">Update Product</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Image Preview Modal -->
    <div class="modal fade" id="imagePreviewModal" tabindex="-1" aria-labelledby="imagePreviewModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="imagePreviewModalLabel">Product Image Preview</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    <img id="modalImagePreview" src="/placeholder.svg" class="img-fluid" alt="Product Image Preview">
                </div>
                <div class="modal-footer">
                    <div class="modal-image-actions">
                        <button type="button" class="btn btn-outline-primary modal-set-main">
                            <i class="fas fa-star me-1"></i> Set as Main Image
                        </button>
                        <button type="button" class="btn btn-outline-danger modal-remove-image">
                            <i class="fas fa-trash me-1"></i> Remove Image
                        </button>
                    </div>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Crop Modal -->
    <div class="modal fade" id="cropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="img-container">
                        <img id="imageToCrop" src="/placeholder.svg" class="img-fluid" alt="Image to crop">
                    </div>
                    <div class="crop-controls mt-3">
                        <button type="button" class="crop-control-btn" id="zoomIn" title="Zoom In">
                            <i class="fas fa-search-plus"></i>
                        </button>
                        <button type="button" class="crop-control-btn" id="zoomOut" title="Zoom Out">
                            <i class="fas fa-search-minus"></i>
                        </button>
                        <button type="button" class="crop-control-btn" id="rotateLeft" title="Rotate Left">
                            <i class="fas fa-undo"></i>
                        </button>
                        <button type="button" class="crop-control-btn" id="rotateRight" title="Rotate Right">
                            <i class="fas fa-redo"></i>
                        </button>
                        <button type="button" class="crop-control-btn" id="flipHorizontal" title="Flip Horizontal">
                            <i class="fas fa-arrows-alt-h"></i>
                        </button>
                        <button type="button" class="crop-control-btn" id="flipVertical" title="Flip Vertical">
                            <i class="fas fa-arrows-alt-v"></i>
                        </button>
                    </div>
                    <div class="d-flex justify-content-center gap-2 mt-3">
                        <button type="button" class="crop-aspect-btn active" data-ratio="1">1:1</button>
                        <button type="button" class="crop-aspect-btn" data-ratio="4/3">4:3</button>
                        <button type="button" class="crop-aspect-btn" data-ratio="16/9">16:9</button>
                        <button type="button" class="crop-aspect-btn" data-ratio="NaN">Free</button>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="cropImage" class="btn btn-primary">
                        <i class="fas fa-crop-alt me-2"></i> Crop & Save
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Select2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <!-- Toastify JS -->
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <!-- Cropper.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- Custom JS -->
    <script>
        // Global variables
        // Global variables
let cropper
let currentImageIndex = 0
const existingSizes = new Set()

document.addEventListener("DOMContentLoaded", () => {
  // Form elements
  const editProductForm = document.getElementById("editProductForm")
  const formSteps = document.querySelectorAll(".form-step")
  const formStepContents = document.querySelectorAll(".form-step-content")
  const nextStepButtons = document.querySelectorAll(".next-step")
  const prevStepButtons = document.querySelectorAll(".prev-step")

  // Variant management elements
  const variantFormContainer = document.getElementById("variantFormContainer")
  const variantSizeSelect = document.getElementById("variantSize")
  const variantPrice = document.getElementById("variantPrice")
  const variantQuantity = document.getElementById("variantQuantity")
  const saveVariantBtn = document.getElementById("saveVariant")
  const cancelVariantBtn = document.getElementById("cancelVariant")
  const variantsContainer = document.getElementById("variantsContainer")
  const sizeButtons = document.querySelectorAll(".size-btn")
  const updateVariantSizesBtn = document.getElementById("updateVariantSizes")

  // Image management
  const imageUploads = document.querySelectorAll(".image-upload")
  const currentImagePreview = document.getElementById("currentImagePreview")
  const imageThumbnails = document.querySelectorAll(".image-thumbnail")
  const prevImageBtn = document.querySelector(".prev-image")
  const nextImageBtn = document.querySelector(".next-image")
  const modalImagePreview = document.getElementById("modalImagePreview")
  const modalSetMainBtn = document.querySelector(".modal-set-main")
  const modalRemoveImageBtn = document.querySelector(".modal-remove-image")

  // Declare $ if not already declared
  const $ = window.jQuery

  // Declare Swal if not already declared
  const Swal = window.Swal

  // Declare bootstrap if not already declared
  const bootstrap = window.bootstrap

  // Declare Cropper if not already declared
  const Cropper = window.Cropper

  // DataTable for variants
  let variantTable
  if ($.fn.DataTable && document.getElementById("variantTable")) {
    variantTable = $("#variantTable").DataTable({
      responsive: true,
      columnDefs: [
        { orderable: false, targets: -1 }, // Disable sorting on action column
      ],
    })
  }

  // Track current state
  let currentStep = 1
  let selectedSize = null

  // Initialize existing sizes
  document.querySelectorAll(".variant-summary-row").forEach((row) => {
    existingSizes.add(row.dataset.size)
  })

  // ===== FORM NAVIGATION =====

  // Show a specific step
  function showStep(stepNumber) {
    // Hide all steps
    formStepContents.forEach((content) => {
      content.classList.add("d-none")
    })

    // Show the selected step
    document.getElementById(`step${stepNumber}`).classList.remove("d-none")

    // Update step indicators
    formSteps.forEach((step) => {
      const stepNum = Number.parseInt(step.dataset.step)
      step.classList.remove("active", "completed")

      if (stepNum === stepNumber) {
        step.classList.add("active")
      } else if (stepNum < stepNumber) {
        step.classList.add("completed")
      }
    })

    currentStep = stepNumber

    // Scroll to top
    window.scrollTo({
      top: document.querySelector(".form-steps-container").offsetTop - 20,
      behavior: "smooth",
    })
  }

  // Validate current step
  function validateStep(stepNumber) {
    const stepContent = document.getElementById(`step${stepNumber}`)
    const requiredFields = stepContent.querySelectorAll("[required]")
    let isValid = true

    // Reset validation state
    requiredFields.forEach((field) => {
      field.classList.remove("is-invalid")
    })

    // Check required fields
    requiredFields.forEach((field) => {
      if (!field.value.trim()) {
        field.classList.add("is-invalid")
        isValid = false
      }
    })

    // Step-specific validation
    if (stepNumber === 3) {
      // Validate variants exist
      if (document.querySelectorAll(".variant-summary-row").length === 0) {
        showToast("At least one variant is required", "error")
        isValid = false
      }
    }

    return isValid
  }

  // Next step button handler
  nextStepButtons.forEach((button) => {
    button.addEventListener("click", () => {
      if (validateStep(currentStep)) {
        showStep(currentStep + 1)
      } else {
        showToast("Please fill in all required fields", "error")
      }
    })
  })

  // Previous step button handler
  prevStepButtons.forEach((button) => {
    button.addEventListener("click", () => {
      showStep(currentStep - 1)
    })
  })

  // Step indicator click handler
  formSteps.forEach((step) => {
    step.addEventListener("click", function () {
      const targetStep = Number.parseInt(this.dataset.step)

      // Only allow going to previous steps or completed steps
      if (targetStep < currentStep || this.classList.contains("completed")) {
        showStep(targetStep)
      }
    })
  })

  // ===== VARIANT MANAGEMENT =====

  // Show variant form for adding a new variant
  function showVariantForm(size) {
    selectedSize = size
    variantSizeSelect.value = size
    variantPrice.value = ""
    variantQuantity.value = ""
    variantFormContainer.classList.remove("d-none")
    variantPrice.focus()
  }

  // Size button click handler
  sizeButtons.forEach((button) => {
    button.addEventListener("click", function () {
      if (!this.classList.contains("disabled")) {
        const size = this.dataset.size
        showVariantForm(size)
      }
    })
  })

  // Save variant button handler
  if (saveVariantBtn) {
    saveVariantBtn.addEventListener("click", () => {
      // Validate inputs
      if (!variantSizeSelect.value) {
        variantSizeSelect.classList.add("is-invalid")
        return
      }

      const price = Number.parseFloat(variantPrice.value)
      if (isNaN(price) || price < 100) {
        variantPrice.classList.add("is-invalid")
        return
      }

      const quantity = Number.parseInt(variantQuantity.value)
      if (isNaN(quantity) || quantity < 0) {
        variantQuantity.classList.add("is-invalid")
        return
      }

      // Get the next variant index
      const variantIndex = document.querySelectorAll(".variant-item").length

      // Create hidden inputs for the new variant
      const variantItem = document.createElement("div")
      variantItem.className = "variant-item"
      variantItem.id = `variant-${variantIndex}`
      variantItem.innerHTML = `
        <input type="hidden" name="variants[${variantIndex}][size]" value="${variantSizeSelect.value}">
        <input type="hidden" name="variants[${variantIndex}][varientPrice]" value="${price}">
        <input type="hidden" name="variants[${variantIndex}][varientquatity]" value="${quantity}">
      `

      variantsContainer.appendChild(variantItem)

      // Add to existing sizes
      existingSizes.add(variantSizeSelect.value)

      // Update size buttons
      updateSizeButtons()

      // Update variant summary table
      updateVariantSummaryTable()

      // Hide the form
      variantFormContainer.classList.add("d-none")

      // Show success message
      showToast("Variant added successfully", "success")
    })
  }

  // Cancel variant button handler
  if (cancelVariantBtn) {
    cancelVariantBtn.addEventListener("click", () => {
      variantFormContainer.classList.add("d-none")
    })
  }

  // Update size buttons based on existing variants
  function updateSizeButtons() {
    sizeButtons.forEach((button) => {
      const size = button.dataset.size
      if (existingSizes.has(size)) {
        button.classList.add("disabled")
      } else {
        button.classList.remove("disabled")
      }
    })
  }

  // Update variant summary table
  function updateVariantSummaryTable() {
    const tableBody = document.querySelector("#currentVariantsTable tbody")
    if (!tableBody) return

    tableBody.innerHTML = ""

    // Get all variant items
    const variantItems = document.querySelectorAll(".variant-item")

    if (variantItems.length === 0) {
      tableBody.innerHTML = `
        <tr>
          <td colspan="6" class="text-center">No variants available</td>
        </tr>
      `
      return
    }

    // Add each variant to the table
    variantItems.forEach((item, index) => {
      const size = item.querySelector("input[name$='[size]']").value
      const price = Number.parseFloat(item.querySelector("input[name$='[varientPrice]']").value)
      const quantity = Number.parseInt(item.querySelector("input[name$='[varientquatity]']").value)

      // Determine stock status
      let stockStatus, stockBadge
      if (quantity <= 0) {
        stockStatus = "out-of-stock"
        stockBadge = '<span class="badge bg-danger">Out of Stock</span>'
      } else if (quantity <= 10) {
        stockStatus = "low-stock"
        stockBadge = '<span class="badge bg-warning text-dark">Low Stock</span>'
      } else {
        stockStatus = "in-stock"
        stockBadge = '<span class="badge bg-success">In Stock</span>'
      }

      const row = document.createElement("tr")
      row.className = "variant-summary-row"
      row.dataset.variantIndex = index
      row.dataset.size = size

      row.innerHTML = `
        <td class="variant-size-cell">
          <span class="variant-size-display">${size}</span>
          <div class="variant-size-edit d-none">
            <select class="form-select form-select-sm variant-size-select">
              <option value="${size}" selected>${size}</option>
              ${["S", "M", "L", "XL", "XXL"]
                .filter((s) => s !== size && !existingSizes.has(s))
                .map((s) => `<option value="${s}">${s}</option>`)
                .join("")}
            </select>
          </div>
        </td>
<td class="variant-price-cell">
  <span class="variant-price-display">₹${price.toFixed(2)}</span>
  <div class="variant-price-edit d-none">
    <input type="number" class="form-control form-control-sm variant-price-input" 
           value="${price}" min="100" max="500000" step="0.01">
  </div>
</td>

        <td>₹${price.toFixed(2)}</td>
        <td class="variant-stock-cell">
          <span class="variant-stock-display">${quantity}</span>
          <div class="variant-stock-edit d-none">
            <input type="number" class="form-control form-control-sm variant-stock-input" 
                   value="${quantity}" min="0">
          </div>
        </td>
        <td>${stockBadge}</td>
        <td>
          <div class="btn-group btn-group-sm">
            <button type="button" class="btn btn-outline-primary edit-variant" data-index="${index}">
              <i class="fas fa-edit"></i> Edit
            </button>
            <button type="button" class="btn btn-outline-success save-variant d-none" data-index="${index}">
              <i class="fas fa-check"></i> Save
            </button>
          </div>
        </td>
      `

      tableBody.appendChild(row)
    })

    // Add edit variant handlers
    document.querySelectorAll(".edit-variant").forEach((button) => {
      button.addEventListener("click", handleEditVariant)
    })
  }

  // Edit variant handler - Fixed to properly show edit fields
  function handleEditVariant() {
    const row = this.closest("tr")
    if (!row) return

    // Show edit fields
    const priceDisplay = row.querySelector(".variant-price-display")
    const priceEdit = row.querySelector(".variant-price-edit")
    const stockDisplay = row.querySelector(".variant-stock-display")
    const stockEdit = row.querySelector(".variant-stock-edit")

    if (priceDisplay) priceDisplay.classList.add("d-none")
    if (priceEdit) priceEdit.classList.remove("d-none")
    if (stockDisplay) stockDisplay.classList.add("d-none")
    if (stockEdit) stockEdit.classList.remove("d-none")

    // Hide edit button, show save button
    this.classList.add("d-none")
    const saveBtn = row.querySelector(".save-variant")
    if (saveBtn) saveBtn.classList.remove("d-none")

    // Add save variant handler if not already added
    if (saveBtn && !saveBtn._hasClickHandler) {
      saveBtn.addEventListener("click", handleSaveVariant)
      saveBtn._hasClickHandler = true
    }
  }

  // Save variant handler - Fixed to properly update variant data
  function handleSaveVariant() {
    const index = this.dataset.index
    const row = this.closest("tr")

    // Get updated values
    const priceInput = row.querySelector(".variant-price-input")
    const stockInput = row.querySelector(".variant-stock-input")

    const price = Number.parseFloat(priceInput.value)
    const quantity = Number.parseInt(stockInput.value)

    // Validate inputs
    let isValid = true

    if (isNaN(price) || price < 100) {
      priceInput.classList.add("is-invalid")
      isValid = false
    } else {
      priceInput.classList.remove("is-invalid")
    }

    if (isNaN(quantity) || quantity < 0) {
      stockInput.classList.add("is-invalid")
      isValid = false
    } else {
      stockInput.classList.remove("is-invalid")
    }

    if (!isValid) {
      return
    }

    // Update hidden inputs
    const variantItem = document.getElementById(`variant-${index}`)
    if (variantItem) {
      variantItem.querySelector("input[name$='[varientPrice]']").value = price
      variantItem.querySelector("input[name$='[varientquatity]']").value = quantity
    }

    // Update display values
    row.querySelector(".variant-price-display").textContent = `₹${price.toFixed(2)}`
    row.querySelector(".variant-stock-display").textContent = quantity

    // Update stock status
    let stockBadge
    if (quantity <= 0) {
      stockBadge = '<span class="badge bg-danger">Out of Stock</span>'
    } else if (quantity <= 10) {
      stockBadge = '<span class="badge bg-warning text-dark">Low Stock</span>'
    } else {
      stockBadge = '<span class="badge bg-success">In Stock</span>'
    }
    row.querySelector("td:nth-child(5)").innerHTML = stockBadge

    // Hide edit fields, show display values
    row.querySelector(".variant-price-display").classList.remove("d-none")
    row.querySelector(".variant-price-edit").classList.add("d-none")
    row.querySelector(".variant-stock-display").classList.remove("d-none")
    row.querySelector(".variant-stock-edit").classList.add("d-none")

    // Hide save button, show edit button
    this.classList.add("d-none")
    row.querySelector(".edit-variant").classList.remove("d-none")

    // Show success message
    showToast("Variant updated successfully", "success")

    // Highlight the row briefly
    row.classList.add("row-highlight")
    setTimeout(() => {
      row.classList.remove("row-highlight")
    }, 2000)
  }

  // Update variant sizes button handler
  if (updateVariantSizesBtn) {
    updateVariantSizesBtn.addEventListener("click", () => {
      // Get all modified rows
      const modifiedRows = document.querySelectorAll(".variant-summary-row[data-modified='true']")

      if (modifiedRows.length === 0) {
        showToast("No changes to save", "info")
        return
      }

      // Update each modified row
      modifiedRows.forEach((row) => {
        const index = row.dataset.variantIndex
        const newSize = row.querySelector(".variant-size-display").textContent

        // Update hidden input
        const variantItem = document.getElementById(`variant-${index}`)
        if (variantItem) {
          variantItem.querySelector("input[name$='[size]']").value = newSize
        }

        // Remove modified marker
        row.classList.remove("table-warning")
        row.removeAttribute("data-modified")
      })

      showToast("Variant sizes updated successfully", "success")
    })
  }

  // ===== IMAGE MANAGEMENT =====

  // Initialize image uploads - Fixed to properly show image previews
  imageUploads.forEach((upload) => {
    const previewId = upload.dataset.preview
    const previewContainer = document.getElementById(previewId)
    if (!previewContainer) return

    const previewImg = previewContainer.querySelector(".preview-img")
    const clearBtn = previewContainer.querySelector(".btn-clear-upload")
    const placeholder = previewContainer.querySelector(".upload-placeholder")

    upload.addEventListener("change", function () {
      if (this.files && this.files[0]) {
        const file = this.files[0]

        // Validate file type
        if (!file.type.startsWith("image/")) {
          showToast("Please select a valid image file", "error")
          this.value = ""
          return
        }

        // Validate file size (max 5MB)
        if (file.size > 5 * 1024 * 1024) {
          showToast("Image size should be less than 5MB", "error")
          this.value = ""
          return
        }

        const reader = new FileReader()
        reader.onload = (e) => {
          previewImg.src = e.target.result
          previewImg.classList.remove("d-none")
          clearBtn.classList.remove("d-none")
          placeholder.classList.add("d-none")

          // Store the current file for potential cropping
          upload.dataset.currentFile = e.target.result

          // Show crop modal option
          showCropModal(e.target.result, upload)
        }
        reader.readAsDataURL(file)
      }
    })

    // Clear button handler
    if (clearBtn) {
      clearBtn.addEventListener("click", (e) => {
        e.stopPropagation()
        upload.value = ""
        previewImg.classList.add("d-none")
        clearBtn.classList.add("d-none")
        placeholder.classList.remove("d-none")
        delete upload.dataset.currentFile
      })
    }
  })

  // Show crop modal
  function showCropModal(imageSrc, fileInput) {
    const cropModal = document.getElementById("cropModal")
    if (!cropModal) return

    const imageToCrop = document.getElementById("imageToCrop")
    imageToCrop.src = imageSrc

    // Store reference to the file input
    cropModal.dataset.fileInput = fileInput.id

    // Show the modal
    const modal = new bootstrap.Modal(cropModal)
    modal.show()
  }

  // Image gallery navigation
  if (imageThumbnails.length > 0) {
    // Thumbnail click handler - Fixed to properly show images
    imageThumbnails.forEach((thumbnail, index) => {
      thumbnail.addEventListener("click", () => {
        // Update active thumbnail
        imageThumbnails.forEach((thumb) => thumb.classList.remove("active"))
        thumbnail.classList.add("active")

        // Get the image URL from the thumbnail's img element
        const thumbnailImg = thumbnail.querySelector("img")
        if (thumbnailImg && thumbnailImg.src) {
          // Update preview image with the thumbnail's image source
          currentImagePreview.src = thumbnailImg.src
          currentImageIndex = index

          // Update counter
          const currentIndexEl = document.getElementById("currentImageIndex")
          if (currentIndexEl) {
            currentIndexEl.textContent = index + 1
          }

          // Update main image badge
          const mainImageBadge = document.querySelector(".main-image-badge")
          if (mainImageBadge) {
            if (thumbnail.dataset.isMain === "true") {
              mainImageBadge.classList.remove("d-none")
            } else {
              mainImageBadge.classList.add("d-none")
            }
          }

          // Update navigation buttons
          updateImageNavButtons()
        }
      })
    })

    // Previous image button handler
    if (prevImageBtn) {
      prevImageBtn.addEventListener("click", () => {
        if (currentImageIndex > 0) {
          currentImageIndex--
          imageThumbnails[currentImageIndex].click()
        }
      })
    }

    // Next image button handler
    if (nextImageBtn) {
      nextImageBtn.addEventListener("click", () => {
        if (currentImageIndex < imageThumbnails.length - 1) {
          currentImageIndex++
          imageThumbnails[currentImageIndex].click()
        }
      })
    }

    // Update navigation buttons state
    function updateImageNavButtons() {
      if (prevImageBtn) {
        prevImageBtn.disabled = currentImageIndex === 0
      }
      if (nextImageBtn) {
        nextImageBtn.disabled = currentImageIndex === imageThumbnails.length - 1
      }
    }

    // Initialize image preview
    if (imageThumbnails[0]) {
      imageThumbnails[0].click()
    }

    // Image preview modal
    const expandImageBtn = document.querySelector(".expand-image")
    if (expandImageBtn && modalImagePreview) {
      expandImageBtn.addEventListener("click", () => {
        modalImagePreview.src = currentImagePreview.src

        // Set data attributes for modal actions
        if (modalSetMainBtn) {
          modalSetMainBtn.dataset.index = currentImageIndex
        }
        if (modalRemoveImageBtn) {
          modalRemoveImageBtn.dataset.index = currentImageIndex
        }

        // Update set as main button state
        if (
          modalSetMainBtn &&
          imageThumbnails[currentImageIndex] &&
          imageThumbnails[currentImageIndex].dataset.isMain === "true"
        ) {
          modalSetMainBtn.disabled = true
        } else if (modalSetMainBtn) {
          modalSetMainBtn.disabled = false
        }
      })
    }

    // Set as main image handler
    document.querySelectorAll(".set-as-main").forEach((btn) => {
      btn.addEventListener("click", function () {
        const index = Number.parseInt(this.dataset.imageIndex)
        setMainImage(index)
      })
    })

    // Modal set as main image handler
    if (modalSetMainBtn) {
      modalSetMainBtn.addEventListener("click", function () {
        const index = Number.parseInt(this.dataset.index)
        setMainImage(index)
        // Close modal
        const modal = bootstrap.Modal.getInstance(document.getElementById("imagePreviewModal"))
        if (modal) {
          modal.hide()
        }
      })
    }

    // Set main image function
    function setMainImage(index) {
      // Update hidden inputs
      const imageOperations = document.getElementById("imageOperations")
      if (imageOperations) {
        const existingMainInput = imageOperations.querySelector('input[name$="[isMain]"][value="true"]')
        if (existingMainInput) {
          existingMainInput.value = "false"
        }

        const newMainInput = imageOperations.querySelector(`input[name="existingImages[${index}][isMain]"]`)
        if (newMainInput) {
          newMainInput.value = "true"
        }
      }

      // Update thumbnails
      imageThumbnails.forEach((thumb, i) => {
        const badge = thumb.querySelector(".thumbnail-badge")
        if (i === index) {
          thumb.dataset.isMain = "true"
          thumb.classList.add("is-main")
          if (!badge) {
            const newBadge = document.createElement("div")
            newBadge.className = "thumbnail-badge"
            newBadge.textContent = "Main"
            thumb.appendChild(newBadge)
          }
        } else {
          thumb.dataset.isMain = "false"
          thumb.classList.remove("is-main")
          if (badge) {
            badge.remove()
          }
        }
      })

      // Update main image badge
      const mainImageBadge = document.querySelector(".main-image-badge")
      if (mainImageBadge) {
        if (currentImageIndex === index) {
          mainImageBadge.classList.remove("d-none")
        } else if (currentImageIndex !== index) {
          mainImageBadge.classList.add("d-none")
        }
      }

      showToast("Main image updated successfully", "success")
    }

    // Remove image handler
    document.querySelectorAll(".remove-image").forEach((btn) => {
      btn.addEventListener("click", function () {
        const index = Number.parseInt(this.dataset.imageIndex)
        removeImage(index)
      })
    })

    // Modal remove image handler
    if (modalRemoveImageBtn) {
      modalRemoveImageBtn.addEventListener("click", function () {
        const index = Number.parseInt(this.dataset.index)
        removeImage(index)
        // Close modal
        const modal = bootstrap.Modal.getInstance(document.getElementById("imagePreviewModal"))
        if (modal) {
          modal.hide()
        }
      })
    }

    // Remove image function
    function removeImage(index) {
      // Confirm deletion
      if (!confirm("Are you sure you want to remove this image?")) {
        return
      }

      // Check if it's the only image
      if (imageThumbnails.length <= 1) {
        showToast("Cannot remove the only product image. Please upload a replacement first.", "error")
        return
      }

      // Check if it's the main image
      const isMain = imageThumbnails[index].dataset.isMain === "true"
      if (isMain && imageThumbnails.length > 1) {
        // Set another image as main
        const newMainIndex = index === 0 ? 1 : 0
        setMainImage(newMainIndex)
      }

      // Add to removed images
      const imageUrl = imageThumbnails[index].dataset.url
      const imageOperations = document.getElementById("imageOperations")
      if (imageOperations && imageUrl) {
        const removeInput = document.createElement("input")
        removeInput.type = "hidden"
        removeInput.name = "removeImages[]"
        removeInput.value = imageUrl
        imageOperations.appendChild(removeInput)
      }

      // Get public_id if available
      const publicIdInput = document.querySelector(`input[name="existingImages[${index}][public_id]"]`)
      if (publicIdInput && imageOperations) {
        const removePublicIdInput = document.createElement("input")
        removePublicIdInput.type = "hidden"
        removePublicIdInput.name = "removePublicIds[]"
        removePublicIdInput.value = publicIdInput.value
        imageOperations.appendChild(removePublicIdInput)
      }

      // Remove thumbnail
      imageThumbnails[index].remove()

      // Update total count
      const totalImagesEl = document.getElementById("totalImages")
      if (totalImagesEl) {
        totalImagesEl.textContent = imageThumbnails.length - 1
      }

      // Reset current index if needed
      if (currentImageIndex >= imageThumbnails.length - 1) {
        currentImageIndex = imageThumbnails.length - 2
      }

      // Update current image
      if (imageThumbnails[currentImageIndex]) {
        imageThumbnails[currentImageIndex].click()
      }

      showToast("Image removed successfully", "warning")
    }
  }

  // ===== FORM SUBMISSION =====

  // Form submit handler - Fixed to redirect to product management page
  if (editProductForm) {
    editProductForm.addEventListener("submit", function (e) {
      // Validate all steps
      let allValid = true
      for (let i = 1; i <= 4; i++) {
        if (!validateStep(i)) {
          allValid = false
          showStep(i)
          break
        }
      }

      if (!allValid) {
        e.preventDefault()
        showToast("Please fix the errors before submitting", "error")
      } else {
        // Show loading state
        const submitBtn = this.querySelector("button[type='submit']")
        submitBtn.disabled = true
        submitBtn.innerHTML =
          '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Updating...'

        // Modify the form action to include the redirect parameter
        const currentAction = this.getAttribute("action")
        if (!currentAction.includes("redirect=")) {
          this.setAttribute("action", `${currentAction}?redirect=/admin/productManagement`)
        }
      }
    })
  }

  // ===== HELPER FUNCTIONS =====

  // Show toast notification
  function showToast(message, type = "success") {
    // Map error type to danger for Bootstrap
    const bsType = type === "error" ? "danger" : type

    // Create toast container if it doesn't exist
    let toastContainer = document.querySelector(".toast-container")
    if (!toastContainer) {
      toastContainer = document.createElement("div")
      toastContainer.className = "toast-container position-fixed top-0 end-0 p-3"
      document.body.appendChild(toastContainer)
    }

    // Create toast element
    const toastEl = document.createElement("div")
    toastEl.className = `toast align-items-center text-white bg-${bsType} border-0`
    toastEl.setAttribute("role", "alert")
    toastEl.setAttribute("aria-live", "assertive")
    toastEl.setAttribute("aria-atomic", "true")

    // Create toast content
    toastEl.innerHTML = `
      <div class="d-flex">
        <div class="toast-body">
          <i class="fas fa-${type === "success" ? "check-circle" : type === "error" ? "exclamation-circle" : type === "warning" ? "exclamation-triangle" : "info-circle"} me-2"></i>
          ${message}
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
    `

    // Add toast to container
    toastContainer.appendChild(toastEl)

    // Initialize and show toast
    if (typeof bootstrap !== "undefined" && bootstrap.Toast) {
      const toast = new bootstrap.Toast(toastEl, { delay: 3000 })
      toast.show()
    } else {
      // Fallback if Bootstrap Toast is not available
      toastEl.style.display = "block"
      setTimeout(() => {
        toastEl.style.display = "none"
        toastEl.remove()
      }, 3000)
    }

    // Remove toast after it's hidden
    toastEl.addEventListener("hidden.bs.toast", () => {
      toastEl.remove()
    })
  }

  // Initialize cropper if needed
  if (typeof Cropper !== "undefined" && document.getElementById("imageToCrop")) {
    let cropper

    // Initialize cropper when modal is shown
    document.getElementById("cropModal").addEventListener("shown.bs.modal", () => {
      cropper = new Cropper(document.getElementById("imageToCrop"), {
        aspectRatio: 1,
        viewMode: 1,
        autoCropArea: 0.9,
        responsive: true,
        zoomable: true,
        scalable: true,
        rotatable: true,
      })
    })

    // Destroy cropper when modal is hidden
    document.getElementById("cropModal").addEventListener("hidden.bs.modal", () => {
      if (cropper) {
        cropper.destroy()
        cropper = null
      }
    })

    // Crop image button handler
    document.getElementById("cropImage").addEventListener("click", () => {
      if (!cropper) return

      const canvas = cropper.getCroppedCanvas({
        width: 1000,
        height: 1000,
        fillColor: "#fff",
        imageSmoothingEnabled: true,
        imageSmoothingQuality: "high",
      })

      if (canvas) {
        // Convert canvas to blob
        canvas.toBlob(
          (blob) => {
            // Get the file input that triggered the crop
            const cropModal = document.getElementById("cropModal")
            const fileInputId = cropModal.dataset.fileInput
            const fileInput = document.getElementById(fileInputId)

            if (fileInput) {
              // Create a new File object
              const file = new File([blob], "cropped-image.webp", { type: "image/webp" })

              // Create a FileList-like object
              const dataTransfer = new DataTransfer()
              dataTransfer.items.add(file)

              // Set the file input's files
              fileInput.files = dataTransfer.files

              // Trigger change event to update preview
              const event = new Event("change", { bubbles: true })
              fileInput.dispatchEvent(event)
            }

            // Hide modal
            const modal = bootstrap.Modal.getInstance(document.getElementById("cropModal"))
            if (modal) {
              modal.hide()
            }

            showToast("Image cropped successfully", "success")
          },
          "image/webp",
          0.9,
        )
      }
    })

    // Crop controls
    document.getElementById("zoomIn").addEventListener("click", () => {
      if (cropper) cropper.zoom(0.1)
    })

    document.getElementById("zoomOut").addEventListener("click", () => {
      if (cropper) cropper.zoom(-0.1)
    })

    document.getElementById("rotateLeft").addEventListener("click", () => {
      if (cropper) cropper.rotate(-45)
    })

    document.getElementById("rotateRight").addEventListener("click", () => {
      if (cropper) cropper.rotate(45)
    })

    document.getElementById("flipHorizontal").addEventListener("click", () => {
      if (cropper) cropper.scaleX(-cropper.getData().scaleX || -1)
    })

    document.getElementById("flipVertical").addEventListener("click", () => {
      if (cropper) cropper.scaleY(-cropper.getData().scaleY || -1)
    })

    // Aspect ratio buttons
    document.querySelectorAll(".crop-aspect-btn").forEach((btn) => {
      btn.addEventListener("click", () => {
        document.querySelectorAll(".crop-aspect-btn").forEach((b) => b.classList.remove("active"))
        btn.classList.add("active")

        const ratio = btn.dataset.ratio
        if (cropper) {
          cropper.setAspectRatio(ratio === "NaN" ? Number.NaN : eval(ratio))
        }
      })
    })
  }

  // Initialize the page
  updateSizeButtons()
  showStep(1)

  // Initialize Select2 if available
  if (typeof $ !== "undefined" && $.fn && $.fn.select2 && document.getElementById("productCategory")) {
    $("#productCategory").select2({
      theme: "bootstrap-5",
      placeholder: "Select a category",
    })
  }

  // Add event listeners to all edit variant buttons when the page loads
  document.querySelectorAll(".edit-variant").forEach((button) => {
    button.addEventListener("click", handleEditVariant)
  })
})
// document.querySelector("form").addEventListener("submit", function (e) {
//     const offerInput = document.getElementById("productOffer");
//     const offerValue = parseFloat(offerInput.value);

//     if (isNaN(offerValue) || offerValue < 0 || offerValue > 100) {
//       e.preventDefault(); // stop form from submitting
//       alert("Please enter a valid discount between 0% and 100%.");
//       offerInput.focus();
//     }
//   });
function validateDiscount(input) {
    // Get the input value and parse it as a float
    const value = parseFloat(input.value);
    const errorElement = document.getElementById('discountError');
    
    // Check if the value is a number and within the valid range
    if (isNaN(value)) {
        input.setCustomValidity('Please enter a valid number');
        errorElement.textContent = 'Please enter a valid number.';
        input.classList.add('is-invalid');
        return false;
    } else if (value < 0) {
        input.setCustomValidity('Discount cannot be negative');
        errorElement.textContent = 'Discount cannot be negative.';
        input.classList.add('is-invalid');
        return false;
    } else if (value > 100) {
        input.setCustomValidity('Discount cannot exceed 100%');
        errorElement.textContent = 'Discount cannot exceed 100%.';
        input.classList.add('is-invalid');
        return false;
    } else {
        // Valid input
        input.setCustomValidity('');
        input.classList.remove('is-invalid');
        input.classList.add('is-valid');
        return true;
    }
}

// Add form submission validation
document.querySelector('form').addEventListener('submit', function(event) {
    const discountInput = document.getElementById('productOffer');
    if (!validateDiscount(discountInput)) {
        event.preventDefault();
    }
});

// Validate on page load for pre-filled values
document.addEventListener('DOMContentLoaded', function() {
    const discountInput = document.getElementById('productOffer');
    validateDiscount(discountInput);
});
function validateVariantPrice(input) {
    // Get the input value and parse it as a float
    const value = parseFloat(input.value);
    
    // Check if the value is a number and within the valid range
    if (isNaN(value)) {
        input.setCustomValidity('Please enter a valid price');
        input.classList.add('is-invalid');
        return false;
    } else if (value < 100) {
        input.setCustomValidity('Price cannot be less than ₹100');
        input.classList.add('is-invalid');
        return false;
    } else if (value > 500000) {
        input.setCustomValidity('Price cannot exceed ₹5,00,000 (5 lakhs)');
        input.classList.add('is-invalid');
        return false;
    } else {
        // Valid input
        input.setCustomValidity('');
        input.classList.remove('is-invalid');
        return true;
    }
}

// Add event listeners to all variant price inputs
document.addEventListener('DOMContentLoaded', function() {
    const priceInputs = document.querySelectorAll('.variant-price-input');
    priceInputs.forEach(input => {
        // Validate on initial load
        validateVariantPrice(input);
        
        // Add blur event to format the displayed price when editing is complete
        input.addEventListener('blur', function() {
            if (validateVariantPrice(this)) {
                const priceCell = this.closest('.variant-price-cell');
                const priceDisplay = priceCell.querySelector('.variant-price-display');
                priceDisplay.textContent = '₹' + parseFloat(this.value).toFixed(2);
                
                // Hide edit mode
                this.closest('.variant-price-edit').classList.add('d-none');
                priceDisplay.classList.remove('d-none');
            }
        });
    });
});

// Function to toggle edit mode for variant prices
function togglePriceEdit(cell) {
    const priceDisplay = cell.querySelector('.variant-price-display');
    const priceEdit = cell.querySelector('.variant-price-edit');
    
    priceDisplay.classList.add('d-none');
    priceEdit.classList.remove('d-none');
    priceEdit.querySelector('input').focus();
}
    </script>
</body>
</html>
