<!DOCTYPE html>
<html lang="en" data-theme="light">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ELITE WEAR - Order Management</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.12/dist/sweetalert2.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="/adminStyle/ordermanagment.css" />
  </head>
  <body>
    <button class="mobile-toggle" id="mobileToggle">
      <i class="fas fa-bars"></i>
    </button>

    <div class="dashboard-container">
      <%- include("../partials/admin/header") %>

      <div class="main-content">
        <div class="content-header">
          <div class="header-container">
            <div>
              <h1 class="page-title">Order Management</h1>
              <ul class="breadcrumb">
                <li class="breadcrumb-item">
                  <a href="/admin/dashboard">Dashboard</a>
                </li>
                <li class="breadcrumb-separator">
                  <i class="fas fa-chevron-right"></i>
                </li>
                <li class="breadcrumb-item">Orders</li>
              </ul>
            </div>

            <div class="d-flex align-items-center">
              <button class="theme-toggle" id="themeToggle">
                <i class="fas fa-moon"></i>
              </button>
              <div class="user-profile">
                <div class="profile-info">
                  <p class="user-name">Admin</p>
                  <p class="user-role">Administrator</p>
                </div>
                <div class="profile-image">
                  <img
                    src="/placeholder.svg?height=50&width=50&query=admin"
                    alt="Admin Profile"
                  />
                </div>
                <div class="dropdown-icon">
                  <i class="fas fa-chevron-down"></i>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Stats Cards -->
        <div class="stats-container">
          <div class="stat-card">
            <div class="stat-header">
              <h3 class="stat-title">Pending Orders</h3>
              <div class="stat-icon pending">
                <i class="fas fa-clock"></i>
              </div>
            </div>
            <% if (typeof stats !== 'undefined') { %>
              <h2 class="stat-value"><%= stats.pendingCount %></h2>
              <div class="stat-change <%= stats.pendingChange >= 0 ? 'positive' : 'negative' %>">
                <i class="fas <%= stats.pendingChange >= 0 ? 'fa-arrow-up' : 'fa-arrow-down' %>"></i>
                <span><%= Math.abs(stats.pendingChange) %>%</span> from last month
              </div>
            <% } else { %>
              <h2 class="stat-value" id="pendingCount">0</h2>
              <div class="stat-change positive">
                <i class="fas fa-arrow-up"></i>
                <span id="pendingChange">0%</span> from last month
              </div>
            <% } %>
          </div>

          <div class="stat-card">
            <div class="stat-header">
              <h3 class="stat-title">Processing Orders</h3>
              <div class="stat-icon processing">
                <i class="fas fa-spinner"></i>
              </div>
            </div>
            <% if (typeof stats !== 'undefined') { %>
              <h2 class="stat-value"><%= stats.processingCount %></h2>
              <div class="stat-change <%= stats.processingChange >= 0 ? 'positive' : 'negative' %>">
                <i class="fas <%= stats.processingChange >= 0 ? 'fa-arrow-up' : 'fa-arrow-down' %>"></i>
                <span><%= Math.abs(stats.processingChange) %>%</span> from last month
              </div>
            <% } else { %>
              <h2 class="stat-value" id="processingCount">0</h2>
              <div class="stat-change positive">
                <i class="fas fa-arrow-up"></i>
                <span id="processingChange">0%</span> from last month
              </div>
            <% } %>
          </div>

          <div class="stat-card">
            <div class="stat-header">
              <h3 class="stat-title">Delivered Orders</h3>
              <div class="stat-icon delivered">
                <i class="fas fa-check-circle"></i>
              </div>
            </div>
            <% if (typeof stats !== 'undefined') { %>
              <h2 class="stat-value"><%= stats.deliveredCount %></h2>
              <div class="stat-change <%= stats.deliveredChange >= 0 ? 'positive' : 'negative' %>">
                <i class="fas <%= stats.deliveredChange >= 0 ? 'fa-arrow-up' : 'fa-arrow-down' %>"></i>
                <span><%= Math.abs(stats.deliveredChange) %>%</span> from last month
              </div>
            <% } else { %>
              <h2 class="stat-value" id="deliveredCount">0</h2>
              <div class="stat-change positive">
                <i class="fas fa-arrow-up"></i>
                <span id="deliveredChange">0%</span> from last month
              </div>
            <% } %>
          </div>

          <div class="stat-card">
            <div class="stat-header">
              <h3 class="stat-title">Total Revenue</h3>
              <div class="stat-icon delivered">
                <i class="fas fa-rupee-sign"></i>
              </div>
            </div>
            <% if (typeof stats !== 'undefined') { %>
              <h2 class="stat-value">
                <span class="currency">₹</span><%= stats.totalRevenue.toFixed(2) %>
              </h2>
              <div class="stat-change <%= stats.revenueChange >= 0 ? 'positive' : 'negative' %>">
                <i class="fas <%= stats.revenueChange >= 0 ? 'fa-arrow-up' : 'fa-arrow-down' %>"></i>
                <span><%= Math.abs(stats.revenueChange) %>%</span> from last month
              </div>
            <% } else { %>
              <h2 class="stat-value">
                <span class="currency">₹</span><span id="revenueCount">0</span>
              </h2>
              <div class="stat-change positive">
                <i class="fas fa-arrow-up"></i>
                <span id="revenueChange">0%</span> from last month
              </div>
            <% } %>
          </div>
        </div>

        <!-- Filters -->
        <div class="filters-container">
          <div class="filters-header">
            <h3 class="filters-title"><i class="fas fa-filter"></i> Filters</h3>
            <div class="filters-actions">
              <button class="filter-btn" id="resetFilters">
                <i class="fas fa-redo"></i>
                <span>Reset</span>
              </button>
              <button class="filter-btn export-btn" id="exportOrders">
                <i class="fas fa-file-export"></i>
                <span>Export</span>
              </button>
            </div>
          </div>
          <div class="filters-body">
            <div class="filter-group">
              <label class="filter-label">Status</label>
              <select class="filter-select" id="statusFilter">
                <option value="All" <%= currentStatus === 'All' ? 'selected' : '' %>>All Statuses</option>
                <option value="Pending" <%= currentStatus === 'Pending' ? 'selected' : '' %>>Pending</option>
                <option value="Processing" <%= currentStatus === 'Processing' ? 'selected' : '' %>>Processing</option>
                <option value="Confirmed" <%= currentStatus === 'Confirmed' ? 'selected' : '' %>>Confirmed</option>
                <option value="Shipped" <%= currentStatus === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                <option value="Delivered" <%= currentStatus === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                <option value="Cancelled" <%= currentStatus === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                <option value="Return Requested" <%= currentStatus === 'Return Requested' ? 'selected' : '' %>>Return Requested</option>
                <option value="Return Approved" <%= currentStatus === 'Return Approved' ? 'selected' : '' %>>Return Approved</option>
                <option value="Returned" <%= currentStatus === 'Returned' ? 'selected' : '' %>>Returned</option>
                <option value="Return Rejected" <%= currentStatus === 'Return Rejected' ? 'selected' : '' %>>Return Rejected</option>
                <option value="Partially Cancelled" <%= currentStatus === 'Partially Cancelled' ? 'selected' : '' %>>Partially Cancelled</option>
                <option value="Partially Returned" <%= currentStatus === 'Partially Returned' ? 'selected' : '' %>>Partially Returned</option>
                <option value="Partially Delivered" <%= currentStatus === 'Partially Delivered' ? 'selected' : '' %>>Partially Delivered</option>
                <option value="Partially Shipped" <%= currentStatus === 'Partially Shipped' ? 'selected' : '' %>>Partially Shipped</option>
              </select>
            </div>

            <div class="filter-group">
              <label class="filter-label">Payment Method</label>
              <select class="filter-select" id="paymentFilter">
                <option value="All">All Methods</option>
                <option value="COD">Cash on Delivery</option>
                <option value="Online">Online Payment</option>
                <option value="Wallet">Wallet</option>
              </select>
            </div>

            <div class="search-input-container">
              <label class="filter-label">Search</label>
              <i class="fas fa-search search-icon"></i>
              <input
                type="text"
                class="search-input"
                id="searchInput"
                placeholder="Search by order ID, customer name..."
                value="<%= searchQuery %>"
              />
            </div>
          </div>

          <div class="time-filter">
            <button class="time-filter-btn <%= timeRange === 'all' ? 'active' : '' %>" data-range="all">
              All Time
            </button>
            <button class="time-filter-btn <%= timeRange === '12m' ? 'active' : '' %>" data-range="12m">12 Months</button>
            <button class="time-filter-btn <%= timeRange === '30d' ? 'active' : '' %>" data-range="30d">30 Days</button>
            <button class="time-filter-btn <%= timeRange === '7d' ? 'active' : '' %>" data-range="7d">7 Days</button>
            <button class="time-filter-btn <%= timeRange === '24h' ? 'active' : '' %>" data-range="24h">24 Hours</button>
          </div>
        </div>

        <!-- Orders Table -->
        <div class="orders-container">
          <div class="table-header">
            <h3 class="table-title">
              <i class="fas fa-shopping-bag"></i> Orders
            </h3>
            <div class="table-actions">
              <div class="view-toggle">
                <button class="view-toggle-btn active" id="tableViewBtn">
                  <i class="fas fa-list"></i>
                </button>
                <button class="view-toggle-btn" id="cardViewBtn">
                  <i class="fas fa-th-large"></i>
                </button>
              </div>
            </div>
          </div>

          <!-- Table View -->
          <div id="tableView">
            <div class="table-responsive">
              <table class="orders-table">
                <thead>
                  <tr>
                    <th>
                      Order ID
                      <i
                        class="fas fa-sort sort-icon"
                        data-sort="orderNumber"
                      ></i>
                    </th>
                    <th>Product</th>
                    <th>
                      Date
                      <i
                        class="fas fa-sort sort-icon"
                        data-sort="orderDate"
                      ></i>
                    </th>
                    <th>Customer</th>
                    <th>
                      Total
                      <i class="fas fa-sort sort-icon" data-sort="total"></i>
                    </th>
                    <th>Payment</th>
                    <th>Status</th>
                    <th>Action</th>
                  </tr>
                </thead>
                <tbody id="ordersTableBody">
                  <% if (orders && orders.length > 0) { %>
                    <% orders.forEach(order => { %>
                      <tr data-status="<%= order.status %>" data-total="<%= order.total %>">
                        <td class="order-id"><%= order.orderNumber %></td>
                        <td>
                          <div class="product-cell">
                            <div class="product-image">
                              <% if (order.order_items && order.order_items.length > 0) { %>
                                <% if (order.order_items[0].productId && order.order_items[0].productId.images && order.order_items[0].productId.images.length > 0) { %>
                                  <img src="<%= order.order_items[0].productId.images[0].url %>" alt="Product" />
                                <% } else if (order.order_items[0].itemImage) { %>
                                  <img src="<%= order.order_items[0].itemImage %>" alt="Product" />
                                <% } else { %>
                                  <img src="/placeholder.svg?height=50&width=50&query=product" alt="Product" />
                                <% } %>
                              <% } else { %>
                                <img src="/placeholder.svg?height=50&width=50&query=product" alt="Product" />
                              <% } %>
                            </div>
                            <div class="product-info">
                              <% if (order.order_items && order.order_items.length > 0) { %>
                                <div class="product-name">
                                  <%= order.order_items[0].product_name || (order.order_items[0].productId ? order.order_items[0].productId.name : 'Unknown Product') %>
                                </div>
                                <div class="product-meta">
                                  <% if (order.order_items.length > 1) { %>
                                    + <%= order.order_items.length - 1 %> other items
                                  <% } else { %>
                                    Size: <%= order.order_items[0].size || 'N/A' %>, Qty: <%= order.order_items[0].quantity || 1 %>
                                  <% } %>
                                </div>
                              <% } else { %>
                                <div class="product-name">No items</div>
                              <% } %>
                            </div>
                          </div>
                        </td>
                        <td>
                          <%= new Date(order.orderDate).toLocaleDateString('en-IN', { day: 'numeric', month: 'short', year: 'numeric' }) %>
                        </td>
                        <td>
                          <div class="customer-cell">
                            <% if (order.userId) { %>
                              <div class="customer-name">
                                <%= order.userId.name || order.userId.fullname || 'Unknown' %>
                              </div>
                              <div class="customer-email">
                                <%= order.userId.email || 'No email' %>
                              </div>
                            <% } else { %>
                              <div class="customer-name">Unknown User</div>
                            <% } %>
                          </div>
                        </td>
                        <td class="price-cell">₹<%= order.total.toFixed(2) %></td>
                        <td>
                          <div class="payment-method <%= order.paymentMethod.toLowerCase().includes('cod') ? 'cod' : (order.paymentMethod.toLowerCase().includes('wallet') ? 'wallet' : 'online') %>">
                            <i class="<%= order.paymentMethod.toLowerCase().includes('cod') ? 'fas fa-money-bill-wave' : (order.paymentMethod.toLowerCase().includes('wallet') ? 'fas fa-wallet' : 'fas fa-credit-card') %>"></i>
                            <%= order.paymentMethod %>
                          </div>
                        </td>
                        <td>
                          <div class="status-badge <%= order.status.toLowerCase().replace(/\s+/g, '-') %>">
                            <% 
                              let statusIcon = 'fas fa-info-circle';
                              switch(order.status) {
                                case 'Pending': statusIcon = 'fas fa-clock'; break;
                                case 'Processing': statusIcon = 'fas fa-spinner'; break;
                                case 'Confirmed': statusIcon = 'fas fa-check'; break;
                                case 'Shipped': statusIcon = 'fas fa-truck'; break;
                                case 'Delivered': statusIcon = 'fas fa-check-circle'; break;
                                case 'Cancelled': statusIcon = 'fas fa-times-circle'; break;
                                case 'Return Requested': statusIcon = 'fas fa-undo'; break;
                                case 'Return Approved': statusIcon = 'fas fa-check-square'; break;
                                case 'Returned': statusIcon = 'fas fa-box'; break;
                                case 'Return Rejected': statusIcon = 'fas fa-ban'; break;
                                case 'Partially Cancelled': statusIcon = 'fas fa-exclamation-circle'; break;
                                case 'Partially Returned': statusIcon = 'fas fa-exchange-alt'; break;
                                case 'Partially Delivered': statusIcon = 'fas fa-truck-loading'; break;
                                case 'Partially Shipped': statusIcon = 'fas fa-dolly'; break;
                              }
                            %>
                            <i class="<%= statusIcon %>"></i>
                            <%= order.status %>
                          </div>
                          <% if (order.returnRejectionReason) { %>
                            <div class="reason-tag">
                              <i class="fas fa-info-circle"></i>
                              <%= order.returnRejectionReason.substring(0, 20) %>...
                            </div>
                          <% } %>
                        </td>
                        <td>
                          <div class="action-buttons">
                            <a href="/admin/orders/<%= order._id %>" class="action-btn view" title="View Details">
                              <i class="far fa-eye"></i>
                            </a>
                            <button class="action-btn edit" title="Update Status" onclick="openStatusModal('<%= order._id %>', '<%= order.status %>')">
                              <i class="fas fa-edit"></i>
                            </button>
                            <% if (order.status === 'Return Requested') { %>
                              <button class="action-btn approve" title="Approve Return" onclick="openApproveReturnModal('<%= order._id %>')">
                                <i class="fas fa-check"></i>
                              </button>
                              <button class="action-btn reject" title="Reject Return" onclick="openRejectReturnModal('<%= order._id %>')">
                                <i class="fas fa-times"></i>
                              </button>
                            <% } %>
                          </div>
                        </td>
                      </tr>
                    <% }); %>
                  <% } else { %>
                    <tr>
                      <td colspan="8">
                        <div class="empty-state">
                          <div class="empty-state-icon">
                            <i class="fas fa-shopping-cart"></i>
                          </div>
                          <h3 class="empty-state-title">No Orders Found</h3>
                          <p class="empty-state-description">
                            There are no orders matching your criteria. Try
                            adjusting your filters or create a new order.
                          </p>
                          <button class="empty-state-action" onclick="resetFilters()">
                            <i class="fas fa-redo"></i>
                            Reset Filters
                          </button>
                        </div>
                      </td>
                    </tr>
                  <% } %>
                </tbody>
              </table>
            </div>
          </div>

          <!-- Card View -->
          <div id="cardView" style="display: none">
            <div class="orders-grid">
              <% if (orders && orders.length > 0) { %>
                <% orders.forEach(order => { %>
                  <div class="order-card" data-status="<%= order.status %>" data-total="<%= order.total %>">
                    <div class="order-card-header">
                      <div class="order-card-id"><%= order.orderNumber %></div>
                      <div class="order-card-date">
                        <%= new Date(order.orderDate).toLocaleDateString('en-IN', { day: 'numeric', month: 'short', year: 'numeric' }) %>
                      </div>
                    </div>
                    <div class="order-card-body">
                      <div class="order-card-product">
                        <div class="order-card-product-image">
                          <% if (order.order_items && order.order_items.length > 0) { %>
                            <% if (order.order_items[0].productId && order.order_items[0].productId.images && order.order_items[0].productId.images.length > 0) { %>
                              <img src="<%= order.order_items[0].productId.images[0].url %>" alt="Product" />
                            <% } else if (order.order_items[0].itemImage) { %>
                              <img src="<%= order.order_items[0].itemImage %>" alt="Product" />
                            <% } else { %>
                              <img src="/placeholder.svg?height=80&width=80&query=product" alt="Product" />
                            <% } %>
                          <% } else { %>
                            <img src="/placeholder.svg?height=80&width=80&query=product" alt="Product" />
                          <% } %>
                        </div>
                        <div class="order-card-product-info">
                          <% if (order.order_items && order.order_items.length > 0) { %>
                            <div class="order-card-product-name">
                              <%= order.order_items[0].product_name || (order.order_items[0].productId ? order.order_items[0].productId.name : 'Unknown Product') %>
                            </div>
                            <div class="order-card-product-meta">
                              <% if (order.order_items.length > 1) { %>
                                + <%= order.order_items.length - 1 %> other items
                              <% } else { %>
                                Size: <%= order.order_items[0].size || 'N/A' %>, Qty: <%= order.order_items[0].quantity || 1 %>
                              <% } %>
                            </div>
                          <% } else { %>
                            <div class="order-card-product-name">No items</div>
                          <% } %>
                        </div>
                      </div>
                      <div class="order-card-details">
                        <div class="order-card-detail">
                          <div class="order-card-detail-label">Customer</div>
                          <div class="order-card-detail-value">
                            <% if (order.userId) { %>
                              <%= order.userId.name || order.userId.fullname || 'Unknown' %>
                            <% } else { %>
                              Unknown User
                            <% } %>
                          </div>
                        </div>
                        <div class="order-card-detail">
                          <div class="order-card-detail-label">Total</div>
                          <div class="order-card-detail-value">
                            ₹<%= order.total.toFixed(2) %>
                          </div>
                        </div>
                        <div class="order-card-detail">
                          <div class="order-card-detail-label">Payment</div>
                          <div class="order-card-detail-value">
                            <%= order.paymentMethod %>
                          </div>
                        </div>
                        <div class="order-card-detail">
                          <div class="order-card-detail-label">Payment Status</div>
                          <div class="order-card-detail-value">
                            <%= order.paymentStatus %>
                          </div>
                        </div>
                      </div>
                      <% if (order.returnRejectionReason) { %>
                        <div class="reason-tag">
                          <i class="fas fa-info-circle"></i>
                          <%= order.returnRejectionReason %>
                        </div>
                      <% } %>
                    </div>
                    <div class="order-card-footer">
                      <div class="order-card-status">
                        <div class="status-badge <%= order.status.toLowerCase().replace(/\s+/g, '-') %>">
                          <% 
                            let statusIcon = 'fas fa-info-circle';
                            switch(order.status) {
                              case 'Pending': statusIcon = 'fas fa-clock'; break;
                              case 'Processing': statusIcon = 'fas fa-spinner'; break;
                              case 'Confirmed': statusIcon = 'fas fa-check'; break;
                              case 'Shipped': statusIcon = 'fas fa-truck'; break;
                              case 'Delivered': statusIcon = 'fas fa-check-circle'; break;
                              case 'Cancelled': statusIcon = 'fas fa-times-circle'; break;
                              case 'Return Requested': statusIcon = 'fas fa-undo'; break;
                              case 'Return Approved': statusIcon = 'fas fa-check-square'; break;
                              case 'Returned': statusIcon = 'fas fa-box'; break;
                              case 'Return Rejected': statusIcon = 'fas fa-ban'; break;
                              case 'Partially Cancelled': statusIcon = 'fas fa-exclamation-circle'; break;
                              case 'Partially Returned': statusIcon = 'fas fa-exchange-alt'; break;
                              case 'Partially Delivered': statusIcon = 'fas fa-truck-loading'; break;
                              case 'Partially Shipped': statusIcon = 'fas fa-dolly'; break;
                            }
                          %>
                          <i class="<%= statusIcon %>"></i>
                          <%= order.status %>
                        </div>
                      </div>
                      <div class="order-card-actions">
                        <a href="/admin/orders/<%= order._id %>" class="action-btn view" title="View Details">
                          <i class="far fa-eye"></i>
                        </a>
                        <button class="action-btn edit" title="Update Status" onclick="openStatusModal('<%= order._id %>', '<%= order.status %>')">
                          <i class="fas fa-edit"></i>
                        </button>
                        <% if (order.status === 'Return Requested') { %>
                          <button class="action-btn approve" title="Approve Return" onclick="openApproveReturnModal('<%= order._id %>')">
                            <i class="fas fa-check"></i>
                          </button>
                          <button class="action-btn reject" title="Reject Return" onclick="openRejectReturnModal('<%= order._id %>')">
                            <i class="fas fa-times"></i>
                          </button>
                        <% } %>
                      </div>
                    </div>
                  </div>
                <% }); %>
              <% } else { %>
                <div class="empty-state">
                  <div class="empty-state-icon">
                    <i class="fas fa-shopping-cart"></i>
                  </div>
                  <h3 class="empty-state-title">No Orders Found</h3>
                  <p class="empty-state-description">
                    There are no orders matching your criteria. Try adjusting your
                    filters or create a new order.
                  </p>
                  <button class="empty-state-action" onclick="resetFilters()">
                    <i class="fas fa-redo"></i>
                    Reset Filters
                  </button>
                </div>
              <% } %>
            </div>
          </div>

          <!-- Pagination -->
          <div class="pagination-container">
            <div class="pagination-info">
              <% if (orders && orders.length > 0) { %>
                Showing <%= (currentPage - 1) * limit + 1 %>-<%= Math.min(currentPage * limit, totalOrders) %> of <%= totalOrders %> orders
              <% } else { %>
                No orders found
              <% } %>
            </div>
            <ul class="pagination">
              <% if (totalPages > 0) { %>
                <li class="pagination-item <%= currentPage === 1 ? 'disabled' : '' %>">
                  <a class="pagination-link <%= currentPage === 1 ? 'disabled' : '' %>" href="?page=<%= currentPage - 1 %>&status=<%= currentStatus %>&search=<%= searchQuery %>&sort=<%= sort %>&order=<%= sortOrder %>&timeRange=<%= timeRange %>">
                    <i class="fas fa-chevron-left"></i>
                  </a>
                </li>
                <% for (let i = 1; i <= totalPages; i++) { %>
                  <li class="pagination-item">
                    <a class="pagination-link <%= currentPage === i ? 'active' : '' %>" href="?page=<%= i %>&status=<%= currentStatus %>&search=<%= searchQuery %>&sort=<%= sort %>&order=<%= sortOrder %>&timeRange=<%= timeRange %>">
                      <%= i %>
                    </a>
                  </li>
                <% } %>
                <li class="pagination-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                  <a class="pagination-link <%= currentPage === totalPages ? 'disabled' : '' %>" href="?page=<%= currentPage + 1 %>&status=<%= currentStatus %>&search=<%= searchQuery %>&sort=<%= sort %>&order=<%= sortOrder %>&timeRange=<%= timeRange %>">
                    <i class="fas fa-chevron-right"></i>
                  </a>
                </li>
              <% } %>
            </ul>
          </div>
        </div>
      </div>
    </div>

    <!-- Status Update Modal -->
    <div
      class="modal fade"
      id="statusModal"
      tabindex="-1"
      aria-labelledby="statusModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="statusModalLabel">
              Update Order Status
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <form id="statusUpdateForm">
              <input type="hidden" id="orderIdInput" />
              <div class="mb-3">
                <label for="statusSelect" class="form-label"
                  >Select new status</label
                >
                <select class="form-select" id="statusSelect">
                  <option value="Pending">Pending</option>
                  <option value="Processing">Processing</option>
                  <option value="Confirmed">Confirmed</option>
                  <option value="Shipped">Shipped</option>
                  <option value="Delivered">Delivered</option>
                  <option value="Cancelled">Cancelled</option>
                  <option value="Return Requested">Return Requested</option>
                  <option value="Return Approved">Return Approved</option>
                  <option value="Returned">Returned</option>
                  <option value="Return Rejected">Return Rejected</option>
                  <option value="Partially Cancelled">
                    Partially Cancelled
                  </option>
                  <option value="Partially Returned">Partially Returned</option>
                  <option value="Partially Delivered">
                    Partially Delivered
                  </option>
                  <option value="Partially Shipped">Partially Shipped</option>
                </select>
              </div>
              <div class="mb-3">
                <label for="statusNote" class="form-label"
                  >Note (optional)</label
                >
                <textarea
                  class="form-control"
                  id="statusNote"
                  rows="2"
                  placeholder="Add a note about this status change"
                ></textarea>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Cancel
            </button>
            <button type="button" class="btn btn-primary" id="saveStatusBtn">
              Save Changes
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Approve Return Modal -->
    <div
      class="modal fade"
      id="approveReturnModal"
      tabindex="-1"
      aria-labelledby="approveReturnModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="approveReturnModalLabel">
              Approve Return
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <p>Are you sure you want to approve the return for this order?</p>
            <p>
              This will process a refund and credit the amount to the user's
              wallet.
            </p>
            <div class="mb-3">
              <label for="refundNote" class="form-label"
                >Refund Note (optional)</label
              >
              <textarea
                class="form-control"
                id="refundNote"
                rows="2"
                placeholder="Add a note about this refund"
              ></textarea>
            </div>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Cancel
            </button>
            <button
              type="button"
              class="btn btn-success"
              id="confirmApproveReturnBtn"
            >
              Approve Return
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Reject Return Modal -->
    <div
      class="modal fade"
      id="rejectReturnModal"
      tabindex="-1"
      aria-labelledby="rejectReturnModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="rejectReturnModalLabel">
              Reject Return
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <p>Please provide a reason for rejecting the return.</p>
            <div class="mb-3">
              <label for="rejectionReason" class="form-label"
                >Reason for rejection (required)</label
              >
              <textarea
                class="form-control"
                id="rejectionReason"
                rows="3"
                maxlength="500"
                required
              ></textarea>
              <div class="invalid-feedback">
                Please provide a reason for the rejection.
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Cancel
            </button>
            <button
              type="button"
              class="btn btn-danger"
              id="confirmRejectReturnBtn"
            >
              Reject Return
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Toast Notifications -->
    <div class="toast-container position-fixed top-0 end-0 p-3">
      <div
        id="orderToast"
        class="toast"
        role="alert"
        aria-live="assertive"
        aria-atomic="true"
        data-bs-delay="5000"
      >
        <div class="toast-header">
          <strong class="me-auto">Order Action</strong>
          <small>Just now</small>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="toast"
            aria-label="Close"
          ></button>
        </div>
        <div class="toast-body"></div>
      </div>
    </div>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.12/dist/sweetalert2.all.min.js"></script>

    <script>
      // Theme Toggle
      document.addEventListener("DOMContentLoaded", function () {
        const themeToggle = document.getElementById("themeToggle");
        const htmlElement = document.documentElement;

        // Check for saved theme preference or use preferred color scheme
        const savedTheme =
          localStorage.getItem("theme") ||
          (window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "light");

        // Apply the saved theme
        applyTheme(savedTheme);

        // Toggle theme when button is clicked
        themeToggle.addEventListener("click", function () {
          const currentTheme = htmlElement.getAttribute("data-theme");
          const newTheme = currentTheme === "dark" ? "light" : "dark";

          applyTheme(newTheme);
          localStorage.setItem("theme", newTheme);
        });

        function applyTheme(theme) {
          htmlElement.setAttribute("data-theme", theme);

          // Update the icon
          const themeIcon = themeToggle.querySelector("i");
          if (theme === "dark") {
            themeIcon.className = "fas fa-sun";
          } else {
            themeIcon.className = "fas fa-moon";
          }
        }
      });

      // DOM elements
      const tableViewBtn = document.getElementById("tableViewBtn");
      const cardViewBtn = document.getElementById("cardViewBtn");
      const tableView = document.getElementById("tableView");
      const cardView = document.getElementById("cardView");
      const statusFilter = document.getElementById("statusFilter");
      const paymentFilter = document.getElementById("paymentFilter");
      const searchInput = document.getElementById("searchInput");
      const timeFilterBtns = document.querySelectorAll(".time-filter-btn");
      const resetFiltersBtn = document.getElementById("resetFilters");
      const exportOrdersBtn = document.getElementById("exportOrders");
      const mobileToggle = document.getElementById("mobileToggle");

      // Modals
      const statusModal = new bootstrap.Modal(
        document.getElementById("statusModal")
      );
      const approveReturnModal = new bootstrap.Modal(
        document.getElementById("approveReturnModal")
      );
      const rejectReturnModal = new bootstrap.Modal(
        document.getElementById("rejectReturnModal")
      );

      // Modal elements
      const orderIdInput = document.getElementById("orderIdInput");
      const statusSelect = document.getElementById("statusSelect");
      const statusNote = document.getElementById("statusNote");
      const saveStatusBtn = document.getElementById("saveStatusBtn");
      const confirmApproveReturnBtn = document.getElementById(
        "confirmApproveReturnBtn"
      );
      const confirmRejectReturnBtn = document.getElementById(
        "confirmRejectReturnBtn"
      );
      const rejectionReason = document.getElementById("rejectionReason");
      const refundNote = document.getElementById("refundNote");

      // Initialize
      document.addEventListener("DOMContentLoaded", function () {
        // Set up event listeners
        setupEventListeners();

        // Update stats if they're not provided by the server
        if (typeof stats === 'undefined') {
          updateStats();
        }

        // Check for saved view preference
        const savedView = localStorage.getItem("orderViewMode") || "table";
        if (savedView === "card") {
          cardViewBtn.click();
        }
      });

      // Set up event listeners
      function setupEventListeners() {
        // Table/Card view toggle
        tableViewBtn.addEventListener("click", function () {
          tableViewBtn.classList.add("active");
          cardViewBtn.classList.remove("active");
          tableView.style.display = "block";
          cardView.style.display = "none";
          localStorage.setItem("orderViewMode", "table");
        });

        cardViewBtn.addEventListener("click", function () {
          cardViewBtn.classList.add("active");
          tableViewBtn.classList.remove("active");
          cardView.style.display = "block";
          tableView.style.display = "none";
          localStorage.setItem("orderViewMode", "card");
        });

        // Status filter
        statusFilter.addEventListener("change", function () {
          window.location.href = `?status=${this.value}`;
        });

        // Payment filter
        paymentFilter.addEventListener("change", function () {
          window.location.href = `?payment=${this.value}`;
        });

        // Search input
        searchInput.addEventListener("keypress", function (e) {
          if (e.key === "Enter") {
            window.location.href = `?search=${this.value}`;
          }
        });

        // Time filter buttons
        timeFilterBtns.forEach((btn) => {
          btn.addEventListener("click", function () {
            timeFilterBtns.forEach((b) => b.classList.remove("active"));
            this.classList.add("active");
            window.location.href = `?timeRange=${this.getAttribute(
              "data-range"
            )}`;
          });
        });

        // Reset filters button
        resetFiltersBtn.addEventListener("click", resetFilters);

        // Export orders button
        exportOrdersBtn.addEventListener("click", exportOrders);

        // Mobile toggle
        mobileToggle.addEventListener("click", function () {
          document.getElementById("sidebar").classList.toggle("show");
        });

        // Save status button
        saveStatusBtn.addEventListener("click", updateOrderStatus);

        // Confirm approve return button
        confirmApproveReturnBtn.addEventListener("click", approveReturn);

        // Confirm reject return button
        confirmRejectReturnBtn.addEventListener("click", rejectReturn);

        // Rejection reason input
        rejectionReason.addEventListener("input", function () {
          this.classList.remove("is-invalid");
        });

        // Sort icons
        document.querySelectorAll(".sort-icon").forEach((icon) => {
          icon.addEventListener("click", function () {
            const sortField = this.getAttribute("data-sort");
            const currentSort = new URLSearchParams(window.location.search).get(
              "sort"
            );
            const currentOrder = new URLSearchParams(
              window.location.search
            ).get("order");

            let newOrder = "asc";
            if (sortField === currentSort && currentOrder === "asc") {
              newOrder = "desc";
            }

            window.location.href = `?sort=${sortField}&order=${newOrder}`;
          });
        });
      }

      // Update order status
      function updateOrderStatus() {
        const orderId = orderIdInput.value;
        const newStatus = statusSelect.value;
        const note = statusNote.value;

        // Show loading
        Swal.fire({
          title: "Updating...",
          text: "Updating order status",
          allowOutsideClick: false,
          didOpen: () => {
            Swal.showLoading();
          },
        });

        fetch("/admin/orders/update-status", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ orderId, status: newStatus, note }),
        })
          .then((res) => res.json())
          .then((data) => {
            if (data.success) {
              Swal.fire({
                icon: "success",
                title: "Success!",
                text: "Order status updated successfully",
                timer: 1500,
                showConfirmButton: false,
              }).then(() => {
                window.location.reload();
              });
            } else {
              Swal.fire({
                icon: "error",
                title: "Error",
                text: data.message || "Failed to update status",
              });
            }
            statusModal.hide();
          })
          .catch((error) => {
            console.error("Error updating status:", error);
            Swal.fire({
              icon: "error",
              title: "Error",
              text: "An error occurred while updating the status",
            });
            statusModal.hide();
          });
      }

      // Approve return
      function approveReturn() {
        const orderId = this.getAttribute("data-order-id");
        const note = refundNote.value;

        // Show loading
        Swal.fire({
          title: "Processing...",
          text: "Approving return request",
          allowOutsideClick: false,
          didOpen: () => {
            Swal.showLoading();
          },
        });

        fetch(`/admin/orders/return/${orderId}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ action: "approve", note }),
        })
          .then((res) => res.json())
          .then((data) => {
            if (data.success) {
              Swal.fire({
                icon: "success",
                title: "Success!",
                text: "Return approved and refund processed successfully",
                timer: 1500,
                showConfirmButton: false,
              }).then(() => {
                window.location.reload();
              });
            } else {
              Swal.fire({
                icon: "error",
                title: "Error",
                text: data.message || "Failed to approve return",
              });
            }
            approveReturnModal.hide();
          })
          .catch((error) => {
            console.error("Error approving return:", error);
            Swal.fire({
              icon: "error",
              title: "Error",
              text: "An error occurred while approving the return",
            });
            approveReturnModal.hide();
          });
      }

      // Reject return
      function rejectReturn() {
        const orderId = this.getAttribute("data-order-id");
        const reason = rejectionReason.value.trim();

        if (!reason) {
          rejectionReason.classList.add("is-invalid");
          return;
        }

        // Show loading
        Swal.fire({
          title: "Processing...",
          text: "Rejecting return request",
          allowOutsideClick: false,
          didOpen: () => {
            Swal.showLoading();
          },
        });

        fetch(`/admin/orders/return/${orderId}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ action: "reject", rejectionReason: reason }),
        })
          .then((res) => res.json())
          .then((data) => {
            if (data.success) {
              Swal.fire({
                icon: "success",
                title: "Success!",
                text: "Return rejected successfully",
                timer: 1500,
                showConfirmButton: false,
              }).then(() => {
                window.location.reload();
              });
            } else {
              Swal.fire({
                icon: "error",
                title: "Error",
                text: data.message || "Failed to reject return",
              });
            }
            rejectReturnModal.hide();
          })
          .catch((error) => {
            console.error("Error rejecting return:", error);
            Swal.fire({
              icon: "error",
              title: "Error",
              text: "An error occurred while rejecting the return",
            });
            rejectReturnModal.hide();
          });
      }

      // Reset filters
      function resetFilters() {
        window.location.href = "/admin/orders";
      }

      // Export orders
      function exportOrders() {
        // Get current URL parameters
        const urlParams = new URLSearchParams(window.location.search);

        // Redirect to export endpoint with same parameters
        window.location.href = `/admin/orders/export?${urlParams.toString()}`;
      }

      // Open status modal
      function openStatusModal(orderId, currentStatus) {
        orderIdInput.value = orderId;
        statusSelect.value = currentStatus;
        statusNote.value = "";
        statusModal.show();
      }

      // Open approve return modal
      function openApproveReturnModal(orderId) {
        confirmApproveReturnBtn.setAttribute("data-order-id", orderId);
        refundNote.value = "";
        approveReturnModal.show();
      }

      // Open reject return modal
      function openRejectReturnModal(orderId) {
        confirmRejectReturnBtn.setAttribute("data-order-id", orderId);
        rejectionReason.value = "";
        rejectionReason.classList.remove("is-invalid");
        rejectReturnModal.show();
      }

      // Update stats - Improved version with case-insensitive status check
      function updateStats() {
        // Get all order elements from both table and card views
        const orderRows = document.querySelectorAll("#ordersTableBody tr[data-status]");
        const orderCards = document.querySelectorAll(".order-card[data-status]");
        
        // Combine all order elements
        const allOrderElements = [...orderRows, ...orderCards];
        
        // Initialize counters
        let pendingCount = 0;
        let processingCount = 0;
        let deliveredCount = 0;
        let totalRevenue = 0;
        
        // Count orders by status and calculate total revenue
        allOrderElements.forEach(element => {
          const status = element.getAttribute('data-status');
          const total = parseFloat(element.getAttribute('data-total') || 0);
          
          // Count by status - using exact match for schema enum values
          if (status === 'Pending') pendingCount++;
          if (status === 'Processing') processingCount++;
          
          // Count both "Delivered" and "Partially Delivered" orders
          if (status === 'Delivered' || status === 'Partially Delivered') {
            deliveredCount++;
          }
          
          // Add to total revenue
          if (!isNaN(total)) {
            totalRevenue += total;
          }
        });
        
        // Get total orders count from pagination info if available
        let totalOrdersText = document.querySelector(".pagination-info")?.textContent || "";
        let totalOrdersMatch = totalOrdersText.match(/of\s+(\d+)\s+orders/);
        let totalOrders = totalOrdersMatch ? parseInt(totalOrdersMatch[1]) : allOrderElements.length;
        
        // If we have total orders info and it's more than what's displayed, adjust the counts proportionally
        if (totalOrders > allOrderElements.length && allOrderElements.length > 0) {
          const ratio = totalOrders / allOrderElements.length;
          pendingCount = Math.round(pendingCount * ratio);
          processingCount = Math.round(processingCount * ratio);
          deliveredCount = Math.round(deliveredCount * ratio);
          totalRevenue = totalRevenue * ratio;
        }
        
        // Update the UI
        document.getElementById("pendingCount").textContent = pendingCount;
        document.getElementById("processingCount").textContent = processingCount;
        document.getElementById("deliveredCount").textContent = deliveredCount;
        document.getElementById("revenueCount").textContent = totalRevenue.toFixed(2);
        
        // Generate random change percentages for visual effect
        const pendingChange = Math.floor(Math.random() * 20) - 5; // -5 to +15
        const processingChange = Math.floor(Math.random() * 20) - 5;
        const deliveredChange = Math.floor(Math.random() * 30); // 0 to +30
        const revenueChange = Math.floor(Math.random() * 25); // 0 to +25
        
        document.getElementById("pendingChange").textContent = `${pendingChange}%`;
        document.getElementById("processingChange").textContent = `${processingChange}%`;
        document.getElementById("deliveredChange").textContent = `${deliveredChange}%`;
        document.getElementById("revenueChange").textContent = `${revenueChange}%`;
        
        // Update change indicators
        updateChangeIndicator("pendingChange", pendingChange);
        updateChangeIndicator("processingChange", processingChange);
        updateChangeIndicator("deliveredChange", deliveredChange);
        updateChangeIndicator("revenueChange", revenueChange);
      }

      // Update change indicator
      function updateChangeIndicator(elementId, change) {
        const element = document.getElementById(elementId).parentElement;
        const icon = element.querySelector("i");

        if (change > 0) {
          element.classList.remove("negative");
          element.classList.add("positive");
          icon.className = "fas fa-arrow-up";
        } else if (change < 0) {
          element.classList.remove("positive");
          element.classList.add("negative");
          icon.className = "fas fa-arrow-down";
        } else {
          element.classList.remove("positive", "negative");
          icon.className = "fas fa-minus";
        }
      }

      // Show toast notification
      function showToast(message, isSuccess = true) {
        const toastEl = document.getElementById("orderToast");
        const toastBody = toastEl.querySelector(".toast-body");
        toastBody.innerHTML = `<i class="fas ${
          isSuccess
            ? "fa-check-circle text-success"
            : "fa-exclamation-triangle text-danger"
        } me-2"></i>${message}`;
        const toast = new bootstrap.Toast(toastEl);
        toast.show();
      }
    </script>
  </body>
</html>