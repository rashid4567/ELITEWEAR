<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ELITE WEAR - Order Management</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <!-- SweetAlert2 -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.12/dist/sweetalert2.min.css">
    <!-- Animate.css for enhanced animations -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- Custom CSS -->
    <style>
        :root {
            /* Light Theme Variables */
            --primary-color: #5D3FD3;
            --secondary-color: #7B68EE;
            --accent-color: #9370DB;
            --light-color: #F8F9FA;
            --dark-color: #212529;
            --success-color: #28a745;
            --warning-color: #ffc107;
            --danger-color: #dc3545;
            --info-color: #17a2b8;
            
            /* Background and Text Colors */
            --bg-main: #f5f7fa;
            --bg-card: #ffffff;
            --bg-header: #ffffff;
            --text-primary: #333333;
            --text-secondary: #6c757d;
            --text-muted: #95a5a6;
            
            /* Border and Shadow */
            --border-color: #e9ecef;
            --border-radius: 8px;
            --box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            --transition: all 0.3s ease;
            
            /* Status Colors */
            --status-pending-bg: #fff8e1;
            --status-pending-text: #ff9800;
            --status-processing-bg: #e3f2fd;
            --status-processing-text: #2196f3;
            --status-confirmed-bg: #e8f5e9;
            --status-confirmed-text: #4caf50;
            --status-shipped-bg: #e8eaf6;
            --status-shipped-text: #3f51b5;
            --status-delivered-bg: #e8f5e9;
            --status-delivered-text: #4caf50;
            --status-cancelled-bg: #ffebee;
            --status-cancelled-text: #f44336;
            --status-return-bg: #fff3e0;
            --status-return-text: #ff9800;
            
            /* Form Elements */
            --input-bg: #ffffff;
            --input-border: #ced4da;
            --input-focus-border: #5D3FD3;
            --input-focus-shadow: rgba(93, 63, 211, 0.1);
            
            /* Button Colors */
            --btn-default-bg: #f8f9fa;
            --btn-default-text: #6c757d;
            --btn-default-hover: #e9ecef;
            --btn-primary-bg: #5D3FD3;
            --btn-primary-text: #ffffff;
            --btn-primary-hover: #7B68EE;
        }

        [data-theme="dark"] {
            /* Dark Theme Variables */
            --primary-color: #7B68EE;
            --secondary-color: #9370DB;
            --accent-color: #B19CD9;
            --light-color: #2D3748;
            --dark-color: #F8F9FA;
            --success-color: #48BB78;
            --warning-color: #F6AD55;
            --danger-color: #F56565;
            --info-color: #4FD1C5;
            
            /* Background and Text Colors */
            --bg-main: #1A202C;
            --bg-card: #2D3748;
            --bg-header: #2D3748;
            --text-primary: #F7FAFC;
            --text-secondary: #E2E8F0;
            --text-muted: #A0AEC0;
            
            /* Border and Shadow */
            --border-color: #4A5568;
            --box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
            
            /* Status Colors */
            --status-pending-bg: #4A5568;
            --status-pending-text: #F6AD55;
            --status-processing-bg: #2C5282;
            --status-processing-text: #90CDF4;
            --status-confirmed-bg: #276749;
            --status-confirmed-text: #9AE6B4;
            --status-shipped-bg: #2A4365;
            --status-shipped-text: #90CDF4;
            --status-delivered-bg: #276749;
            --status-delivered-text: #9AE6B4;
            --status-cancelled-bg: #742A2A;
            --status-cancelled-text: #FEB2B2;
            --status-return-bg: #744210;
            --status-return-text: #F6AD55;
            
            /* Form Elements */
            --input-bg: #2D3748;
            --input-border: #4A5568;
            --input-focus-border: #7B68EE;
            --input-focus-shadow: rgba(123, 104, 238, 0.2);
            
            /* Button Colors */
            --btn-default-bg: #2D3748;
            --btn-default-text: #E2E8F0;
            --btn-default-hover: #4A5568;
            --btn-primary-bg: #7B68EE;
            --btn-primary-text: #F7FAFC;
            --btn-primary-hover: #9370DB;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--bg-main);
            color: var(--text-primary);
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        .main-content {
            flex: 1;
            padding: 0;
            background-color: var(--bg-main);
            transition: var(--transition);
                transform: translateX(-250px);
        }

        /* Header Styling */
        .content-header {
            background-color: var(--bg-header);
            padding: 20px 30px;
            box-shadow: var(--box-shadow);
            margin-bottom: 25px;
            transition: background-color 0.3s ease;
        }

        .header-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .page-title {
            font-size: 24px;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 5px;
        }

        .breadcrumb {
            display: flex;
            align-items: center;
            padding: 0;
            margin: 0;
            list-style: none;
            font-size: 14px;
        }

        .breadcrumb-item {
            color: var(--text-secondary);
        }

        .breadcrumb-item a {
            color: var(--primary-color);
            text-decoration: none;
        }

        .breadcrumb-separator {
            margin: 0 8px;
            color: var(--text-secondary);
        }

        .user-profile {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 8px 15px;
            border-radius: var(--border-radius);
            background-color: var(--btn-default-bg);
            cursor: pointer;
            transition: var(--transition);
        }

        .user-profile:hover {
            background-color: var(--btn-default-hover);
        }

        .profile-info {
            text-align: right;
        }

        .user-name {
            font-weight: 600;
            margin: 0;
            font-size: 14px;
            color: var(--text-primary);
        }

        .user-role {
            color: var(--text-secondary);
            margin: 0;
            font-size: 12px;
        }

        .profile-image {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            overflow: hidden;
            background-color: var(--btn-default-bg);
        }

        .profile-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        /* Theme Toggle */
        .theme-toggle {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--btn-default-bg);
            color: var(--text-secondary);
            border: none;
            cursor: pointer;
            transition: var(--transition);
            margin-right: 10px;
        }

        .theme-toggle:hover {
            background-color: var(--btn-default-hover);
            color: var(--primary-color);
        }

        /* Stats Cards */
        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 20px;
            padding: 0 30px;
            margin-bottom: 25px;
        }

        .stat-card {
            background-color: var(--bg-card);
            border-radius: var(--border-radius);
            padding: 20px;
            box-shadow: var(--box-shadow);
            transition: var(--transition);
            position: relative;
            overflow: hidden;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 5px;
            height: 100%;
            background-color: var(--primary-color);
            opacity: 0.7;
        }

        .stat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .stat-title {
            font-size: 14px;
            font-weight: 500;
            color: var(--text-secondary);
            margin: 0;
        }

        .stat-icon {
            width: 45px;
            height: 45px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            color: #fff;
        }

        .stat-icon.pending {
            background-color: var(--warning-color);
        }

        .stat-icon.processing {
            background-color: var(--info-color);
        }

        .stat-icon.delivered {
            background-color: var(--success-color);
        }

        .stat-value {
            font-size: 28px;
            font-weight: 600;
            color: var(--text-primary);
            margin: 0 0 10px 0;
        }

        .stat-change {
            font-size: 13px;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .stat-change.positive {
            color: var(--success-color);
        }

        .stat-change.negative {
            color: var(--danger-color);
        }

        /* Filters */
        .filters-container {
            background-color: var(--bg-card);
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            margin: 0 30px 25px;
            overflow: hidden;
            transition: background-color 0.3s ease;
        }

        .filters-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            border-bottom: 1px solid var(--border-color);
        }

        .filters-title {
            font-size: 16px;
            font-weight: 600;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 8px;
            color: var(--text-primary);
        }

        .filters-actions {
            display: flex;
            gap: 10px;
        }

        .filter-btn {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 15px;
            border: none;
            border-radius: var(--border-radius);
            background-color: var(--btn-default-bg);
            color: var(--btn-default-text);
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
        }

        .filter-btn:hover {
            background-color: var(--btn-default-hover);
        }

        .export-btn {
            background-color: var(--btn-primary-bg);
            color: var(--btn-primary-text);
        }

        .export-btn:hover {
            background-color: var(--btn-primary-hover);
            color: var(--btn-primary-text);
        }

        .filters-body {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            padding: 20px;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .filter-label {
            font-size: 13px;
            font-weight: 500;
            color: var(--text-secondary);
            margin: 0;
        }

        .filter-select {
            padding: 10px 15px;
            border: 1px solid var(--input-border);
            border-radius: var(--border-radius);
            font-size: 14px;
            color: var(--text-primary);
            background-color: var(--input-bg);
            transition: var(--transition);
        }

        .filter-select:focus {
            border-color: var(--input-focus-border);
            outline: none;
            box-shadow: 0 0 0 3px var(--input-focus-shadow);
        }

        .search-input-container {
            position: relative;
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .search-icon {
            position: absolute;
            top: 35px;
            left: 15px;
            color: var(--text-secondary);
        }

        .search-input {
            padding: 10px 15px 10px 40px;
            border: 1px solid var(--input-border);
            border-radius: var(--border-radius);
            font-size: 14px;
            color: var(--text-primary);
            background-color: var(--input-bg);
            transition: var(--transition);
        }

        .search-input:focus {
            border-color: var(--input-focus-border);
            outline: none;
            box-shadow: 0 0 0 3px var(--input-focus-shadow);
        }

        .search-input::placeholder {
            color: var(--text-muted);
        }

        .time-filter {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            padding: 0 20px 20px;
        }

        .time-filter-btn {
            padding: 8px 15px;
            border: 1px solid var(--input-border);
            border-radius: var(--border-radius);
            background-color: var(--input-bg);
            color: var(--text-secondary);
            font-size: 13px;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
        }

        .time-filter-btn:hover {
            background-color: var(--btn-default-hover);
        }

        .time-filter-btn.active {
            background-color: var(--btn-primary-bg);
            border-color: var(--btn-primary-bg);
            color: var(--btn-primary-text);
        }

        /* Orders Table */
        .orders-container {
            background-color: var(--bg-card);
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            margin: 0 30px 25px;
            overflow: hidden;
            transition: background-color 0.3s ease;
        }

        .table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            border-bottom: 1px solid var(--border-color);
        }

        .table-title {
            font-size: 16px;
            font-weight: 600;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 8px;
            color: var(--text-primary);
        }

        .table-actions {
            display: flex;
            gap: 10px;
        }

        .view-toggle {
            display: flex;
            border-radius: var(--border-radius);
            overflow: hidden;
            border: 1px solid var(--input-border);
        }

        .view-toggle-btn {
            padding: 8px 15px;
            border: none;
            background-color: var(--input-bg);
            color: var(--text-secondary);
            font-size: 14px;
            cursor: pointer;
            transition: var(--transition);
        }

        .view-toggle-btn:hover {
            background-color: var(--btn-default-hover);
        }

        .view-toggle-btn.active {
            background-color: var(--btn-primary-bg);
            color: var(--btn-primary-text);
        }

        /* Table View */
        .table-responsive {
            overflow-x: auto;
        }

        .orders-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }

        .orders-table th {
            padding: 15px 20px;
            font-size: 13px;
            font-weight: 600;
            color: var(--text-secondary);
            text-align: left;
            border-bottom: 1px solid var(--border-color);
            position: relative;
            background-color: var(--bg-card);
        }

        .orders-table td {
            padding: 15px 20px;
            font-size: 14px;
            color: var(--text-primary);
            border-bottom: 1px solid var(--border-color);
            vertical-align: middle;
            background-color: var(--bg-card);
        }

        .orders-table tr:last-child td {
            border-bottom: none;
        }

        .orders-table tr:hover td {
            background-color: var(--btn-default-bg);
        }

        .sort-icon {
            margin-left: 5px;
            cursor: pointer;
            opacity: 0.5;
            transition: var(--transition);
        }

        .sort-icon:hover {
            opacity: 1;
        }

        .order-id {
            font-weight: 600;
            color: var(--primary-color);
        }

        .product-cell {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .product-image {
            width: 50px;
            height: 50px;
            border-radius: var(--border-radius);
            overflow: hidden;
            background-color: var(--btn-default-bg);
            border: 1px solid var(--border-color);
        }

        .product-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .product-info {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .product-name {
            font-weight: 500;
            color: var(--text-primary);
        }

        .product-meta {
            font-size: 12px;
            color: var(--text-secondary);
        }

        .customer-cell {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .customer-name {
            font-weight: 500;
            color: var(--text-primary);
        }

        .customer-email {
            font-size: 12px;
            color: var(--text-secondary);
        }

        .price-cell {
            font-weight: 600;
            color: var(--text-primary);
        }

        .payment-method {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
        }

        .payment-method.cod {
            background-color: var(--status-pending-bg);
            color: var(--status-pending-text);
        }

        .payment-method.online {
            background-color: var(--status-processing-bg);
            color: var(--status-processing-text);
        }

        .payment-method.wallet {
            background-color: var(--status-confirmed-bg);
            color: var(--status-confirmed-text);
        }

        .status-badge {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
        }

        .status-badge.pending {
            background-color: var(--status-pending-bg);
            color: var(--status-pending-text);
        }

        .status-badge.processing {
            background-color: var(--status-processing-bg);
            color: var(--status-processing-text);
        }

        .status-badge.confirmed {
            background-color: var(--status-confirmed-bg);
            color: var(--status-confirmed-text);
        }

        .status-badge.shipped {
            background-color: var(--status-shipped-bg);
            color: var(--status-shipped-text);
        }

        .status-badge.delivered {
            background-color: var(--status-delivered-bg);
            color: var(--status-delivered-text);
        }

        .status-badge.cancelled {
            background-color: var(--status-cancelled-bg);
            color: var(--status-cancelled-text);
        }

        .status-badge.return-requested {
            background-color: var(--status-return-bg);
            color: var(--status-return-text);
        }

        .status-badge.return-approved {
            background-color: var(--status-processing-bg);
            color: var(--status-processing-text);
        }

        .status-badge.returned {
            background-color: var(--status-shipped-bg);
            color: var(--status-shipped-text);
        }

        .status-badge.return-rejected {
            background-color: var(--status-cancelled-bg);
            color: var(--status-cancelled-text);
        }

        .status-badge.partially-cancelled,
        .status-badge.partially-returned,
        .status-badge.partially-delivered,
        .status-badge.partially-shipped {
            background-color: var(--btn-default-bg);
            color: var(--text-secondary);
        }

        .reason-tag {
            display: inline-flex;
            align-items: center;
            gap: 5px;
            margin-top: 5px;
            padding: 3px 8px;
            border-radius: 20px;
            background-color: var(--btn-default-bg);
            color: var(--text-secondary);
            font-size: 11px;
        }

        .action-buttons {
            display: flex;
            gap: 8px;
        }

        .action-btn {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            border: none;
            background-color: var(--btn-default-bg);
            color: var(--text-secondary);
            font-size: 14px;
            cursor: pointer;
            transition: var(--transition);
        }

        .action-btn:hover {
            background-color: var(--btn-default-hover);
        }

        .action-btn.view {
            background-color: var(--status-processing-bg);
            color: var(--status-processing-text);
        }

        .action-btn.view:hover {
            background-color: var(--status-processing-text);
            color: var(--btn-primary-text);
        }

        .action-btn.edit {
            background-color: var(--status-confirmed-bg);
            color: var(--status-confirmed-text);
        }

        .action-btn.edit:hover {
            background-color: var(--status-confirmed-text);
            color: var(--btn-primary-text);
        }

        .action-btn.approve {
            background-color: var(--status-confirmed-bg);
            color: var(--status-confirmed-text);
        }

        .action-btn.approve:hover {
            background-color: var(--status-confirmed-text);
            color: var(--btn-primary-text);
        }

        .action-btn.reject {
            background-color: var(--status-cancelled-bg);
            color: var(--status-cancelled-text);
        }

        .action-btn.reject:hover {
            background-color: var(--status-cancelled-text);
            color: var(--btn-primary-text);
        }

        /* Card View */
        .orders-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            padding: 20px;
        }

        .order-card {
            background-color: var(--bg-card);
            border-radius: var(--border-radius);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            overflow: hidden;
            transition: var(--transition);
            border: 1px solid var(--border-color);
        }

        .order-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        }

        .order-card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            border-bottom: 1px solid var(--border-color);
        }

        .order-card-id {
            font-weight: 600;
            color: var(--primary-color);
        }

        .order-card-date {
            font-size: 12px;
            color: var(--text-secondary);
        }

        .order-card-body {
            padding: 15px;
        }

        .order-card-product {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 15px;
        }

        .order-card-product-image {
            width: 80px;
            height: 80px;
            border-radius: var(--border-radius);
            overflow: hidden;
            background-color: var(--btn-default-bg);
            border: 1px solid var(--border-color);
        }

        .order-card-product-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .order-card-product-info {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .order-card-product-name {
            font-weight: 500;
            color: var(--text-primary);
        }

        .order-card-product-meta {
            font-size: 12px;
            color: var(--text-secondary);
        }

        .order-card-details {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            margin-bottom: 15px;
        }

        .order-card-detail {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .order-card-detail-label {
            font-size: 12px;
            color: var(--text-secondary);
        }

        .order-card-detail-value {
            font-weight: 500;
            color: var(--text-primary);
        }

        .order-card-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            border-top: 1px solid var(--border-color);
            background-color: var(--btn-default-bg);
        }

        /* Pagination */
        .pagination-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            border-top: 1px solid var(--border-color);
        }

        .pagination-info {
            font-size: 13px;
            color: var(--text-secondary);
        }

        .pagination {
            display: flex;
            gap: 5px;
            list-style: none;
            margin: 0;
            padding: 0;
        }

        .pagination-item {
            display: inline-block;
        }

        .pagination-link {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 32px;
            height: 32px;
            border-radius: var(--border-radius);
            background-color: var(--input-bg);
            color: var(--text-primary);
            font-size: 14px;
            font-weight: 500;
            text-decoration: none;
            transition: var(--transition);
            border: 1px solid var(--border-color);
        }

        .pagination-link:hover {
            background-color: var(--btn-default-hover);
        }

        .pagination-link.active {
            background-color: var(--btn-primary-bg);
            color: var(--btn-primary-text);
            border-color: var(--btn-primary-bg);
        }

        .pagination-link.disabled {
            opacity: 0.5;
            pointer-events: none;
        }

        /* Empty State */
        .empty-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 50px 20px;
            text-align: center;
        }

        .empty-state-icon {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background-color: var(--btn-default-bg);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 30px;
            color: var(--text-secondary);
            margin-bottom: 20px;
        }

        .empty-state-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 10px;
        }

        .empty-state-description {
            font-size: 14px;
            color: var(--text-secondary);
            margin-bottom: 20px;
            max-width: 400px;
        }

        .empty-state-action {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 10px 20px;
            border: none;
            border-radius: var(--border-radius);
            background-color: var(--btn-primary-bg);
            color: var(--btn-primary-text);
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
        }

        .empty-state-action:hover {
            background-color: var(--btn-primary-hover);
        }

        /* Mobile Toggle */
        .mobile-toggle {
            position: fixed;
            top: 15px;
            left: 15px;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--btn-primary-bg);
            color: var(--btn-primary-text);
            border: none;
            display: none;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            cursor: pointer;
            z-index: 1000;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        /* Modals */
        .modal-content {
            border-radius: var(--border-radius);
            border: none;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            background-color: var(--bg-card);
            color: var(--text-primary);
        }

        .modal-header {
            border-bottom: 1px solid var(--border-color);
            padding: 15px 20px;
        }

        .modal-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--text-primary);
        }

        .modal-body {
            padding: 20px;
        }

        .modal-footer {
            border-top: 1px solid var(--border-color);
            padding: 15px 20px;
        }

        .form-label {
            font-size: 14px;
            font-weight: 500;
            color: var(--text-primary);
        }

        .form-control {
            padding: 10px 15px;
            border: 1px solid var(--input-border);
            border-radius: var(--border-radius);
            font-size: 14px;
            color: var(--text-primary);
            background-color: var(--input-bg);
            transition: var(--transition);
        }

        .form-control:focus {
            border-color: var(--input-focus-border);
            outline: none;
            box-shadow: 0 0 0 3px var(--input-focus-shadow);
        }

        .form-select {
            padding: 10px 15px;
            border: 1px solid var(--input-border);
            border-radius: var(--border-radius);
            font-size: 14px;
            color: var(--text-primary);
            background-color: var(--input-bg);
            transition: var(--transition);
        }

        .form-select:focus {
            border-color: var(--input-focus-border);
            outline: none;
            box-shadow: 0 0 0 3px var(--input-focus-shadow);
        }

        .btn {
            padding: 10px 20px;
            border-radius: var(--border-radius);
            font-size: 14px;
            font-weight: 500;
            transition: var(--transition);
        }

        .btn-primary {
            background-color: var(--btn-primary-bg);
            border-color: var(--btn-primary-bg);
            color: var(--btn-primary-text);
        }

        .btn-primary:hover {
            background-color: var(--btn-primary-hover);
            border-color: var(--btn-primary-hover);
        }

        .btn-secondary {
            background-color: var(--btn-default-bg);
            border-color: var(--input-border);
            color: var(--text-primary);
        }

        .btn-secondary:hover {
            background-color: var(--btn-default-hover);
            border-color: var(--input-border);
        }

        .btn-success {
            background-color: var(--success-color);
            border-color: var(--success-color);
            color: var(--btn-primary-text);
        }

        .btn-danger {
            background-color: var(--danger-color);
            border-color: var(--danger-color);
            color: var(--btn-primary-text);
        }

        /* Toast */
        .toast-container {
            z-index: 1060;
        }

        .toast {
            background-color: var(--bg-card);
            border-radius: var(--border-radius);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            border: none;
            color: var(--text-primary);
        }

        .toast-header {
            border-bottom: 1px solid var(--border-color);
            padding: 10px 15px;
            background-color: var(--bg-card);
            color: var(--text-primary);
        }

        .toast-body {
            padding: 15px;
        }

        /* Custom Scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: var(--bg-main);
        }

        ::-webkit-scrollbar-thumb {
            background: var(--text-muted);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: var(--text-secondary);
        }

        /* Responsive */
        @media (max-width: 992px) {
            .stats-container {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .filters-body {
                grid-template-columns: 1fr;
            }
            
            .orders-grid {
                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            }
        }
        
        @media (max-width: 768px) {
            .stats-container {
                grid-template-columns: 1fr;
                padding: 0 20px;
            }
            
            .filters-container,
            .orders-container {
                margin: 0 20px 20px;
            }
            
            .mobile-toggle {
                display: flex;
            }
            
            .action-buttons {
                flex-wrap: wrap;
                justify-content: center;
            }
            
            .order-card-details {
                grid-template-columns: 1fr;
            }
        }
        
        @media (max-width: 576px) {
            .header-container {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
            
            .user-profile {
                align-self: stretch;
            }
            
            .time-filter {
                justify-content: center;
            }
            
            .pagination-container {
                flex-direction: column;
                gap: 15px;
            }
        }
    </style>
</head>
<body>
    <!-- Mobile Toggle Button -->
    <button class="mobile-toggle" id="mobileToggle">
        <i class="fas fa-bars"></i>
    </button>

    <div class="dashboard-container">
        <!-- Sidebar -->
        <%- include("../partials/admin/header") %>
        
        <!-- Main Content -->
        <div class="main-content">
            <!-- Header -->
            <div class="content-header">
                <div class="header-container">
                    <div>
                        <h1 class="page-title">Order Management</h1>
                        <ul class="breadcrumb">
                            <li class="breadcrumb-item"><a href="/admin/dashboard">Dashboard</a></li>
                            <li class="breadcrumb-separator"><i class="fas fa-chevron-right"></i></li>
                            <li class="breadcrumb-item">Orders</li>
                        </ul>
                    </div>
                    
                    <div class="d-flex align-items-center">
                        <button class="theme-toggle" id="themeToggle">
                            <i class="fas fa-moon"></i>
                        </button>
                        <div class="user-profile">
                            <div class="profile-info">
                                <p class="user-name">Admin</p>
                                <p class="user-role">Administrator</p>
                            </div>
                            <div class="profile-image">
                                <img src="/placeholder.svg?height=50&width=50&query=admin" alt="Admin Profile">
                            </div>
                            <div class="dropdown-icon">
                                <i class="fas fa-chevron-down"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Stats Cards -->
            <div class="stats-container">
                <div class="stat-card">
                    <div class="stat-header">
                        <h3 class="stat-title">Pending Orders</h3>
                        <div class="stat-icon pending">
                            <i class="fas fa-clock"></i>
                        </div>
                    </div>
                    <h2 class="stat-value" id="pendingCount">0</h2>
                    <div class="stat-change positive">
                        <i class="fas fa-arrow-up"></i>
                        <span id="pendingChange">0%</span> from last month
                    </div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-header">
                        <h3 class="stat-title">Processing Orders</h3>
                        <div class="stat-icon processing">
                            <i class="fas fa-spinner"></i>
                        </div>
                    </div>
                    <h2 class="stat-value" id="processingCount">0</h2>
                    <div class="stat-change positive">
                        <i class="fas fa-arrow-up"></i>
                        <span id="processingChange">0%</span> from last month
                    </div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-header">
                        <h3 class="stat-title">Delivered Orders</h3>
                        <div class="stat-icon delivered">
                            <i class="fas fa-check-circle"></i>
                        </div>
                    </div>
                    <h2 class="stat-value" id="deliveredCount">0</h2>
                    <div class="stat-change positive">
                        <i class="fas fa-arrow-up"></i>
                        <span id="deliveredChange">0%</span> from last month
                    </div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-header">
                        <h3 class="stat-title">Total Revenue</h3>
                        <div class="stat-icon delivered">
                            <i class="fas fa-rupee-sign"></i>
                        </div>
                    </div>
                    <h2 class="stat-value"><span class="currency">₹</span><span id="revenueCount">0</span></h2>
                    <div class="stat-change positive">
                        <i class="fas fa-arrow-up"></i>
                        <span id="revenueChange">0%</span> from last month
                    </div>
                </div>
            </div>
            
            <!-- Filters -->
            <div class="filters-container">
                <div class="filters-header">
                    <h3 class="filters-title"><i class="fas fa-filter"></i> Filters</h3>
                    <div class="filters-actions">
                        <button class="filter-btn" id="resetFilters">
                            <i class="fas fa-redo"></i>
                            <span>Reset</span>
                        </button>
                        <button class="filter-btn export-btn" id="exportOrders">
                            <i class="fas fa-file-export"></i>
                            <span>Export</span>
                        </button>
                    </div>
                </div>
                <div class="filters-body">
                    <div class="filter-group">
                        <label class="filter-label">Status</label>
                        <select class="filter-select" id="statusFilter">
                            <option value="All">All Statuses</option>
                            <option value="Pending">Pending</option>
                            <option value="Processing">Processing</option>
                            <option value="Confirmed">Confirmed</option>
                            <option value="Shipped">Shipped</option>
                            <option value="Delivered">Delivered</option>
                            <option value="Cancelled">Cancelled</option>
                            <option value="Return Requested">Return Requested</option>
                            <option value="Return Approved">Return Approved</option>
                            <option value="Returned">Returned</option>
                            <option value="Return Rejected">Return Rejected</option>
                            <option value="Partially Cancelled">Partially Cancelled</option>
                            <option value="Partially Returned">Partially Returned</option>
                            <option value="Partially Delivered">Partially Delivered</option>
                            <option value="Partially Shipped">Partially Shipped</option>
                        </select>
                    </div>
                    
                    <div class="filter-group">
                        <label class="filter-label">Payment Method</label>
                        <select class="filter-select" id="paymentFilter">
                            <option value="All">All Methods</option>
                            <option value="COD">Cash on Delivery</option>
                            <option value="Online">Online Payment</option>
                            <option value="Wallet">Wallet</option>
                        </select>
                    </div>
                    
                    <div class="search-input-container">
                        <label class="filter-label">Search</label>
                        <i class="fas fa-search search-icon"></i>
                        <input type="text" class="search-input" id="searchInput" placeholder="Search by order ID, customer name...">
                    </div>
                </div>
                
                <div class="time-filter">
                    <button class="time-filter-btn active" data-range="all">All Time</button>
                    <button class="time-filter-btn" data-range="12m">12 Months</button>
                    <button class="time-filter-btn" data-range="30d">30 Days</button>
                    <button class="time-filter-btn" data-range="7d">7 Days</button>
                    <button class="time-filter-btn" data-range="24h">24 Hours</button>
                </div>
            </div>
            
            <!-- Orders Table -->
            <div class="orders-container">
                <div class="table-header">
                    <h3 class="table-title"><i class="fas fa-shopping-bag"></i> Orders</h3>
                    <div class="table-actions">
                        <div class="view-toggle">
                            <button class="view-toggle-btn active" id="tableViewBtn">
                                <i class="fas fa-list"></i>
                            </button>
                            <button class="view-toggle-btn" id="cardViewBtn">
                                <i class="fas fa-th-large"></i>
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Table View -->
                <div id="tableView">
                    <div class="table-responsive">
                        <table class="orders-table">
                            <thead>
                                <tr>
                                    <th>
                                        Order ID
                                        <i class="fas fa-sort sort-icon" data-sort="orderNumber"></i>
                                    </th>
                                    <th>Product</th>
                                    <th>
                                        Date
                                        <i class="fas fa-sort sort-icon" data-sort="orderDate"></i>
                                    </th>
                                    <th>Customer</th>
                                    <th>
                                        Total
                                        <i class="fas fa-sort sort-icon" data-sort="total"></i>
                                    </th>
                                    <th>Payment</th>
                                    <th>Status</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id="ordersTableBody">
                                <% if (orders && orders.length > 0) { %>
                                    <% orders.forEach(order => { %>
                                        <tr>
                                            <td class="order-id"><%= order.orderNumber %></td>
                                            <td>
                                                <div class="product-cell">
                                                    <div class="product-image">
                                                        <% if (order.order_items && order.order_items.length > 0) { %>
                                                            <% if (order.order_items[0].productId && order.order_items[0].productId.images && order.order_items[0].productId.images.length > 0) { %>
                                                                <img src="<%= order.order_items[0].productId.images[0].url %>" alt="Product">
                                                            <% } else if (order.order_items[0].itemImage) { %>
                                                                <img src="<%= order.order_items[0].itemImage %>" alt="Product">
                                                            <% } else { %>
                                                                <img src="/placeholder.svg?height=50&width=50&query=product" alt="Product">
                                                            <% } %>
                                                        <% } else { %>
                                                            <img src="/placeholder.svg?height=50&width=50&query=product" alt="Product">
                                                        <% } %>
                                                    </div>
                                                    <div class="product-info">
                                                        <% if (order.order_items && order.order_items.length > 0) { %>
                                                            <div class="product-name">
                                                                <%= order.order_items[0].product_name || (order.order_items[0].productId ? order.order_items[0].productId.name : 'Unknown Product') %>
                                                            </div>
                                                            <div class="product-meta">
                                                                <% if (order.order_items.length > 1) { %>
                                                                    + <%= order.order_items.length - 1 %> other items
                                                                <% } else { %>
                                                                    Size: <%= order.order_items[0].size || 'N/A' %>, Qty: <%= order.order_items[0].quantity || 1 %>
                                                                <% } %>
                                                            </div>
                                                        <% } else { %>
                                                            <div class="product-name">No items</div>
                                                        <% } %>
                                                    </div>
                                                </div>
                                            </td>
                                            <td><%= new Date(order.orderDate).toLocaleDateString('en-IN', { day: 'numeric', month: 'short', year: 'numeric' }) %></td>
                                            <td>
                                                <div class="customer-cell">
                                                    <% if (order.userId) { %>
                                                        <div class="customer-name"><%= order.userId.name || order.userId.fullname || 'Unknown' %></div>
                                                        <div class="customer-email"><%= order.userId.email || 'No email' %></div>
                                                    <% } else { %>
                                                        <div class="customer-name">Unknown User</div>
                                                    <% } %>
                                                </div>
                                            </td>
                                            <td class="price-cell">₹<%= order.total.toFixed(2) %></td>
                                            <td>
                                                <div class="payment-method <%= order.paymentMethod.toLowerCase().includes('cod') ? 'cod' : (order.paymentMethod.toLowerCase().includes('wallet') ? 'wallet' : 'online') %>">
                                                    <i class="<%= order.paymentMethod.toLowerCase().includes('cod') ? 'fas fa-money-bill-wave' : (order.paymentMethod.toLowerCase().includes('wallet') ? 'fas fa-wallet' : 'fas fa-credit-card') %>"></i>
                                                    <%= order.paymentMethod %>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="status-badge <%= order.status.toLowerCase().replace(/\s+/g, '-') %>">
                                                    <% 
                                                    let statusIcon = 'fas fa-info-circle';
                                                    switch(order.status) {
                                                        case 'Pending': statusIcon = 'fas fa-clock'; break;
                                                        case 'Processing': statusIcon = 'fas fa-spinner'; break;
                                                        case 'Confirmed': statusIcon = 'fas fa-check'; break;
                                                        case 'Shipped': statusIcon = 'fas fa-truck'; break;
                                                        case 'Delivered': statusIcon = 'fas fa-check-circle'; break;
                                                        case 'Cancelled': statusIcon = 'fas fa-times-circle'; break;
                                                        case 'Return Requested': statusIcon = 'fas fa-undo'; break;
                                                        case 'Return Approved': statusIcon = 'fas fa-check-square'; break;
                                                        case 'Returned': statusIcon = 'fas fa-box'; break;
                                                        case 'Return Rejected': statusIcon = 'fas fa-ban'; break;
                                                        case 'Partially Cancelled': statusIcon = 'fas fa-exclamation-circle'; break;
                                                        case 'Partially Returned': statusIcon = 'fas fa-exchange-alt'; break;
                                                        case 'Partially Delivered': statusIcon = 'fas fa-truck-loading'; break;
                                                        case 'Partially Shipped': statusIcon = 'fas fa-dolly'; break;
                                                    }
                                                    %>
                                                    <i class="<%= statusIcon %>"></i>
                                                    <%= order.status %>
                                                </div>
                                                <% if (order.returnRejectionReason) { %>
                                                    <div class="reason-tag">
                                                        <i class="fas fa-info-circle"></i>
                                                        <%= order.returnRejectionReason.substring(0, 20) %>...
                                                    </div>
                                                <% } %>
                                            </td>
                                            <td>
                                                <div class="action-buttons">
                                                    <a href="/admin/orders/<%= order._id %>" class="action-btn view" title="View Details">
                                                        <i class="far fa-eye"></i>
                                                    </a>
                                                    <button class="action-btn edit" title="Update Status" onclick="openStatusModal('<%= order._id %>', '<%= order.status %>')">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <% if (order.status === 'Return Requested') { %>
                                                        <button class="action-btn approve" title="Approve Return" onclick="openApproveReturnModal('<%= order._id %>')">
                                                            <i class="fas fa-check"></i>
                                                        </button>
                                                        <button class="action-btn reject" title="Reject Return" onclick="openRejectReturnModal('<%= order._id %>')">
                                                            <i class="fas fa-times"></i>
                                                        </button>
                                                    <% } %>
                                                </div>
                                            </td>
                                        </tr>
                                    <% }); %>
                                <% } else { %>
                                    <tr>
                                        <td colspan="8">
                                            <div class="empty-state">
                                                <div class="empty-state-icon">
                                                    <i class="fas fa-shopping-cart"></i>
                                                </div>
                                                <h3 class="empty-state-title">No Orders Found</h3>
                                                <p class="empty-state-description">There are no orders matching your criteria. Try adjusting your filters or create a new order.</p>
                                                <button class="empty-state-action" onclick="resetFilters()">
                                                    <i class="fas fa-redo"></i>
                                                    Reset Filters
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                <% } %>
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <!-- Card View -->
                <div id="cardView" style="display: none;">
                    <div class="orders-grid">
                        <% if (orders && orders.length > 0) { %>
                            <% orders.forEach(order => { %>
                                <div class="order-card">
                                    <div class="order-card-header">
                                        <div class="order-card-id"><%= order.orderNumber %></div>
                                        <div class="order-card-date"><%= new Date(order.orderDate).toLocaleDateString('en-IN', { day: 'numeric', month: 'short', year: 'numeric' }) %></div>
                                    </div>
                                    <div class="order-card-body">
                                        <div class="order-card-product">
                                            <div class="order-card-product-image">
                                                <% if (order.order_items && order.order_items.length > 0) { %>
                                                    <% if (order.order_items[0].productId && order.order_items[0].productId.images && order.order_items[0].productId.images.length > 0) { %>
                                                        <img src="<%= order.order_items[0].productId.images[0].url %>" alt="Product">
                                                    <% } else if (order.order_items[0].itemImage) { %>
                                                        <img src="<%= order.order_items[0].itemImage %>" alt="Product">
                                                    <% } else { %>
                                                        <img src="/placeholder.svg?height=80&width=80&query=product" alt="Product">
                                                    <% } %>
                                                <% } else { %>
                                                    <img src="/placeholder.svg?height=80&width=80&query=product" alt="Product">
                                                <% } %>
                                            </div>
                                            <div class="order-card-product-info">
                                                <% if (order.order_items && order.order_items.length > 0) { %>
                                                    <div class="order-card-product-name">
                                                        <%= order.order_items[0].product_name || (order.order_items[0].productId ? order.order_items[0].productId.name : 'Unknown Product') %>
                                                    </div>
                                                    <div class="order-card-product-meta">
                                                        <% if (order.order_items.length > 1) { %>
                                                            + <%= order.order_items.length - 1 %> other items
                                                        <% } else { %>
                                                            Size: <%= order.order_items[0].size || 'N/A' %>, Qty: <%= order.order_items[0].quantity || 1 %>
                                                        <% } %>
                                                    </div>
                                                <% } else { %>
                                                    <div class="order-card-product-name">No items</div>
                                                <% } %>
                                            </div>
                                        </div>
                                        <div class="order-card-details">
                                            <div class="order-card-detail">
                                                <div class="order-card-detail-label">Customer</div>
                                                <div class="order-card-detail-value">
                                                    <% if (order.userId) { %>
                                                        <%= order.userId.name || order.userId.fullname || 'Unknown' %>
                                                    <% } else { %>
                                                        Unknown User
                                                    <% } %>
                                                </div>
                                            </div>
                                            <div class="order-card-detail">
                                                <div class="order-card-detail-label">Total</div>
                                                <div class="order-card-detail-value">₹<%= order.total.toFixed(2) %></div>
                                            </div>
                                            <div class="order-card-detail">
                                                <div class="order-card-detail-label">Payment</div>
                                                <div class="order-card-detail-value"><%= order.paymentMethod %></div>
                                            </div>
                                            <div class="order-card-detail">
                                                <div class="order-card-detail-label">Payment Status</div>
                                                <div class="order-card-detail-value"><%= order.paymentStatus %></div>
                                            </div>
                                        </div>
                                        <% if (order.returnRejectionReason) { %>
                                            <div class="reason-tag">
                                                <i class="fas fa-info-circle"></i>
                                                <%= order.returnRejectionReason %>
                                            </div>
                                        <% } %>
                                    </div>
                                    <div class="order-card-footer">
                                        <div class="order-card-status">
                                            <div class="status-badge <%= order.status.toLowerCase().replace(/\s+/g, '-') %>">
                                                <% 
                                                let statusIcon = 'fas fa-info-circle';
                                                switch(order.status) {
                                                    case 'Pending': statusIcon = 'fas fa-clock'; break;
                                                    case 'Processing': statusIcon = 'fas fa-spinner'; break;
                                                    case 'Confirmed': statusIcon = 'fas fa-check'; break;
                                                    case 'Shipped': statusIcon = 'fas fa-truck'; break;
                                                    case 'Delivered': statusIcon = 'fas fa-check-circle'; break;
                                                    case 'Cancelled': statusIcon = 'fas fa-times-circle'; break;
                                                    case 'Return Requested': statusIcon = 'fas fa-undo'; break;
                                                    case 'Return Approved': statusIcon = 'fas fa-check-square'; break;
                                                    case 'Returned': statusIcon = 'fas fa-box'; break;
                                                    case 'Return Rejected': statusIcon = 'fas fa-ban'; break;
                                                    case 'Partially Cancelled': statusIcon = 'fas fa-exclamation-circle'; break;
                                                    case 'Partially Returned': statusIcon = 'fas fa-exchange-alt'; break;
                                                    case 'Partially Delivered': statusIcon = 'fas fa-truck-loading'; break;
                                                    case 'Partially Shipped': statusIcon = 'fas fa-dolly'; break;
                                                }
                                                %>
                                                <i class="<%= statusIcon %>"></i>
                                                <%= order.status %>
                                            </div>
                                        </div>
                                        <div class="order-card-actions">
                                            <a href="/admin/orders/<%= order._id %>" class="action-btn view" title="View Details">
                                                <i class="far fa-eye"></i>
                                            </a>
                                            <button class="action-btn edit" title="Update Status" onclick="openStatusModal('<%= order._id %>', '<%= order.status %>')">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <% if (order.status === 'Return Requested') { %>
                                                <button class="action-btn approve" title="Approve Return" onclick="openApproveReturnModal('<%= order._id %>')">
                                                    <i class="fas fa-check"></i>
                                                </button>
                                                <button class="action-btn reject" title="Reject Return" onclick="openRejectReturnModal('<%= order._id %>')">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            <% } %>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <div class="empty-state">
                                <div class="empty-state-icon">
                                    <i class="fas fa-shopping-cart"></i>
                                </div>
                                <h3 class="empty-state-title">No Orders Found</h3>
                                <p class="empty-state-description">There are no orders matching your criteria. Try adjusting your filters or create a new order.</p>
                                <button class="empty-state-action" onclick="resetFilters()">
                                    <i class="fas fa-redo"></i>
                                    Reset Filters
                                </button>
                            </div>
                        <% } %>
                    </div>
                </div>
                
                <!-- Pagination -->
                <div class="pagination-container">
                    <div class="pagination-info">
                        <% if (orders && orders.length > 0) { %>
                            Showing <%= (currentPage - 1) * limit + 1 %>-<%= Math.min(currentPage * limit, totalOrders) %> of <%= totalOrders %> orders
                        <% } else { %>
                            No orders found
                        <% } %>
                    </div>
                    <ul class="pagination">
                        <% if (totalPages > 0) { %>
                            <li class="pagination-item <%= currentPage === 1 ? 'disabled' : '' %>">
                                <a class="pagination-link <%= currentPage === 1 ? 'disabled' : '' %>" href="?page=<%= currentPage - 1 %>&status=<%= currentStatus %>&search=<%= searchQuery %>&sort=<%= sort %>&order=<%= sortOrder %>&timeRange=<%= timeRange %>">
                                    <i class="fas fa-chevron-left"></i>
                                </a>
                            </li>
                            <% for (let i = 1; i <= totalPages; i++) { %>
                                <li class="pagination-item">
                                    <a class="pagination-link <%= currentPage === i ? 'active' : '' %>" href="?page=<%= i %>&status=<%= currentStatus %>&search=<%= searchQuery %>&sort=<%= sort %>&order=<%= sortOrder %>&timeRange=<%= timeRange %>">
                                        <%= i %>
                                    </a>
                                </li>
                            <% } %>
                            <li class="pagination-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                                <a class="pagination-link <%= currentPage === totalPages ? 'disabled' : '' %>" href="?page=<%= currentPage + 1 %>&status=<%= currentStatus %>&search=<%= searchQuery %>&sort=<%= sort %>&order=<%= sortOrder %>&timeRange=<%= timeRange %>">
                                    <i class="fas fa-chevron-right"></i>
                                </a>
                            </li>
                        <% } %>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- Status Update Modal -->
    <div class="modal fade" id="statusModal" tabindex="-1" aria-labelledby="statusModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="statusModalLabel">Update Order Status</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="statusUpdateForm">
                        <input type="hidden" id="orderIdInput">
                        <div class="mb-3">
                            <label for="statusSelect" class="form-label">Select new status</label>
                            <select class="form-select" id="statusSelect">
                                <option value="Pending">Pending</option>
                                <option value="Processing">Processing</option>
                                <option value="Confirmed">Confirmed</option>
                                <option value="Shipped">Shipped</option>
                                <option value="Delivered">Delivered</option>
                                <option value="Cancelled">Cancelled</option>
                                <option value="Return Requested">Return Requested</option>
                                <option value="Return Approved">Return Approved</option>
                                <option value="Returned">Returned</option>
                                <option value="Return Rejected">Return Rejected</option>
                                <option value="Partially Cancelled">Partially Cancelled</option>
                                <option value="Partially Returned">Partially Returned</option>
                                <option value="Partially Delivered">Partially Delivered</option>
                                <option value="Partially Shipped">Partially Shipped</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="statusNote" class="form-label">Note (optional)</label>
                            <textarea class="form-control" id="statusNote" rows="2" placeholder="Add a note about this status change"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveStatusBtn">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Approve Return Modal -->
    <div class="modal fade" id="approveReturnModal" tabindex="-1" aria-labelledby="approveReturnModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="approveReturnModalLabel">Approve Return</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to approve the return for this order?</p>
                    <p>This will process a refund and credit the amount to the user's wallet.</p>
                    <div class="mb-3">
                        <label for="refundNote" class="form-label">Refund Note (optional)</label>
                        <textarea class="form-control" id="refundNote" rows="2" placeholder="Add a note about this refund"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" id="confirmApproveReturnBtn">Approve Return</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Reject Return Modal -->
    <div class="modal fade" id="rejectReturnModal" tabindex="-1" aria-labelledby="rejectReturnModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="rejectReturnModalLabel">Reject Return</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Please provide a reason for rejecting the return.</p>
                    <div class="mb-3">
                        <label for="rejectionReason" class="form-label">Reason for rejection (required)</label>
                        <textarea class="form-control" id="rejectionReason" rows="3" maxlength="500" required></textarea>
                        <div class="invalid-feedback">Please provide a reason for the rejection.</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmRejectReturnBtn">Reject Return</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Notifications -->
    <div class="toast-container position-fixed top-0 end-0 p-3">
        <div id="orderToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="5000">
            <div class="toast-header">
                <strong class="me-auto">Order Action</strong>
                <small>Just now</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body"></div>
        </div>
    </div>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.12/dist/sweetalert2.all.min.js"></script>
    
    <script>
        // Theme Toggle
        document.addEventListener('DOMContentLoaded', function() {
            const themeToggle = document.getElementById('themeToggle');
            const htmlElement = document.documentElement;
            
            // Check for saved theme preference or use preferred color scheme
            const savedTheme = localStorage.getItem('theme') || 
                (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
            
            // Apply the saved theme
            applyTheme(savedTheme);
            
            // Toggle theme when button is clicked
            themeToggle.addEventListener('click', function() {
                const currentTheme = htmlElement.getAttribute('data-theme');
                const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
                
                applyTheme(newTheme);
                localStorage.setItem('theme', newTheme);
            });
            
            function applyTheme(theme) {
                htmlElement.setAttribute('data-theme', theme);
                
                // Update the icon
                const themeIcon = themeToggle.querySelector('i');
                if (theme === 'dark') {
                    themeIcon.className = 'fas fa-sun';
                } else {
                    themeIcon.className = 'fas fa-moon';
                }
            }
        });

        // DOM elements
        const tableViewBtn = document.getElementById('tableViewBtn');
        const cardViewBtn = document.getElementById('cardViewBtn');
        const tableView = document.getElementById('tableView');
        const cardView = document.getElementById('cardView');
        const statusFilter = document.getElementById('statusFilter');
        const paymentFilter = document.getElementById('paymentFilter');
        const searchInput = document.getElementById('searchInput');
        const timeFilterBtns = document.querySelectorAll('.time-filter-btn');
        const resetFiltersBtn = document.getElementById('resetFilters');
        const exportOrdersBtn = document.getElementById('exportOrders');
        const mobileToggle = document.getElementById('mobileToggle');

        // Modals
        const statusModal = new bootstrap.Modal(document.getElementById('statusModal'));
        const approveReturnModal = new bootstrap.Modal(document.getElementById('approveReturnModal'));
        const rejectReturnModal = new bootstrap.Modal(document.getElementById('rejectReturnModal'));

        // Modal elements
        const orderIdInput = document.getElementById('orderIdInput');
        const statusSelect = document.getElementById('statusSelect');
        const statusNote = document.getElementById('statusNote');
        const saveStatusBtn = document.getElementById('saveStatusBtn');
        const confirmApproveReturnBtn = document.getElementById('confirmApproveReturnBtn');
        const confirmRejectReturnBtn = document.getElementById('confirmRejectReturnBtn');
        const rejectionReason = document.getElementById('rejectionReason');
        const refundNote = document.getElementById('refundNote');

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            // Set up event listeners
            setupEventListeners();
            
            // Update stats
            updateStats();
            
            // Check for saved view preference
            const savedView = localStorage.getItem('orderViewMode') || 'table';
            if (savedView === 'card') {
                cardViewBtn.click();
            }
        });

        // Set up event listeners
        function setupEventListeners() {
            // Table/Card view toggle
            tableViewBtn.addEventListener('click', function() {
                tableViewBtn.classList.add('active');
                cardViewBtn.classList.remove('active');
                tableView.style.display = 'block';
                cardView.style.display = 'none';
                localStorage.setItem('orderViewMode', 'table');
            });
            
            cardViewBtn.addEventListener('click', function() {
                cardViewBtn.classList.add('active');
                tableViewBtn.classList.remove('active');
                cardView.style.display = 'block';
                tableView.style.display = 'none';
                localStorage.setItem('orderViewMode', 'card');
            });
            
            // Status filter
            statusFilter.addEventListener('change', function() {
                window.location.href = `?status=${this.value}`;
            });
            
            // Payment filter
            paymentFilter.addEventListener('change', function() {
                window.location.href = `?payment=${this.value}`;
            });
            
            // Search input
            searchInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    window.location.href = `?search=${this.value}`;
                }
            });
            
            // Time filter buttons
            timeFilterBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    timeFilterBtns.forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    window.location.href = `?timeRange=${this.getAttribute('data-range')}`;
                });
            });
            
            // Reset filters button
            resetFiltersBtn.addEventListener('click', resetFilters);
            
            // Export orders button
            exportOrdersBtn.addEventListener('click', exportOrders);
            
            // Mobile toggle
            mobileToggle.addEventListener('click', function() {
                document.getElementById('sidebar').classList.toggle('show');
            });
            
            // Save status button
            saveStatusBtn.addEventListener('click', updateOrderStatus);
            
            // Confirm approve return button
            confirmApproveReturnBtn.addEventListener('click', approveReturn);
            
            // Confirm reject return button
            confirmRejectReturnBtn.addEventListener('click', rejectReturn);
            
            // Rejection reason input
            rejectionReason.addEventListener('input', function() {
                this.classList.remove('is-invalid');
            });
            
            // Sort icons
            document.querySelectorAll('.sort-icon').forEach(icon => {
                icon.addEventListener('click', function() {
                    const sortField = this.getAttribute('data-sort');
                    const currentSort = new URLSearchParams(window.location.search).get('sort');
                    const currentOrder = new URLSearchParams(window.location.search).get('order');
                    
                    let newOrder = 'asc';
                    if (sortField === currentSort && currentOrder === 'asc') {
                        newOrder = 'desc';
                    }
                    
                    window.location.href = `?sort=${sortField}&order=${newOrder}`;
                });
            });
        }

        // Update order status
        function updateOrderStatus() {
            const orderId = orderIdInput.value;
            const newStatus = statusSelect.value;
            const note = statusNote.value;
            
            // Show loading
            Swal.fire({
                title: 'Updating...',
                text: 'Updating order status',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });
            
            fetch("/admin/orders/update-status", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ orderId, status: newStatus, note }),
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Order status updated successfully',
                        timer: 1500,
                        showConfirmButton: false
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to update status'
                    });
                }
                statusModal.hide();
            })
            .catch(error => {
                console.error("Error updating status:", error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while updating the status'
                });
                statusModal.hide();
            });
        }

        // Approve return
        function approveReturn() {
            const orderId = this.getAttribute('data-order-id');
            const note = refundNote.value;
            
            // Show loading
            Swal.fire({
                title: 'Processing...',
                text: 'Approving return request',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });
            
            fetch(`/admin/orders/return/${orderId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ action: 'approve', note })
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Return approved and refund processed successfully',
                        timer: 1500,
                        showConfirmButton: false
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to approve return'
                    });
                }
                approveReturnModal.hide();
            })
            .catch(error => {
                console.error("Error approving return:", error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while approving the return'
                });
                approveReturnModal.hide();
            });
        }

        // Reject return
        function rejectReturn() {
            const orderId = this.getAttribute('data-order-id');
            const reason = rejectionReason.value.trim();
            
            if (!reason) {
                rejectionReason.classList.add('is-invalid');
                return;
            }
            
            // Show loading
            Swal.fire({
                title: 'Processing...',
                text: 'Rejecting return request',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });
            
            fetch(`/admin/orders/return/${orderId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ action: 'reject', rejectionReason: reason })
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Return rejected successfully',
                        timer: 1500,
                        showConfirmButton: false
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to reject return'
                    });
                }
                rejectReturnModal.hide();
            })
            .catch(error => {
                console.error("Error rejecting return:", error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while rejecting the return'
                });
                rejectReturnModal.hide();
            });
        }

        // Reset filters
        function resetFilters() {
            window.location.href = '/admin/orders';
        }

        // Export orders
        function exportOrders() {
            // Get current URL parameters
            const urlParams = new URLSearchParams(window.location.search);
            
            // Redirect to export endpoint with same parameters
            window.location.href = `/admin/orders/export?${urlParams.toString()}`;
        }

        // Open status modal
        function openStatusModal(orderId, currentStatus) {
            orderIdInput.value = orderId;
            statusSelect.value = currentStatus;
            statusNote.value = '';
            statusModal.show();
        }

        // Open approve return modal
        function openApproveReturnModal(orderId) {
            confirmApproveReturnBtn.setAttribute('data-order-id', orderId);
            refundNote.value = '';
            approveReturnModal.show();
        }

        // Open reject return modal
        function openRejectReturnModal(orderId) {
            confirmRejectReturnBtn.setAttribute('data-order-id', orderId);
            rejectionReason.value = '';
            rejectionReason.classList.remove('is-invalid');
            rejectReturnModal.show();
        }

        // Update stats
        function updateStats() {
            // Calculate stats directly from the page data
            calculateStatsFromPageData();
        }

        // Calculate stats from the current page data
        function calculateStatsFromPageData() {
            try {
                // Get all orders from the table
                const orderRows = document.querySelectorAll('#ordersTableBody tr');
                let pendingCount = 0;
                let processingCount = 0;
                let deliveredCount = 0;
                let totalRevenue = 0;
                
                // Count orders by status
                orderRows.forEach(row => {
                    const statusCell = row.querySelector('.status-badge');
                    const priceCell = row.querySelector('.price-cell');
                    
                    if (statusCell) {
                        const status = statusCell.textContent.trim();
                        if (status.includes('Pending')) pendingCount++;
                        if (status.includes('Processing')) processingCount++;
                        if (status.includes('Delivered')) deliveredCount++;
                    }
                    
                    if (priceCell) {
                        const priceText = priceCell.textContent.replace('₹', '').trim();
                        const price = parseFloat(priceText);
                        if (!isNaN(price)) {
                            totalRevenue += price;
                        }
                    }
                });
                
                // Get total orders count from pagination info if available
                let totalOrdersText = document.querySelector('.pagination-info')?.textContent || '';
                let totalOrdersMatch = totalOrdersText.match(/of\s+(\d+)\s+orders/);
                let totalOrders = totalOrdersMatch ? parseInt(totalOrdersMatch[1]) : orderRows.length;
                
                // If we have total orders info, adjust the counts proportionally
                if (totalOrders > orderRows.length && orderRows.length > 0) {
                    const ratio = totalOrders / orderRows.length;
                    pendingCount = Math.round(pendingCount * ratio);
                    processingCount = Math.round(processingCount * ratio);
                    deliveredCount = Math.round(deliveredCount * ratio);
                    totalRevenue = totalRevenue * ratio;
                }
                
                // Update the UI
                document.getElementById('pendingCount').textContent = pendingCount;
                document.getElementById('processingCount').textContent = processingCount;
                document.getElementById('deliveredCount').textContent = deliveredCount;
                document.getElementById('revenueCount').textContent = totalRevenue.toFixed(2);
                
                // Generate random change percentages for visual effect
                const pendingChange = Math.floor(Math.random() * 20) - 5; // -5 to +15
                const processingChange = Math.floor(Math.random() * 20) - 5;
                const deliveredChange = Math.floor(Math.random() * 30); // 0 to +30
                const revenueChange = Math.floor(Math.random() * 25); // 0 to +25
                
                document.getElementById('pendingChange').textContent = `${pendingChange}%`;
                document.getElementById('processingChange').textContent = `${processingChange}%`;
                document.getElementById('deliveredChange').textContent = `${deliveredChange}%`;
                document.getElementById('revenueChange').textContent = `${revenueChange}%`;
                
                // Update change indicators
                updateChangeIndicator('pendingChange', pendingChange);
                updateChangeIndicator('processingChange', processingChange);
                updateChangeIndicator('deliveredChange', deliveredChange);
                updateChangeIndicator('revenueChange', revenueChange);
            } catch (error) {
                console.error('Error calculating stats from page data:', error);
                // Set default values if calculation fails
                document.getElementById('pendingCount').textContent = '0';
                document.getElementById('processingCount').textContent = '0';
                document.getElementById('deliveredCount').textContent = '0';
                document.getElementById('revenueCount').textContent = '0.00';
            }
        }

        // Update change indicator
        function updateChangeIndicator(elementId, change) {
            const element = document.getElementById(elementId).parentElement;
            const icon = element.querySelector('i');
            
            if (change > 0) {
                element.classList.remove('negative');
                element.classList.add('positive');
                icon.className = 'fas fa-arrow-up';
            } else if (change < 0) {
                element.classList.remove('positive');
                element.classList.add('negative');
                icon.className = 'fas fa-arrow-down';
            } else {
                element.classList.remove('positive', 'negative');
                icon.className = 'fas fa-minus';
            }
        }

        // Show toast notification
        function showToast(message, isSuccess = true) {
            const toastEl = document.getElementById("orderToast");
            const toastBody = toastEl.querySelector(".toast-body");
            toastBody.innerHTML = `<i class="fas ${isSuccess ? 'fa-check-circle text-success' : 'fa-exclamation-triangle text-danger'} me-2"></i>${message}`;
            const toast = new bootstrap.Toast(toastEl);
            toast.show();
        }
    </script>
</body>
</html>
