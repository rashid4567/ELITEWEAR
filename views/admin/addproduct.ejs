<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Product - Admin Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="/adminStyle/addProduct.css">
</head>
<body class="bg-gray-50 p-6">
    <div class="max-w-4xl mx-auto bg-white shadow-md rounded-lg p-8">
        <% if (typeof error !== 'undefined') { %>
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
                <span class="block sm:inline"><%= error %></span>
            </div>
        <% } %>

        <% if (typeof success !== 'undefined') { %>
            <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
                <span class="block sm:inline"><%= success %></span>
            </div>
        <% } %>

        <form id="productForm" method="post" action="/admin/addproduct" enctype="multipart/form-data">
  
            <div class="mb-6">
                <h2 class="text-xl font-semibold mb-4">General Information</h2>
                <div class="grid grid-cols-2 gap-4">
                    <div class="relative">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Product Name</label>
                        <input type="text" name="productName" id="productName" class="form-input w-full border rounded px-3 py-2" placeholder="Enter product name" value="<%= typeof productName !== 'undefined' ? productName : '' %>" required>
                        <p class="error-message text-red-500 text-xs mt-1 hidden">Product name is required</p>
                    </div>
                    <div class="relative">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Price (₹)</label>
                        <input type="number" name="productPrice" id="productPrice" class="form-input w-full border rounded px-3 py-2" placeholder="Enter price" min="0" step="0.01" value="<%= typeof productPrice !== 'undefined' ? productPrice : '' %>" required>
                        <p class="error-message text-red-500 text-xs mt-1 hidden">Price is required</p>
                    </div>
                </div>
                <div class="mt-4 relative">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Product Description</label>
                    <textarea name="productDescription" class="form-input w-full border rounded px-3 py-2" rows="4" placeholder="Enter product description" required><%= typeof productDescription !== 'undefined' ? productDescription : '' %></textarea>
                    <p class="error-message text-red-500 text-xs mt-1 hidden">Description is required</p>
                </div>
            </div>

            <div class="mb-6">
                <h2 class="text-xl font-semibold mb-4">Product Images</h2>
                <div class="grid grid-cols-3 gap-4">
                    <div class="col-span-2 relative">
                        <div class="upload-zone h-64 border-2 border-dashed border-gray-300 flex flex-col items-center justify-center cursor-pointer relative" data-name="mainImage">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                            <p class="text-gray-500">Drag and drop main product image or click to upload</p>
                            <input type="file" name="mainImage" class="hidden" accept="image/*" required>
                        </div>
                        <p class="error-message text-red-500 text-xs mt-1 hidden">Main image is required</p>
                    </div>
                    <div class="grid grid-rows-3 gap-4">
                        <div class="upload-zone h-20 border-2 border-dashed border-gray-300 flex flex-col items-center justify-center cursor-pointer relative" data-name="additionalImage1">
                            <p class="text-gray-500 text-sm">Additional Image 1</p>
                            <input type="file" name="additionalImage1" class="hidden" accept="image/*">
                        </div>
                        <div class="upload-zone h-20 border-2 border-dashed border-gray-300 flex flex-col items-center justify-center cursor-pointer relative" data-name="additionalImage2">
                            <p class="text-gray-500 text-sm">Additional Image 2</p>
                            <input type="file" name="additionalImage2" class="hidden" accept="image/*">
                        </div>
                        <div class="upload-zone h-20 border-2 border-dashed border-gray-300 flex flex-col items-center justify-center cursor-pointer relative" data-name="additionalImage3">
                            <p class="text-gray-500 text-sm">Additional Image 3</p>
                            <input type="file" name="additionalImage3" class="hidden" accept="image/*">
                        </div>
                    </div>
                </div>
            </div>

            <div class="mb-6">
                <h2 class="text-xl font-semibold mb-4">Product Options</h2>
                <div class="grid grid-cols-3 gap-4">
                    <div class="relative">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Category</label>
                        <select name="productCategory" class="form-input w-full border rounded px-3 py-2" required>
                            <option value="">Select Category</option>
                            <% if (typeof categories !== 'undefined' && categories.length > 0) { %>
                                <% categories.forEach(category => { %>
                                    <option value="<%= category.name %>" <%= typeof productCategory !== 'undefined' && productCategory === category.name ? 'selected' : '' %>><%= category.name %></option>
                                <% }); %>
                            <% } else { %>
                                <option value="" disabled>No categories available</option>
                            <% } %>
                        </select>
                        <p class="error-message text-red-500 text-xs mt-1 hidden">Category is required</p>
                    </div>
                </div>
            </div>

            <div class="mb-6">
                <h2 class="text-xl font-semibold mb-4">Product Variants</h2>
                <div class="mb-4 flex flex-wrap gap-2">
                    <button type="button" class="size-btn px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200" data-size="S">Add Size S</button>
                    <button type="button" class="size-btn px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200" data-size="M">Add Size M</button>
                    <button type="button" class="size-btn px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200" data-size="L">Add Size L</button>
                    <button type="button" class="size-btn px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200" data-size="XL">Add Size XL</button>
                    <button type="button" class="size-btn px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200" data-size="XXL">Add Size XXL</button>
                </div>
                <div id="variantContainer" class="space-y-4">
                    <% if (typeof variants !== 'undefined' && variants.length > 0) { %>
                        <% variants.forEach((variant, index) => { %>
                            <div class="variant-row flex space-x-4 items-start">
                                <div class="flex-1 relative">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Size</label>
                                    <input type="text" name="variants[<%= index %>][size]" value="<%= variant.size %>" class="form-input w-full border rounded px-3 py-2" placeholder="e.g., S, M, L" readonly>
                                    <p class="error-message text-red-500 text-xs mt-1 hidden">Size is required</p>
                                </div>
                                <div class="flex-1 relative">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Price (₹)</label>
                                    <input type="number" name="variants[<%= index %>][varientPrice]" value="<%= variant.varientPrice %>" class="form-input w-full border rounded px-3 py-2" placeholder="Enter price" min="0" step="0.01">
                                    <p class="error-message text-red-500 text-xs mt-1 hidden">Price is required</p>
                                </div>
                                <div class="flex-1 relative">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Stock</label>
                                    <input type="number" name="variants[<%= index %>][varientquatity]" value="<%= variant.varientquatity %>" class="form-input w-full border rounded px-3 py-2" placeholder="Enter stock" min="0">
                                    <p class="error-message text-red-500 text-xs mt-1 hidden">Stock is required</p>
                                </div>
                                <button type="button" class="remove-variant px-3 py-2 bg-red-500 text-white rounded-lg mt-6">Remove</button>
                            </div>
                        <% }); %>
                    <% } %>
                </div>
            </div>

        
            <div class="mb-6">
                <h2 class="text-xl font-semibold mb-4">Product Specifications</h2>
                <div class="grid grid-cols-2 gap-4">
                    <div class="relative">
                        <label class="block text-sm font-medium text-gray-700 mb-2">SKU</label>
                        <input type="text" name="sku" class="form-input w-full border rounded px-3 py-2" placeholder="Enter SKU" value="<%= typeof sku !== 'undefined' ? sku : '' %>">
                    </div>
                    <div class="relative">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Brand</label>
                        <input type="text" name="brand" class="form-input w-full border rounded px-3 py-2" placeholder="Enter brand" value="<%= typeof brand !== 'undefined' ? brand : '' %>">
                    </div>
                    <div class="relative">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Color</label>
                        <input type="text" name="color" class="form-input w-full border rounded px-3 py-2" placeholder="Enter color" value="<%= typeof color !== 'undefined' ? color : '' %>" required>
                        <p class="error-message text-red-500 text-xs mt-1 hidden">Color is required</p>
                    </div>
                    <div class="relative">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Fabric</label>
                        <input type="text" name="fabric" class="form-input w-full border rounded px-3 py-2" placeholder="Enter fabric type" value="<%= typeof fabric !== 'undefined' ? fabric : '' %>" required>
                        <p class="error-message text-red-500 text-xs mt-1 hidden">Fabric is required</p>
                    </div>
                    <div class="relative">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Product Offer (%)</label>
                        <input type="number" name="productOffer" class="form-input w-full border rounded px-3 py-2" placeholder="Enter offer percentage" min="0" max="100" value="<%= typeof productOffer !== 'undefined' ? productOffer : '' %>">
                    </div>
                </div>
            </div>

            <div class="flex justify-end space-x-4">
                <button type="button" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg" onclick="window.location.href='/admin/productManagment'">Cancel</button>
                <button type="button" id="submitBtn" class="px-4 py-2 bg-black text-white rounded-lg">Add Product</button>
            </div>
        </form>
    </div>

    <div id="cropModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center">
        <div class="bg-white p-6 rounded-lg max-w-4xl w-full">
            <img id="imageToCrop" class="max-w-full max-h-[80vh]">
            <div class="mt-6 flex justify-end space-x-4">
                <button id="cancelCrop" class="px-5 py-3 bg-gray-300 rounded-lg">Cancel</button>
                <button id="cropImage" class="px-5 py-3 bg-black text-white rounded-lg">Crop & Upload</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const uploadZones = document.querySelectorAll('.upload-zone');
            const cropModal = document.getElementById('cropModal');
            const imageToCrop = document.getElementById('imageToCrop');
            const cancelCrop = document.getElementById('cancelCrop');
            const cropImage = document.getElementById('cropImage');
            const productForm = document.getElementById('productForm');
            const submitBtn = document.getElementById('submitBtn');
            const variantContainer = document.getElementById('variantContainer');
            const sizeButtons = document.querySelectorAll('.size-btn');
            let cropper;
            let currentFileInput;
            let variantCount = <%= typeof variants !== 'undefined' && variants.length > 0 ? variants.length : 0 %>;
            const uploadedFiles = new Set();
            const addedSizes = new Set();


            <% if (typeof variants !== 'undefined' && variants.length > 0) { %>
                <% variants.forEach(variant => { %>
                    addedSizes.add('<%= variant.size %>');
                <% }); %>
            <% } %>

            const debounce = (func, delay) => {
                let timeoutId;
                return (...args) => {
                    clearTimeout(timeoutId);
                    timeoutId = setTimeout(() => func.apply(null, args), delay);
                };
            };

            function showError(input, messageElement, message) {
                messageElement.textContent = message;
                messageElement.classList.remove('hidden');
                input.classList.add('border-red-500');
                input.classList.remove('border-green-500');
            }

            function hideError(input, messageElement) {
                messageElement.classList.add('hidden');
                input.classList.remove('border-red-500');
                input.classList.add('border-green-500');
            }

            function validateField(input) {
                const value = input.value.trim();
                const errorElement = input.nextElementSibling;
                if (!value) {
                    showError(input, errorElement, `${input.name.replace(/\[.*\]/, '').replace(/([A-Z])/g, ' $1').trim()} is required`);
                    return false;
                } else if (input.type === 'number' && input.name !== 'productOffer') {
                    if (Number(value) < 0) {
                        showError(input, errorElement, `${input.name.replace(/\[.*\]/, '').replace(/([A-Z])/g, ' $1').trim()} must be positive`);
                        return false;
                    }
                }
                hideError(input, errorElement);
                return true;
            }

    
            const inputs = productForm.querySelectorAll('input[required], textarea[required], select[required]');
            inputs.forEach(input => {
                input.addEventListener('input', debounce(() => validateField(input), 300));
                input.addEventListener('blur', () => validateField(input));
            });

            const mainImageInput = document.querySelector('input[name="mainImage"]');
            const mainImageZone = mainImageInput.closest('.upload-zone');
            const mainImageError = mainImageZone.nextElementSibling;

            function validateForm() {
                let isValid = true;
                inputs.forEach(input => {
                    if (!validateField(input)) isValid = false;
                });

                if (!mainImageInput.files.length) {
                    showError(mainImageZone, mainImageError, 'Main image is required');
                    isValid = false;
                } else {
                    hideError(mainImageZone, mainImageError);
                }

                const variantRows = variantContainer.querySelectorAll('.variant-row');
                if (variantRows.length === 0) {
                    showTemporaryMessage('Please add at least one variant');
                    isValid = false;
                } else {
                    variantRows.forEach(row => {
                        const variantInputs = row.querySelectorAll('input');
                        variantInputs.forEach(input => {
                            if (!validateField(input)) isValid = false;
                        });
                    });
                }

                if (!isValid) scrollToFirstError();
                return isValid;
            }

            function showTemporaryMessage(message, bgColor = 'bg-red-500') {
                const msg = document.createElement('div');
                msg.className = `fixed top-4 right-4 ${bgColor} text-white px-6 py-3 rounded shadow-lg z-50 animate-fade-in`;
                msg.textContent = message;
                document.body.appendChild(msg);
                setTimeout(() => msg.classList.add('opacity-0'), 2000);
                setTimeout(() => msg.remove(), 2500);
            }

            function scrollToFirstError() {
                const firstError = document.querySelector('.error-message:not(.hidden)');
                if (firstError) firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }

            uploadZones.forEach(zone => {
                const fileInput = zone.querySelector('input[type="file"]');
                const clearBtn = document.createElement('button');
                clearBtn.innerHTML = '×';
                clearBtn.className = 'absolute top-1 right-1 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center hidden';
                clearBtn.type = 'button';
                zone.appendChild(clearBtn);

                zone.addEventListener('click', (e) => {
                    if (e.target !== clearBtn) fileInput.click();
                });

                fileInput.addEventListener('change', (e) => {
                    const file = e.target.files[0];
                    if (!file) return;

                    const fileHash = `${file.name}-${file.size}`;
                    if (uploadedFiles.has(fileHash)) {
                        showTemporaryMessage('This image is already uploaded');
                        fileInput.value = '';
                        return;
                    }

                    if (!file.type.startsWith('image/')) {
                        showTemporaryMessage('Please upload a valid image');
                        fileInput.value = '';
                        return;
                    }
                    if (file.size > 5 * 1024 * 1024) {
                        showTemporaryMessage('File size must be under 5MB');
                        fileInput.value = '';
                        return;
                    }

                    uploadedFiles.add(fileHash);
                    currentFileInput = fileInput;
                    const reader = new FileReader();
                    reader.onload = (event) => {
                        imageToCrop.src = event.target.result;
                        cropModal.classList.remove('hidden');
                        if (cropper) cropper.destroy();
                        cropper = new Cropper(imageToCrop, {
                            aspectRatio: 1,
                            viewMode: 1,
                            autoCropArea: 0.8,
                            responsive: true
                        });
                    };
                    reader.readAsDataURL(file);
                });

                clearBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    const file = fileInput.files[0];
                    if (file) uploadedFiles.delete(`${file.name}-${file.size}`);
                    fileInput.value = '';
                    zone.style.backgroundImage = '';
                    zone.querySelector('p').style.display = 'block';
                    clearBtn.classList.add('hidden');
                    if (fileInput.name === 'mainImage') showError(mainImageZone, mainImageError, 'Main image is required');
                });
            });

            cancelCrop.addEventListener('click', () => {
                cropModal.classList.add('hidden');
                const file = currentFileInput.files[0];
                if (file) uploadedFiles.delete(`${file.name}-${file.size}`);
                currentFileInput.value = '';
                if (cropper) cropper.destroy();
                if (currentFileInput.name === 'mainImage') showError(mainImageZone, mainImageError, 'Main image is required');
            });

            cropImage.addEventListener('click', () => {
                cropper.getCroppedCanvas({
                    width: 2000,
                    height: 2000
                }).toBlob((blob) => {
                    const originalFile = currentFileInput.files[0];
                    const file = new File([blob], originalFile.name, { type: 'image/webp' });
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(file);
                    currentFileInput.files = dataTransfer.files;

                    const reader = new FileReader();
                    reader.onload = (e) => {
                        const zone = currentFileInput.closest('.upload-zone');
                        zone.style.backgroundImage = `url(${e.target.result})`;
                        zone.style.backgroundSize = 'cover';
                        zone.style.backgroundPosition = 'center';
                        zone.querySelector('p').style.display = 'none';
                        zone.querySelector('button').classList.remove('hidden');
                        if (currentFileInput.name === 'mainImage') hideError(mainImageZone, mainImageError);
                    };
                    reader.readAsDataURL(file);

                    cropModal.classList.add('hidden');
                    cropper.destroy();
                }, 'image/webp', 0.8);
            });

          
            function addVariantRow(size, price = '', stock = '') {
                if (addedSizes.has(size)) {
                    showTemporaryMessage(`Size ${size} already added`, 'bg-yellow-500');
                    return false;
                }

                addedSizes.add(size);
                updateSizeButtons();

                const variantDiv = document.createElement('div');
                variantDiv.className = 'variant-row flex space-x-4 items-start animate-slide-in';
                variantDiv.dataset.size = size;
                variantDiv.innerHTML = `
                    <div class="flex-1 relative">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Size</label>
                        <input type="text" name="variants[${variantCount}][size]" value="${size}" class="form-input w-full border rounded px-3 py-2 bg-gray-100" readonly>
                        <p class="error-message text-red-500 text-xs mt-1 hidden">Size is required</p>
                    </div>
                    <div class="flex-1 relative">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Price (₹)</label>
                        <input type="number" name="variants[${variantCount}][varientPrice]" value="${price}" class="form-input w-full border rounded px-3 py-2" placeholder="Enter price" min="0" step="0.01">
                        <p class="error-message text-red-500 text-xs mt-1 hidden">Price is required</p>
                    </div>
                    <div class="flex-1 relative">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Stock</label>
                        <input type="number" name="variants[${variantCount}][varientquatity]" value="${stock}" class="form-input w-full border rounded px-3 py-2" placeholder="Enter stock" min="0">
                        <p class="error-message text-red-500 text-xs mt-1 hidden">Stock is required</p>
                    </div>
                    <button type="button" class="remove-variant px-3 py-2 bg-red-500 text-white rounded-lg mt-6">Remove</button>
                `;
                variantContainer.appendChild(variantDiv);

                const variantInputs = variantDiv.querySelectorAll('input');
                variantInputs.forEach(input => {
                    input.addEventListener('input', debounce(() => validateField(input), 300));
                    input.addEventListener('blur', () => validateField(input));
                });

                variantDiv.querySelector('.remove-variant').addEventListener('click', () => {
                    const sizeToRemove = variantDiv.dataset.size;
                    addedSizes.delete(sizeToRemove);
                    updateSizeButtons();
                    
                    variantDiv.classList.add('animate-slide-out');
                    setTimeout(() => variantDiv.remove(), 300);
                    setTimeout(() => {
                        if (!variantContainer.querySelectorAll('.variant-row').length) {
                            showTemporaryMessage('Please add at least one variant');
                        }
                    }, 310);
                });

                variantCount++;
                return true;
            }

            function updateSizeButtons() {
                sizeButtons.forEach(btn => {
                    const size = btn.dataset.size;
                    if (addedSizes.has(size)) {
                        btn.classList.add('bg-gray-200', 'text-gray-500', 'cursor-not-allowed');
                        btn.classList.remove('bg-blue-100', 'text-blue-700', 'hover:bg-blue-200');
                    } else {
                        btn.classList.remove('bg-gray-200', 'text-gray-500', 'cursor-not-allowed');
                        btn.classList.add('bg-blue-100', 'text-blue-700', 'hover:bg-blue-200');
                    }
                });
            }

           
            updateSizeButtons();

          
            sizeButtons.forEach(btn => {
                btn.addEventListener('click', () => {
                    const size = btn.dataset.size;
                    if (!addedSizes.has(size)) {
                        addVariantRow(size);
                    }
                });
            });

            submitBtn.addEventListener('click', async (e) => {
                e.preventDefault();
                submitBtn.disabled = true;
                submitBtn.classList.add('opacity-50', 'cursor-not-allowed');

                if (validateForm()) {
                    try {
                        const formData = new FormData(productForm);
                        const response = await fetch(productForm.action, {
                            method: 'POST',
                            body: formData,
                        });

                        if (response.ok) {
                            showTemporaryMessage('Product added successfully! Redirecting...', 'bg-green-500');
                            setTimeout(() => window.location.href = '/admin/productManagment', 1500);
                        } else {
                            const errorData = await response.json();
                            showTemporaryMessage(`Error: ${errorData.message || 'Unknown error'}`, 'bg-red-500');
                        }
                    } catch (error) {
                        showTemporaryMessage(`Error: ${error.message}`, 'bg-red-500');
                    }
                }

                setTimeout(() => {
                    submitBtn.disabled = false;
                    submitBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                }, 1000);
            });

            const style = document.createElement('style');
            style.textContent = `
                .animate-fade-in { animation: fadeIn 0.3s ease-in forwards; }
                .animate-slide-in { animation: slideIn 0.3s ease-out forwards; }
                .animate-slide-out { animation: slideOut 0.3s ease-in forwards; }
                @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
                @keyframes slideIn { from { transform: translateY(20px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }
                @keyframes slideOut { from { transform: translateY(0); opacity: 1; } to { transform: translateY(-20px); opacity: 0; } }
            `;
            document.head.appendChild(style);
        });
    </script>
</body>
</html>