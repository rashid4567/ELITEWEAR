<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Product | Admin Dashboard</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <!-- Cropper.js -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
    <!-- Custom CSS -->
  <link rel="stylesheet" href="/adminStyle/addProduct.css">
</head>
<body>
<div class="container py-5">
    <div class="form-container p-4 p-md-5">
        <div class="form-header mb-4">
            <h1 class="h3 fw-bold">Add New Product</h1>
            <p class="text-muted">Fill in the details to add a new product to your inventory</p>
        </div>

        <% if (typeof error !== 'undefined' && error) { %>
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="fas fa-exclamation-circle me-2"></i> <%= error %>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        <% } %>

        <% if (typeof success !== 'undefined' && success) { %>
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <i class="fas fa-check-circle me-2"></i> <%= success %>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        <% } %>
        
        <!-- Progress Steps -->
        <div class="progress-container d-none d-md-block">
            <div class="progress-steps">
                <div class="progress-step active" id="step1">1</div>
                <div class="progress-step" id="step2">2</div>
                <div class="progress-step" id="step3">3</div>
                <div class="progress-step" id="step4">4</div>
            </div>
            <div class="progress-labels">
                <div class="progress-label active">Basic Info</div>
                <div class="progress-label">Images</div>
                <div class="progress-label">Variants</div>
                <div class="progress-label">Specifications</div>
            </div>
        </div>
        
        <!-- Loading Overlay -->
        <div id="loadingOverlay" class="loading-overlay d-none">
            <div class="loading-spinner">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mb-0">Adding product...</p>
            </div>
        </div>

        <form id="productForm" method="post" action="/admin/add-product" enctype="multipart/form-data" class="needs-validation" novalidate>
            <!-- General Information Section -->
            <div class="form-section animate-fade-in" id="section1">
                <h2 class="section-title">
                    <i class="fas fa-info-circle"></i> General Information
                </h2>
                <div class="row g-4">
                    <div class="col-md-6">
                        <div class="form-floating">
                            <input type="text" class="form-control" id="productName" name="productName" placeholder="Product Name" required minlength="3" maxlength="100">
                            <label for="productName" class="required-field">Product Name</label>
                            <div class="invalid-feedback">Please enter a product name (3-100 characters)</div>
                            <div class="field-hint">Enter a descriptive name for your product</div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-floating">
                            <input type="number" class="form-control" id="productPrice" name="productPrice" placeholder="Price" min="100" max="1000000" step="0.01" required>
                            <label for="productPrice" class="required-field">Price (₹)</label>
                            <div class="invalid-feedback">Please enter a valid price (₹100 - ₹1,000,000)</div>
                            <div class="field-hint">Enter the base price of your product (₹100 - ₹1,000,000)</div>
                        </div>
                    </div>
                    <div class="col-12">
                        <div class="form-floating">
                            <textarea class="form-control" id="productDescription" name="productDescription" placeholder="Description" required minlength="10" maxlength="2000"></textarea>
                            <label for="productDescription" class="required-field">Product Description</label>
                            <div class="invalid-feedback">Please enter a product description (minimum 10 characters)</div>
                            <div class="field-hint">Provide a detailed description of your product</div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-floating">
                            <select class="form-select" id="productCategory" name="productCategory" required>
                                <option value="" selected disabled>Select a category</option>
                                <% if (typeof categories !== 'undefined' && categories.length > 0) { %>
                                    <% categories.forEach(category => { %>
                                        <option value="<%= category.name %>" data-offer="<%= category.offer || 0 %>"><%= category.name %> <% if (category.offer > 0) { %>(<%=category.offer%>% OFF)<% } %></option>
                                    <% }); %>
                                <% } else { %>
                                    <option value="" disabled>No categories available</option>
                                <% } %>
                            </select>
                            <label for="productCategory" class="required-field">Category</label>
                            <div class="invalid-feedback">Please select a category</div>
                            <div class="field-hint">Choose the category that best fits your product</div>
                        </div>
                        <div id="categoryOfferInfo" class="mt-2 d-none">
                            <div class="alert alert-info py-2">
                                <i class="fas fa-tag me-2"></i> Selected category has <strong><span id="categoryOfferValue">0</span>% offer</strong> applied
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-floating">
                            <input type="number" class="form-control" id="productOffer" name="productOffer" placeholder="Offer" min="0" max="100" value="0" step="1">
                            <label for="productOffer">Product Offer (%)</label>
                            <div class="invalid-feedback">Offer must be between 0 and 100</div>
                            <div class="field-hint">Enter a discount percentage (0-100)</div>
                        </div>
                        
                        <!-- Offer comparison section -->
                        <div id="offerComparison" class="offer-comparison d-none">
                            <div class="offer-item" id="productOfferItem">
                                <div class="offer-value" id="productOfferDisplay">0%</div>
                                <div class="offer-label">Product Offer</div>
                            </div>
                            <div class="offer-divider"></div>
                            <div class="offer-item" id="categoryOfferItem">
                                <div class="offer-value" id="categoryOfferDisplay">0%</div>
                                <div class="offer-label">Category Offer</div>
                            </div>
                            <div class="offer-divider"></div>
                            <div class="offer-item offer-winner">
                                <div class="offer-value" id="effectiveOfferDisplay">0%</div>
                                <div class="offer-label">Effective Discount</div>
                            </div>
                        </div>
                        
                        <!-- Discount preview section -->
                        <div id="discountPreview" class="discount-preview hidden mt-3">
                            <div class="discount-preview-title">
                                <i class="fas fa-tag"></i> Discount Preview
                            </div>
                            <div class="discount-preview-content">
                                <div>
                                    <div class="original-price">₹<span id="originalPrice">0.00</span></div>
                                    <div class="discounted-price">₹<span id="discountedPrice">0.00</span></div>
                                </div>
                                <div>
                                    <span class="badge bg-success" id="discountBadge">0% OFF</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="d-flex justify-content-end mt-4">
                    <button type="button" class="btn btn-primary next-section-btn" data-next="2">
                        Next: Product Images <i class="fas fa-arrow-right ms-2"></i>
                    </button>
                </div>
            </div>

            <!-- Product Images Section -->
            <div class="form-section animate-fade-in d-none" id="section2">
                <h2 class="section-title">
                    <i class="fas fa-images"></i> Product Images
                </h2>
                <div class="row g-4">
                    <div class="col-md-6">
                        <label class="form-label required-field">Main Product Image</label>
                        <div class="upload-zone main-image-container" data-name="mainImage">
                            <div class="upload-content">
                                <i class="fas fa-cloud-upload-alt upload-icon"></i>
                                <p class="upload-text">Drag and drop or click to upload</p>
                                <p class="upload-text text-muted">Recommended: 1000x1000px</p>
                            </div>
                            <button type="button" class="clear-image d-none">
                                <i class="fas fa-times"></i>
                            </button>
                            <input type="file" name="mainImage" class="d-none" accept="image/*" required>
                            <div class="invalid-feedback">Please upload a main product image</div>
                        </div>
                        <div class="field-hint mt-2">This will be the primary image shown to customers</div>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Additional Images</label>
                        <div class="row g-3">
                            <div class="col-4">
                                <div class="upload-zone additional-image-container" data-name="additionalImage1">
                                    <div class="upload-content">
                                        <i class="fas fa-plus upload-icon"></i>
                                        <p class="upload-text small">Image 1</p>
                                    </div>
                                    <button type="button" class="clear-image d-none">
                                        <i class="fas fa-times"></i>
                                    </button>
                                    <input type="file" name="additionalImage1" class="d-none" accept="image/*">
                                </div>
                            </div>
                            <div class="col-4">
                                <div class="upload-zone additional-image-container" data-name="additionalImage2">
                                    <div class="upload-content">
                                        <i class="fas fa-plus upload-icon"></i>
                                        <p class="upload-text small">Image 2</p>
                                    </div>
                                    <button type="button" class="clear-image d-none">
                                        <i class="fas fa-times"></i>
                                    </button>
                                    <input type="file" name="additionalImage2" class="d-none" accept="image/*">
                                </div>
                            </div>
                            <div class="col-4">
                                <div class="upload-zone additional-image-container" data-name="additionalImage3">
                                    <div class="upload-content">
                                        <i class="fas fa-plus upload-icon"></i>
                                        <p class="upload-text small">Image 3</p>
                                    </div>
                                    <button type="button" class="clear-image d-none">
                                        <i class="fas fa-times"></i>
                                    </button>
                                    <input type="file" name="additionalImage3" class="d-none" accept="image/*">
                                </div>
                            </div>
                        </div>
                        <div class="field-hint mt-2">Additional images will be shown in the product gallery</div>
                    </div>
                </div>
                <div class="d-flex justify-content-between mt-4">
                    <button type="button" class="btn btn-outline-secondary prev-section-btn" data-prev="1">
                        <i class="fas fa-arrow-left me-2"></i> Previous: General Information
                    </button>
                    <button type="button" class="btn btn-primary next-section-btn" data-next="3">
                        Next: Product Variants <i class="fas fa-arrow-right ms-2"></i>
                    </button>
                </div>
            </div>

            <!-- Product Variants Section -->
            <div class="form-section animate-fade-in d-none" id="section3">
                <h2 class="section-title">
                    <i class="fas fa-cubes"></i> Product Variants
                </h2>
                <div class="mb-4">
                    <label class="form-label required-field">Available Sizes</label>
                    <div class="d-flex flex-wrap">
                        <button type="button" class="size-btn" data-size="S">S</button>
                        <button type="button" class="size-btn" data-size="M">M</button>
                        <button type="button" class="size-btn" data-size="L">L</button>
                        <button type="button" class="size-btn" data-size="XL">XL</button>
                        <button type="button" class="size-btn" data-size="XXL">XXL</button>
                        <button type="button" class="size-btn" data-size="XXXL">XXXL</button>
                        <button type="button" class="size-btn" data-size="Free Size">Free Size</button>
                    </div>
                    <div class="field-hint">Click on sizes to add variants</div>
                </div>
                <div id="variantContainer" class="mt-4">
                    <!-- Variant rows will be added here -->
                </div>
                <div id="noVariantsMessage" class="alert alert-warning mt-3">
                    <i class="fas fa-exclamation-triangle me-2"></i> Please add at least one size variant
                </div>
                
                <div class="alert alert-info mt-4">
                    <i class="fas fa-info-circle me-2"></i> <strong>Note:</strong> The sale price for each variant will be automatically calculated based on the effective discount (higher of product offer or category offer).
                </div>
                
                <div class="d-flex justify-content-between mt-4">
                    <button type="button" class="btn btn-outline-secondary prev-section-btn" data-prev="2">
                        <i class="fas fa-arrow-left me-2"></i> Previous: Product Images
                    </button>
                    <button type="button" class="btn btn-primary next-section-btn" data-next="4">
                        Next: Product Specifications <i class="fas fa-arrow-right ms-2"></i>
                    </button>
                </div>
            </div>

            <!-- Product Specifications Section -->
            <div class="form-section animate-fade-in d-none" id="section4">
                <h2 class="section-title">
                    <i class="fas fa-clipboard-list"></i> Product Specifications
                </h2>
                <div class="row g-4">
                    <div class="col-md-6">
                        <div class="form-floating">
                            <input type="text" class="form-control" id="sku" name="sku" placeholder="SKU" pattern="[A-Za-z0-9-_]+" title="Only letters, numbers, hyphens and underscores are allowed" required>
                            <label for="sku" class="required-field">SKU</label>
                            <div class="invalid-feedback" id="skuFeedback">SKU can only contain letters, numbers, hyphens and underscores</div>
                            <div class="field-hint">Stock Keeping Unit - unique identifier for your product</div>
                            <div class="spinner-border spinner-border-sm text-primary sku-check-spinner" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-floating">
                            <input type="text" class="form-control" id="brand" name="brand" placeholder="Brand">
                            <label for="brand">Brand (Optional)</label>
                            <div class="field-hint">Enter the brand name of the product</div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-floating">
                            <input type="text" class="form-control" id="color" name="color" placeholder="Color" required>
                            <label for="color" class="required-field">Color</label>
                            <div class="invalid-feedback">Please specify the color</div>
                            <div class="field-hint">Enter the primary color of the product</div>
                        </div>
                        
                        <!-- Color picker -->
                        <div class="color-picker-container mt-2">
                            <div class="color-option" style="background-color: #000000;" data-color="Black" title="Black"></div>
                            <div class="color-option" style="background-color: #FFFFFF;" data-color="White" title="White"></div>
                            <div class="color-option" style="background-color: #FF0000;" data-color="Red" title="Red"></div>
                            <div class="color-option" style="background-color: #0000FF;" data-color="Blue" title="Blue"></div>
                            <div class="color-option" style="background-color: #008000;" data-color="Green" title="Green"></div>
                            <div class="color-option" style="background-color: #FFFF00;" data-color="Yellow" title="Yellow"></div>
                            <div class="color-option" style="background-color: #FFA500;" data-color="Orange" title="Orange"></div>
                            <div class="color-option" style="background-color: #800080;" data-color="Purple" title="Purple"></div>
                            <div class="color-option" style="background-color: #FFC0CB;" data-color="Pink" title="Pink"></div>
                            <div class="color-option" style="background-color: #A52A2A;" data-color="Brown" title="Brown"></div>
                            <div class="color-option" style="background-color: #808080;" data-color="Grey" title="Grey"></div>
                            <div class="color-option" style="background-color: #00FFFF;" data-color="Cyan" title="Cyan"></div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-floating">
                            <input type="text" class="form-control" id="fabric" name="fabric" placeholder="Fabric" required>
                            <label for="fabric" class="required-field">Fabric</label>
                            <div class="invalid-feedback">Please specify the fabric</div>
                            <div class="field-hint">Enter the fabric material of the product</div>
                        </div>
                        
                        <!-- Common fabric options -->
                        <div class="mt-2">
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-sm btn-outline-secondary fabric-option" data-fabric="Cotton">Cotton</button>
                                <button type="button" class="btn btn-sm btn-outline-secondary fabric-option" data-fabric="Polyester">Polyester</button>
                                <button type="button" class="btn btn-sm btn-outline-secondary fabric-option" data-fabric="Linen">Linen</button>
                                <button type="button" class="btn btn-sm btn-outline-secondary fabric-option" data-fabric="Silk">Silk</button>
                                <button type="button" class="btn btn-sm btn-outline-secondary fabric-option" data-fabric="Wool">Wool</button>
                                <button type="button" class="btn btn-sm btn-outline-secondary fabric-option" data-fabric="Denim">Denim</button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-12">
                        <label class="form-label">Product Tags (Optional)</label>
                        <div class="tags-input-container">
                            <div id="tagsContainer">
                                <!-- Tags will be added here -->
                            </div>
                            <input type="text" class="tags-input" id="tagsInput" placeholder="Add tags and press Enter">
                        </div>
                        <div class="field-hint">Add tags to improve product searchability (e.g., summer, casual, party)</div>
                        <input type="hidden" name="tags" id="tagsHidden">
                    </div>
                </div>
                
                <div class="d-flex justify-content-between mt-4">
                    <button type="button" class="btn btn-outline-secondary prev-section-btn" data-prev="3">
                        <i class="fas fa-arrow-left me-2"></i> Previous: Product Variants
                    </button>
                    <button type="button" id="submitBtn" class="btn btn-primary">
                        <i class="fas fa-plus me-2"></i> Add Product
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Crop Modal -->
<div class="modal fade" id="cropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="img-container">
                    <img id="imageToCrop" src="/placeholder.svg" alt="Image to crop">
                </div>
                <div class="crop-controls mt-3">
                    <button type="button" class="crop-control-btn" id="zoomIn" title="Zoom In">
                        <i class="fas fa-search-plus"></i>
                    </button>
                    <button type="button" class="crop-control-btn" id="zoomOut" title="Zoom Out">
                        <i class="fas fa-search-minus"></i>
                    </button>
                    <button type="button" class="crop-control-btn" id="rotateLeft" title="Rotate Left">
                        <i class="fas fa-undo"></i>
                    </button>
                    <button type="button" class="crop-control-btn" id="rotateRight" title="Rotate Right">
                        <i class="fas fa-redo"></i>
                    </button>
                    <button type="button" class="crop-control-btn" id="flipHorizontal" title="Flip Horizontal">
                        <i class="fas fa-arrows-alt-h"></i>
                    </button>
                    <button type="button" class="crop-control-btn" id="flipVertical" title="Flip Vertical">
                        <i class="fas fa-arrows-alt-v"></i>
                    </button>
                </div>
                <div class="d-flex justify-content-center gap-2 mt-3">
                    <button type="button" class="crop-aspect-btn active" data-ratio="1">1:1</button>
                    <button type="button" class="crop-aspect-btn" data-ratio="4/3">4:3</button>
                    <button type="button" class="crop-aspect-btn" data-ratio="16/9">16:9</button>
                    <button type="button" class="crop-aspect-btn" data-ratio="NaN">Free</button>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="cropImage" class="btn btn-primary">
                    <i class="fas fa-crop-alt me-2"></i> Crop & Save
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container"></div>

<!-- Bootstrap Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<!-- Cropper.js -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
<!-- SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!-- Custom JS -->
<script>
document.addEventListener("DOMContentLoaded", () => {
  // Initialize variables
  const uploadZones = document.querySelectorAll(".upload-zone")
  const cropModalElement = document.getElementById("cropModal")
  const cropModal = new bootstrap.Modal(cropModalElement)
  const imageToCrop = document.getElementById("imageToCrop")
  const cropImageBtn = document.getElementById("cropImage")
  const productForm = document.getElementById("productForm")
  const submitBtn = document.getElementById("submitBtn")
  const variantContainer = document.getElementById("variantContainer")
  const sizeButtons = document.querySelectorAll(".size-btn")
  const noVariantsMessage = document.getElementById("noVariantsMessage")
  const productOfferInput = document.getElementById("productOffer")
  const productPriceInput = document.getElementById("productPrice")
  const productCategorySelect = document.getElementById("productCategory")
  const discountPreview = document.getElementById("discountPreview")
  const originalPriceSpan = document.getElementById("originalPrice")
  const discountedPriceSpan = document.getElementById("discountedPrice")
  const discountBadge = document.getElementById("discountBadge")
  const skuInput = document.getElementById("sku")
  const skuFeedback = document.getElementById("skuFeedback")
  const skuCheckSpinner = document.querySelector(".sku-check-spinner")
  const loadingOverlay = document.getElementById("loadingOverlay")
  const categoryOfferInfo = document.getElementById("categoryOfferInfo")
  const categoryOfferValue = document.getElementById("categoryOfferValue")
  const offerComparison = document.getElementById("offerComparison")
  const productOfferDisplay = document.getElementById("productOfferDisplay")
  const categoryOfferDisplay = document.getElementById("categoryOfferDisplay")
  const effectiveOfferDisplay = document.getElementById("effectiveOfferDisplay")
  const productOfferItem = document.getElementById("productOfferItem")
  const categoryOfferItem = document.getElementById("categoryOfferItem")
  const colorOptions = document.querySelectorAll(".color-option")
  const fabricOptions = document.querySelectorAll(".fabric-option")
  const tagsInput = document.getElementById("tagsInput")
  const tagsContainer = document.getElementById("tagsContainer")
  const tagsHidden = document.getElementById("tagsHidden")
  const nextSectionBtns = document.querySelectorAll(".next-section-btn")
  const prevSectionBtns = document.querySelectorAll(".prev-section-btn")
  const progressSteps = document.querySelectorAll(".progress-step")
  const progressLabels = document.querySelectorAll(".progress-label")

  let cropper
  let currentFileInput
  let variantCount = 0
  const uploadedFiles = new Set()
  const addedSizes = new Set()
  let isSkuValid = true
  let skuCheckTimeout
  let currentSection = 1
  const tags = new Set()

  // Section navigation
  function showSection(sectionNumber) {
    // Hide all sections
    document.querySelectorAll(".form-section").forEach((section) => {
      section.classList.add("d-none")
    })

    // Show the selected section
    document.getElementById(`section${sectionNumber}`).classList.remove("d-none")

    // Update progress steps
    progressSteps.forEach((step, index) => {
      const stepNum = index + 1
      step.classList.remove("active", "completed")

      if (stepNum === sectionNumber) {
        step.classList.add("active")
      } else if (stepNum < sectionNumber) {
        step.classList.add("completed")
        step.innerHTML = '<i class="fas fa-check"></i>'
      } else {
        step.textContent = stepNum
      }
    })

    // Update progress labels
    progressLabels.forEach((label, index) => {
      label.classList.remove("active")
      if (index + 1 === sectionNumber) {
        label.classList.add("active")
      }
    })

    currentSection = sectionNumber

    // Scroll to top of the section
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    })
  }

  // Next section button click handler
  nextSectionBtns.forEach((btn) => {
    btn.addEventListener("click", () => {
      const nextSection = Number.parseInt(btn.dataset.next)

      // Validate current section before proceeding
      if (validateSection(currentSection)) {
        showSection(nextSection)
      } else {
        // Show error message
        showToast("Please fill in all required fields correctly", "danger")

        // Scroll to the first invalid field
        const firstInvalid = document.querySelector(".is-invalid")
        if (firstInvalid) {
          firstInvalid.scrollIntoView({ behavior: "smooth", block: "center" })
          firstInvalid.focus()
        }
      }
    })
  })

  // Previous section button click handler
  prevSectionBtns.forEach((btn) => {
    btn.addEventListener("click", () => {
      const prevSection = Number.parseInt(btn.dataset.prev)
      showSection(prevSection)
    })
  })

  // Validate specific section
  function validateSection(sectionNumber) {
    let isValid = true
    const section = document.getElementById(`section${sectionNumber}`)

    // Reset validation states in this section
    const inputs = section.querySelectorAll("input, textarea, select")
    inputs.forEach((input) => {
      if (input.id !== "sku") {
        // Don't reset SKU validation
        input.classList.remove("is-invalid")
        input.classList.remove("is-valid")
      }
    })

    // Check required fields in this section
    const requiredFields = section.querySelectorAll("[required]")
    requiredFields.forEach((field) => {
      if (!field.value.trim()) {
        field.classList.add("is-invalid")
        isValid = false
      } else {
        field.classList.add("is-valid")
      }
    })

    // Section-specific validation
    if (sectionNumber === 1) {
      // Validate price (must be between 100 and 1,000,000)
      const priceValue = Number.parseFloat(productPriceInput.value)
      if (isNaN(priceValue) || priceValue < 100 || priceValue > 1000000) {
        productPriceInput.classList.add("is-invalid")
        isValid = false
      }

      // Validate offer percentage (0-100)
      const offerValue = Number.parseInt(productOfferInput.value)
      if (isNaN(offerValue) || offerValue < 0 || offerValue > 100) {
        productOfferInput.classList.add("is-invalid")
        isValid = false
      }
    } else if (sectionNumber === 2) {
      // Validate main image
      const mainImageInput = document.querySelector('input[name="mainImage"]')
      if (!mainImageInput.files || !mainImageInput.files.length) {
        const mainImageZone = mainImageInput.closest(".upload-zone")
        mainImageZone.classList.add("border-danger")
        isValid = false
      }
    } else if (sectionNumber === 3) {
      // Check if at least one variant exists
      if (variantContainer.children.length === 0) {
        noVariantsMessage.classList.remove("d-none")
        isValid = false
      } else {
        noVariantsMessage.classList.add("d-none")

        // Validate each variant
        const variantRows = variantContainer.querySelectorAll(".variant-row")
        variantRows.forEach((row) => {
          const priceInput = row.querySelector('input[name$="[varientPrice]"]')
          const stockInput = row.querySelector('input[name$="[varientquatity]"]')

          if (
            !priceInput.value ||
            isNaN(Number.parseFloat(priceInput.value)) ||
            Number.parseFloat(priceInput.value) < 100 ||
            Number.parseFloat(priceInput.value) > 1000000
          ) {
            priceInput.classList.add("is-invalid")
            isValid = false
          }

          if (!stockInput.value || isNaN(Number.parseInt(stockInput.value)) || Number.parseInt(stockInput.value) <= 0) {
            stockInput.classList.add("is-invalid")
            isValid = false
          }
        })
      }
    } else if (sectionNumber === 4) {
      // Check SKU validity
      if (!isSkuValid || !skuInput.value.trim()) {
        skuInput.classList.add("is-invalid")
        if (!skuInput.value.trim()) {
          skuFeedback.textContent = "SKU is required"
        }
        isValid = false
      }
    }

    return isValid
  }

  // Function to update discount preview
  function updateDiscountPreview() {
    const price = Number.parseFloat(productPriceInput.value) || 0
    const productOffer = Number.parseInt(productOfferInput.value) || 0

    // Get category offer if a category is selected
    let categoryOffer = 0
    if (productCategorySelect.value) {
      const selectedOption = productCategorySelect.options[productCategorySelect.selectedIndex]
      categoryOffer = Number.parseInt(selectedOption.dataset.offer || 0)
    }

    // Update category offer info
    if (categoryOffer > 0) {
      categoryOfferInfo.classList.remove("d-none")
      categoryOfferValue.textContent = categoryOffer
    } else {
      categoryOfferInfo.classList.add("d-none")
    }

    // Update offer comparison
    productOfferDisplay.textContent = `${productOffer}%`
    categoryOfferDisplay.textContent = `${categoryOffer}%`

    // Use the higher of product offer or category offer
    const effectiveDiscount = Math.max(productOffer, categoryOffer)
    effectiveOfferDisplay.textContent = `${effectiveDiscount}%`

    // Highlight the winner
    if (productOffer > categoryOffer) {
      productOfferItem.classList.add("offer-winner")
      categoryOfferItem.classList.remove("offer-winner")
    } else if (categoryOffer > productOffer) {
      categoryOfferItem.classList.add("offer-winner")
      productOfferItem.classList.remove("offer-winner")
    } else {
      // If they're equal, don't highlight either one
      productOfferItem.classList.remove("offer-winner")
      categoryOfferItem.classList.remove("offer-winner")
    }

    // Show offer comparison if either offer is > 0
    if (productOffer > 0 || categoryOffer > 0) {
      offerComparison.classList.remove("d-none")
    } else {
      offerComparison.classList.add("d-none")
    }

    // Only show price preview if there's a price and a discount
    if (price > 0 && effectiveDiscount > 0) {
      const discountedPrice = price - (price * effectiveDiscount) / 100

      originalPriceSpan.textContent = price.toFixed(2)
      discountedPriceSpan.textContent = discountedPrice.toFixed(2)
      discountBadge.textContent = `${effectiveDiscount}% OFF`

      discountPreview.classList.remove("hidden")
    } else {
      discountPreview.classList.add("hidden")
    }
  }

  // Add event listeners for discount preview
  productPriceInput.addEventListener("input", updateDiscountPreview)
  productOfferInput.addEventListener("input", updateDiscountPreview)
  productCategorySelect.addEventListener("change", updateDiscountPreview)

  // Function to check if SKU already exists
  async function checkSkuExists(sku) {
    if (!sku) return false

    try {
      skuCheckSpinner.classList.add("show")
      const response = await fetch(`/admin/check-sku?sku=${encodeURIComponent(sku)}`)
      const data = await response.json()

      if (data.exists) {
        skuInput.classList.add("is-invalid")
        skuFeedback.textContent = "This SKU already exists. Please use a different one."
        isSkuValid = false

        // Show SweetAlert2 message for SKU already exists
        Swal.fire({
          title: "SKU Already Exists",
          text: "The SKU you entered is already in use. Please use a different SKU.",
          icon: "error",
          confirmButtonColor: "#6366f1",
        })

        return true
      } else {
        if (skuInput.value.match(/^[A-Za-z0-9-_]+$/)) {
          skuInput.classList.remove("is-invalid")
          skuInput.classList.add("is-valid")
          isSkuValid = true
        }
        return false
      }
    } catch (error) {
      console.error("Error checking SKU:", error)
      return false
    } finally {
      skuCheckSpinner.classList.remove("show")
    }
  }

  // Add event listener for SKU input
  skuInput.addEventListener("input", function () {
    const sku = this.value.trim()

    // Clear previous timeout
    if (skuCheckTimeout) {
      clearTimeout(skuCheckTimeout)
    }

    // Validate SKU format
    if (sku && !sku.match(/^[A-Za-z0-9-_]+$/)) {
      this.classList.add("is-invalid")
      skuFeedback.textContent = "SKU can only contain letters, numbers, hyphens and underscores"
      isSkuValid = false
      return
    }

    // Check if SKU exists after a short delay (to avoid too many requests)
    if (sku) {
      skuCheckTimeout = setTimeout(() => {
        checkSkuExists(sku)
      }, 500)
    } else {
      this.classList.add("is-invalid")
      skuFeedback.textContent = "SKU is required"
      isSkuValid = false
    }
  })

  // Color picker functionality
  colorOptions.forEach((option) => {
    option.addEventListener("click", () => {
      const color = option.dataset.color
      document.getElementById("color").value = color

      // Update selected state
      colorOptions.forEach((opt) => opt.classList.remove("selected"))
      option.classList.add("selected")

      // Validate color field
      document.getElementById("color").classList.remove("is-invalid")
      document.getElementById("color").classList.add("is-valid")
    })
  })

  // Fabric options functionality
  fabricOptions.forEach((option) => {
    option.addEventListener("click", () => {
      const fabric = option.dataset.fabric
      document.getElementById("fabric").value = fabric

      // Update selected state
      fabricOptions.forEach((opt) => opt.classList.remove("active"))
      option.classList.add("active")

      // Validate fabric field
      document.getElementById("fabric").classList.remove("is-invalid")
      document.getElementById("fabric").classList.add("is-valid")
    })
  })

  // Tags input functionality
  function renderTags() {
    tagsContainer.innerHTML = ""
    tags.forEach((tag) => {
      const tagElement = document.createElement("div")
      tagElement.className = "tag"
      tagElement.innerHTML = `
                ${tag}
                <span class="tag-remove" data-tag="${tag}">
                    <i class="fas fa-times"></i>
                </span>
            `
      tagsContainer.appendChild(tagElement)
    })

    // Update hidden input
    tagsHidden.value = Array.from(tags).join(",")
  }

  tagsInput.addEventListener("keydown", (e) => {
    if (e.key === "Enter" || e.key === ",") {
      e.preventDefault()
      const tag = tagsInput.value.trim()
      if (tag && !tags.has(tag)) {
        tags.add(tag)
        renderTags()
        tagsInput.value = ""
      }
    }
  })

  // Event delegation for tag removal
  tagsContainer.addEventListener("click", (e) => {
    if (e.target.closest(".tag-remove")) {
      const tag = e.target.closest(".tag-remove").dataset.tag
      tags.delete(tag)
      renderTags()
    }
  })

  // Show toast notification
  function showToast(message, type = "success") {
    const toastContainer = document.querySelector(".toast-container")
    const toast = document.createElement("div")
    toast.className = `toast custom-toast align-items-center text-white bg-${type} border-0 show animate-fade-in`
    toast.setAttribute("role", "alert")
    toast.setAttribute("aria-live", "assertive")
    toast.setAttribute("aria-atomic", "true")

    toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">
                    <i class="fas fa-${type === "success" ? "check-circle" : type === "warning" ? "exclamation-triangle" : "exclamation-circle"} me-2"></i>
                    ${message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        `

    toastContainer.appendChild(toast)

    setTimeout(() => {
      toast.classList.add("fade")
      setTimeout(() => toast.remove(), 300)
    }, 3000)
  }

  // Handle image uploads
  uploadZones.forEach((zone) => {
    const fileInput = zone.querySelector('input[type="file"]')
    const clearBtn = zone.querySelector(".clear-image")
    const uploadContent = zone.querySelector(".upload-content")

    zone.addEventListener("click", (e) => {
      // Only allow clicking if there's no image or if clicking the clear button
      if (!zone.classList.contains("has-image") || e.target === clearBtn || e.target === clearBtn.querySelector("i")) {
        if (!zone.classList.contains("has-image")) {
          fileInput.click()
        }
      }
    })

    zone.addEventListener("dragover", (e) => {
      // Only allow drag if there's no image
      if (!zone.classList.contains("has-image")) {
        e.preventDefault()
        zone.classList.add("border-primary")
      }
    })

    zone.addEventListener("dragleave", () => {
      zone.classList.remove("border-primary")
    })

    zone.addEventListener("drop", (e) => {
      // Only allow drop if there's no image
      if (!zone.classList.contains("has-image")) {
        e.preventDefault()
        zone.classList.remove("border-primary")

        if (e.dataTransfer.files.length) {
          fileInput.files = e.dataTransfer.files
          handleFileSelect(fileInput)
        }
      }
    })

    fileInput.addEventListener("change", () => {
      // Only process if there's no image or if the file input has a file
      if (!zone.classList.contains("has-image") || fileInput.files.length > 0) {
        handleFileSelect(fileInput)
      }
    })

    clearBtn.addEventListener("click", (e) => {
      e.preventDefault()
      e.stopPropagation()

      const file = fileInput.files[0]
      if (file) {
        uploadedFiles.delete(`${file.name}-${file.size}`)
      }

      fileInput.value = ""
      zone.style.backgroundImage = ""
      zone.classList.remove("has-image")
      zone.classList.remove("border-danger")
      uploadContent.classList.remove("d-none")
      clearBtn.classList.add("d-none")

      if (fileInput.hasAttribute("required")) {
        fileInput.classList.add("is-invalid")
      }
    })
  })

  function handleFileSelect(fileInput) {
    const file = fileInput.files[0]
    if (!file) return

    const fileHash = `${file.name}-${file.size}`
    const zone = fileInput.closest(".upload-zone")

    // Check if the zone already has an image
    if (zone.classList.contains("has-image")) {
      showToast("Please remove the current image first", "warning")
      fileInput.value = ""
      return
    }

    // Validate file
    if (!file.type.startsWith("image/")) {
      showToast("Please upload a valid image file", "danger")
      fileInput.value = ""
      return
    }

    if (file.size > 5 * 1024 * 1024) {
      showToast("File size must be under 5MB", "danger")
      fileInput.value = ""
      return
    }

    if (uploadedFiles.has(fileHash)) {
      showToast("This image is already uploaded", "warning")
      fileInput.value = ""
      return
    }

    uploadedFiles.add(fileHash)
    currentFileInput = fileInput

    // Open cropper modal
    const reader = new FileReader()
    reader.onload = (e) => {
      imageToCrop.src = e.target.result
      cropModal.show()

      if (cropper) {
        cropper.destroy()
      }

      // Initialize cropper with a slight delay to ensure the modal is fully visible
      setTimeout(() => {
        cropper = new Cropper(imageToCrop, {
          aspectRatio: 1,
          viewMode: 1,
          autoCropArea: 0.9,
          responsive: true,
          zoomable: true,
          scalable: true,
          rotatable: true,
          minContainerWidth: 800,
          minContainerHeight: 500,
        })
      }, 300)
    }
    reader.readAsDataURL(file)
  }

  // Enhanced image cropping with controls
  document.getElementById("zoomIn").addEventListener("click", () => {
    if (cropper) cropper.zoom(0.1)
  })

  document.getElementById("zoomOut").addEventListener("click", () => {
    if (cropper) cropper.zoom(-0.1)
  })

  document.getElementById("rotateLeft").addEventListener("click", () => {
    if (cropper) cropper.rotate(-45)
  })

  document.getElementById("rotateRight").addEventListener("click", () => {
    if (cropper) cropper.rotate(45)
  })

  document.getElementById("flipHorizontal").addEventListener("click", () => {
    if (cropper) cropper.scaleX(-cropper.getData().scaleX || -1)
  })

  document.getElementById("flipVertical").addEventListener("click", () => {
    if (cropper) cropper.scaleY(-cropper.getData().scaleY || -1)
  })

  // Aspect ratio buttons
  document.querySelectorAll(".crop-aspect-btn").forEach((btn) => {
    btn.addEventListener("click", () => {
      document.querySelectorAll(".crop-aspect-btn").forEach((b) => b.classList.remove("active"))
      btn.classList.add("active")

      const ratio = btn.dataset.ratio
      if (cropper) {
        cropper.setAspectRatio(ratio === "NaN" ? Number.NaN : eval(ratio))
      }
    })
  })

  // Handle image cropping
  cropImageBtn.addEventListener("click", () => {
    cropper
      .getCroppedCanvas({
        width: 2000,
        height: 2000,
        fillColor: "#fff",
        imageSmoothingEnabled: true,
        imageSmoothingQuality: "high",
      })
      .toBlob(
        (blob) => {
          const originalFile = currentFileInput.files[0]
          const file = new File([blob], originalFile.name, { type: "image/webp" })
          const dataTransfer = new DataTransfer()
          dataTransfer.items.add(file)
          currentFileInput.files = dataTransfer.files

          const zone = currentFileInput.closest(".upload-zone")
          const uploadContent = zone.querySelector(".upload-content")
          const clearBtn = zone.querySelector(".clear-image")

          // Create preview
          const reader = new FileReader()
          reader.onload = (e) => {
            zone.style.backgroundImage = `url(${e.target.result})`
            zone.classList.add("has-image")
            zone.classList.remove("border-danger")
            uploadContent.classList.add("d-none")
            clearBtn.classList.remove("d-none")

            if (currentFileInput.hasAttribute("required")) {
              currentFileInput.classList.remove("is-invalid")
            }
          }
          reader.readAsDataURL(file)

          cropModal.hide()
          if (cropper) {
            cropper.destroy()
            cropper = null
          }

          showToast("Image cropped successfully", "success")
        },
        "image/webp",
        0.9,
      )
  })

  // Handle variant management
  function updateSizeButtons() {
    sizeButtons.forEach((btn) => {
      const size = btn.dataset.size
      if (addedSizes.has(size)) {
        btn.classList.add("disabled")
        btn.classList.remove("active")
      } else {
        btn.classList.remove("disabled")
      }
    })
  }

  function addVariantRow(size, price = "", stock = "") {
    if (addedSizes.has(size)) {
      showToast(`Size ${size} already added`, "warning")
      return false
    }

    addedSizes.add(size)
    updateSizeButtons()

    const variantDiv = document.createElement("div")
    variantDiv.className = "variant-row animate-slide-in"
    variantDiv.dataset.size = size

    // Get the current product offer
    const productOffer = Number.parseInt(productOfferInput.value) || 0

    // Get the category offer if a category is selected
    let categoryOffer = 0
    if (productCategorySelect.value) {
      const selectedOption = productCategorySelect.options[productCategorySelect.selectedIndex]
      categoryOffer = Number.parseInt(selectedOption.dataset.offer || 0)
    }

    // Use the higher of product offer or category offer
    const effectiveDiscount = Math.max(productOffer, categoryOffer)

    // Fix: Ensure proper naming convention for form fields to match backend expectations
    variantDiv.innerHTML = `
            <div class="row g-3">
                <div class="col-md-4">
                    <div class="form-floating">
                        <input type="text" class="form-control" name="variants[${variantCount}][size]" value="${size}" readonly>
                        <label>Size</label>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-floating">
                        <input type="number" class="form-control variant-price" name="variants[${variantCount}][varientPrice]" value="${price}" placeholder="Price" min="100" max="1000000" step="0.01" required>
                        <label>Price (₹)</label>
                        <div class="invalid-feedback">Please enter a valid price (₹100 - ₹1,000,000)</div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-floating">
                        <input type="number" class="form-control variant-stock" name="variants[${variantCount}][varientquatity]" value="${stock}" placeholder="Stock" min="1" required>
                        <label>Stock</label>
                        <div class="invalid-feedback">Please enter a valid stock quantity (minimum 1)</div>
                    </div>
                </div>
            </div>
            <button type="button" class="remove-variant" title="Remove Variant">
                <i class="fas fa-times-circle"></i>
            </button>
        `

    variantContainer.appendChild(variantDiv)
    noVariantsMessage.classList.add("d-none")

    // Add event listeners to variant inputs
    const priceInput = variantDiv.querySelector(".variant-price")
    const stockInput = variantDiv.querySelector(".variant-stock")

    priceInput.addEventListener("input", () => {
      const value = Number.parseFloat(priceInput.value)
      if (isNaN(value) || value < 100 || value > 1000000) {
        priceInput.classList.add("is-invalid")
      } else {
        priceInput.classList.remove("is-invalid")
      }
    })

    stockInput.addEventListener("input", () => {
      const value = Number.parseInt(stockInput.value)
      if (isNaN(value) || value <= 0) {
        stockInput.classList.add("is-invalid")
      } else {
        stockInput.classList.remove("is-invalid")
      }
    })

    variantDiv.querySelector(".remove-variant").addEventListener("click", () => {
      const sizeToRemove = variantDiv.dataset.size
      addedSizes.delete(sizeToRemove)
      updateSizeButtons()

      variantDiv.classList.add("animate-slide-out")
      setTimeout(() => {
        variantDiv.remove()
        if (variantContainer.children.length === 0) {
          noVariantsMessage.classList.remove("d-none")
        }
      }, 300)
    })

    variantCount++
    return true
  }

  // Size button click handlers
  sizeButtons.forEach((btn) => {
    btn.addEventListener("click", () => {
      const size = btn.dataset.size
      if (!addedSizes.has(size)) {
        if (addVariantRow(size)) {
          btn.classList.add("active")
          setTimeout(() => {
            btn.classList.remove("active")
          }, 300)
        }
      }
    })
  })

  // Additional validation for offer field
  productOfferInput.addEventListener("input", () => {
    const value = Number.parseInt(productOfferInput.value)
    if (isNaN(value) || value < 0) {
      productOfferInput.value = 0
    } else if (value > 100) {
      productOfferInput.value = 100
    }

    if (
      productOfferInput.value.trim() &&
      !isNaN(Number.parseInt(productOfferInput.value)) &&
      Number.parseInt(productOfferInput.value) >= 0 &&
      Number.parseInt(productOfferInput.value) <= 100
    ) {
      productOfferInput.classList.remove("is-invalid")
    } else {
      productOfferInput.classList.add("is-invalid")
    }

    updateDiscountPreview()
  })

  // Additional validation for price field
  productPriceInput.addEventListener("input", () => {
    const value = Number.parseFloat(productPriceInput.value)
    if (isNaN(value) || value < 100 || value > 1000000) {
      productPriceInput.classList.add("is-invalid")
    } else {
      productPriceInput.classList.remove("is-invalid")
    }

    updateDiscountPreview()
  })

  // Form submission with enhanced validation
  submitBtn.addEventListener("click", async (e) => {
    e.preventDefault()

    // Check if SKU exists before form validation
    if (skuInput.value.trim()) {
      const skuExists = await checkSkuExists(skuInput.value.trim())
      if (skuExists) {
        // SweetAlert2 message is shown in the checkSkuExists function
        skuInput.focus()
        return
      }
    }

    if (!validateForm()) {
      showToast("Please fill in all required fields correctly", "danger")

      // Scroll to the first invalid field
      const firstInvalid = document.querySelector(".is-invalid")
      if (firstInvalid) {
        firstInvalid.scrollIntoView({ behavior: "smooth", block: "center" })
        firstInvalid.focus()
      }
      return
    }

    // Ensure at least one variant exists
    if (variantContainer.children.length === 0) {
      showToast("Please add at least one size variant", "danger")
      document.querySelector(".size-btn").scrollIntoView({ behavior: "smooth", block: "center" })
      return
    }

    // Confirm submission with SweetAlert2
    Swal.fire({
      title: "Add New Product?",
      text: "Are you sure you want to add this product?",
      icon: "question",
      showCancelButton: true,
      confirmButtonColor: "#6366f1",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, add it!",
      cancelButtonText: "Cancel",
    }).then(async (result) => {
      if (result.isConfirmed) {
        submitBtn.disabled = true
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i> Adding...'
        loadingOverlay.classList.remove("d-none")

        try {
          const formData = new FormData(productForm)

          // Log form data for debugging
          console.log("Form data being submitted:")
          for (const [key, value] of formData.entries()) {
            console.log(key, value)
          }

          const response = await fetch(productForm.action, {
            method: "POST",
            body: formData,
          })

          if (response.ok) {
            Swal.fire({
              title: "Success!",
              text: "Product has been added successfully",
              icon: "success",
              confirmButtonColor: "#6366f1",
            }).then(() => {
              window.location.href = "/admin/productManagement"
            })
          } else {
            let errorMessage = "Failed to add product"
            try {
              const errorData = await response.json()
              errorMessage = errorData.message || errorMessage
            } catch (e) {
              console.error("Error parsing error response:", e)
            }
            throw new Error(errorMessage)
          }
        } catch (error) {
          Swal.fire({
            title: "Error!",
            text: error.message || "Something went wrong",
            icon: "error",
            confirmButtonColor: "#6366f1",
          })
        } finally {
          submitBtn.disabled = false
          submitBtn.innerHTML = '<i class="fas fa-plus me-2"></i> Add Product'
          loadingOverlay.classList.add("d-none")
        }
      }
    })
  })

  // Enhanced form validation
  function validateForm() {
    let isValid = true

    // Reset all validation states
    const allInputs = productForm.querySelectorAll("input, textarea, select")
    allInputs.forEach((input) => {
      if (input.id !== "sku") {
        // Don't reset SKU validation
        input.classList.remove("is-invalid")
        input.classList.remove("is-valid")
      }
    })

    // Check all required fields
    const requiredFields = productForm.querySelectorAll("[required]")
    requiredFields.forEach((field) => {
      if (!field.value.trim()) {
        field.classList.add("is-invalid")
        isValid = false
      } else {
        field.classList.add("is-valid")
      }
    })

    // Validate offer percentage (0-100)
    const offerValue = Number.parseInt(productOfferInput.value)
    if (isNaN(offerValue) || offerValue < 0 || offerValue > 100) {
      productOfferInput.classList.add("is-invalid")
      isValid = false
    }

    // Validate price (must be between 100 and 1,000,000)
    const priceValue = Number.parseFloat(productPriceInput.value)
    if (isNaN(priceValue) || priceValue < 100 || priceValue > 1000000) {
      productPriceInput.classList.add("is-invalid")
      isValid = false
    }

    // Check if at least one variant exists
    if (variantContainer.children.length === 0) {
      noVariantsMessage.classList.remove("d-none")
      isValid = false
    } else {
      noVariantsMessage.classList.add("d-none")

      // Validate each variant
      const variantRows = variantContainer.querySelectorAll(".variant-row")
      variantRows.forEach((row) => {
        const priceInput = row.querySelector('input[name$="[varientPrice]"]')
        const stockInput = row.querySelector('input[name$="[varientquatity]"]')

        if (
          !priceInput.value ||
          isNaN(Number.parseFloat(priceInput.value)) ||
          Number.parseFloat(priceInput.value) < 100 ||
          Number.parseFloat(priceInput.value) > 1000000
        ) {
          priceInput.classList.add("is-invalid")
          isValid = false
        }

        if (!stockInput.value || isNaN(Number.parseInt(stockInput.value)) || Number.parseInt(stockInput.value) <= 0) {
          stockInput.classList.add("is-invalid")
          isValid = false
        }
      })
    }

    // Check SKU validity
    if (!isSkuValid || !skuInput.value.trim()) {
      skuInput.classList.add("is-invalid")
      if (!skuInput.value.trim()) {
        skuFeedback.textContent = "SKU is required"
      }
      isValid = false
    }

    // Check if main image is uploaded
    const mainImageInput = document.querySelector('input[name="mainImage"]')
    if (!mainImageInput.files || !mainImageInput.files.length) {
      const mainImageZone = mainImageInput.closest(".upload-zone")
      mainImageZone.classList.add("border-danger")
      isValid = false
    }

    return isValid
  }

  // Handle modal close event to clean up cropper
  document.getElementById("cropModal").addEventListener("hidden.bs.modal", () => {
    if (cropper) {
      cropper.destroy()
      cropper = null
    }
  })

  // Prevent modal from closing when clicking outside
  document.getElementById("cropModal").addEventListener("click", function (e) {
    if (e.target === this) {
      e.stopPropagation()
    }
  })
})
// Add this to your existing JavaScript file or create a new one
document.addEventListener("DOMContentLoaded", () => {
  const productOfferInput = document.getElementById("productOffer")
  const productPriceInput = document.getElementById("productPrice")
  const productCategorySelect = document.getElementById("productCategory")
  const discountPreview = document.getElementById("discountPreview")
  const originalPriceSpan = document.getElementById("originalPrice")
  const discountedPriceSpan = document.getElementById("discountedPrice")
  const discountBadge = document.getElementById("discountBadge")
  const categoryOfferInfo = document.getElementById("categoryOfferInfo")
  const categoryOfferValue = document.getElementById("categoryOfferValue")
  const offerComparison = document.getElementById("offerComparison")
  const productOfferDisplay = document.getElementById("productOfferDisplay")
  const categoryOfferDisplay = document.getElementById("categoryOfferDisplay")
  const effectiveOfferDisplay = document.getElementById("effectiveOfferDisplay")
  const productOfferItem = document.getElementById("productOfferItem")
  const categoryOfferItem = document.getElementById("categoryOfferItem")
  const variantContainer = document.getElementById("variantContainer")

  // Function to update discount preview
  function updateDiscountPreview() {
    const price = Number.parseFloat(productPriceInput.value) || 0
    const productOffer = Number.parseInt(productOfferInput.value) || 0

    // Get category offer if a category is selected
    let categoryOffer = 0
    if (productCategorySelect.value) {
      const selectedOption = productCategorySelect.options[productCategorySelect.selectedIndex]
      categoryOffer = Number.parseInt(selectedOption.dataset.offer || 0)
    }

    // Update category offer info
    if (categoryOffer > 0) {
      categoryOfferInfo.classList.remove("d-none")
      categoryOfferValue.textContent = categoryOffer
    } else {
      categoryOfferInfo.classList.add("d-none")
    }

    // Update offer comparison
    productOfferDisplay.textContent = `${productOffer}%`
    categoryOfferDisplay.textContent = `${categoryOffer}%`

    // Use the higher of product offer or category offer
    const effectiveDiscount = Math.max(productOffer, categoryOffer)
    effectiveOfferDisplay.textContent = `${effectiveDiscount}%`

    // Highlight the winner
    if (productOffer > categoryOffer) {
      productOfferItem.classList.add("offer-winner")
      categoryOfferItem.classList.remove("offer-winner")
    } else if (categoryOffer > productOffer) {
      categoryOfferItem.classList.add("offer-winner")
      productOfferItem.classList.remove("offer-winner")
    } else {
      // If they're equal, don't highlight either one
      productOfferItem.classList.remove("offer-winner")
      categoryOfferItem.classList.remove("offer-winner")
    }

    // Show offer comparison if either offer is > 0
    if (productOffer > 0 || categoryOffer > 0) {
      offerComparison.classList.remove("d-none")
    } else {
      offerComparison.classList.add("d-none")
    }

    // Only show price preview if there's a price and a discount
    if (price > 0 && effectiveDiscount > 0) {
      const discountedPrice = price - (price * effectiveDiscount) / 100

      originalPriceSpan.textContent = price.toFixed(2)
      discountedPriceSpan.textContent = discountedPrice.toFixed(2)
      discountBadge.textContent = `${effectiveDiscount}% OFF`

      discountPreview.classList.remove("hidden")
    } else {
      discountPreview.classList.add("hidden")
    }

    // Update all variant prices if they exist
    updateVariantPrices(effectiveDiscount)
  }

  // Function to update variant prices based on effective discount
  function updateVariantPrices(effectiveDiscount) {
    const variantRows = variantContainer.querySelectorAll(".variant-row")

    variantRows.forEach((row) => {
      const priceInput = row.querySelector(".variant-price")
      if (priceInput && priceInput.value) {
        const originalPrice = Number.parseFloat(priceInput.value)
        if (!isNaN(originalPrice)) {
          // Calculate discounted price
          const discountedPrice = originalPrice - (originalPrice * effectiveDiscount) / 100

          // Update or create discount display
          let discountDisplay = row.querySelector(".discount-display")
          if (!discountDisplay && effectiveDiscount > 0) {
            discountDisplay = document.createElement("div")
            discountDisplay.className = "discount-display text-success mt-1"
            priceInput.parentNode.appendChild(discountDisplay)
          }

          if (discountDisplay) {
            if (effectiveDiscount > 0) {
              discountDisplay.innerHTML = `<small>Sale price: ₹${discountedPrice.toFixed(2)} (${effectiveDiscount}% off)</small>`
              discountDisplay.classList.remove("d-none")
            } else {
              discountDisplay.classList.add("d-none")
            }
          }
        }
      }
    })
  }

  // Add event listeners for discount preview
  if (productPriceInput) {
    productPriceInput.addEventListener("input", updateDiscountPreview)
  }

  if (productOfferInput) {
    productOfferInput.addEventListener("input", updateDiscountPreview)
  }

  if (productCategorySelect) {
    productCategorySelect.addEventListener("change", updateDiscountPreview)
  }

  // Add event listener for variant price changes
  document.addEventListener("input", (e) => {
    if (e.target.classList.contains("variant-price")) {
      updateDiscountPreview()
    }
  })

  // Initialize discount preview on page load
  updateDiscountPreview()
})

</script>
</body>
</html>
